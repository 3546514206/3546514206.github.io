<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RPC、Dubbo 和网络通讯</title>
    <url>/2025/03/14/RPC%E3%80%81dubbo%E5%92%8C%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     之前给同事解释 RPC，由于紧张，语言没有组织好，解释得很乱，现在重新组织一下语言之后书面化记录下来。</p>
<p>     RPC 的全称是远程过程调用（Remote Produce Call），本质上应该将其看作是一种编程范式，这种编程范式，规定了这样的一件事情：RPC 方案应该能够让我们像调用本地方法一样，去调用远程的一个函数，它可以帮助开发人员屏蔽底层的通讯细节，从而专注于业务开发。RPC 是分布式应用系统的核心解决方案之一。</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/RPC%E3%80%81dubbo%E5%92%8C%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF/RPC.png" alt="RPC"></p>
<p>     RPC 描述的是这样的一种，在分布式场景下的编程范式，实际上和网络协议是没有强关联的关系——既不是对立或并列，也不是包含与被包含的关系。分布式应用开发必然牵涉到多台机器之间的通讯，RPC 客户端调用远程过程，也必须基于某种网络通讯协议，因此才和网络协议扯上关系。</p>
<p>     可是为什么有了 http 之类的应用层通讯协议，RPC 框架往往还会自己去实现一套通讯协议，例如 Dubbo 默认实现的 dubbo 通讯协议，Sofa RPC 实现的 bolt 通讯协议。这是因为 http 通讯是无状态的，这意味着 http 通讯的参与方之间是短连接的，每次通讯都需要重新握手与挥手，这在性能上是一种很大的损失。RPC 框架基于 TCP 协议重新设计的通讯协议，能够定制更加精简的报文结构和更加简单的通信次序，往往还会被设计成长连接的，因此具有更高的性能。但是大多数的 RPC 框架其实都支持多种通讯协议，例如 Sofa RPC 除了支持内置的 bolt 协议，还支持 http、hession2 等。</p>
<p>     我们在理解 Dubbo 的时候，不能只将其简单理解为一个 RPC 通讯框架——通过为应用层动态生成 RPC 的网络通讯代理，使网络通讯细节对业务开发人员透明化，这仅仅只是 dubbo 的数据面作为一款通讯工具最基本的功能而已，在过去几年，Dubbo 早就发展成一个完善的微服务开发框架，拥有完善的服务治理能力。</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/RPC%E3%80%81dubbo%E5%92%8C%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF/dubbo.png" alt="RPC"></p>
<p>     给同事解释 RPC 的背景是如下图 mPaaS 中，手机客户端与移动网关之间的 RPC 通讯方式（图中的步骤 7）：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/RPC%E3%80%81dubbo%E5%92%8C%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF/mpaas.jpg" alt="RPC"></p>
<p>     我问了蚂蚁负责 mPaaS 的开发同学，对方提醒我网关后管生成并向客户端分发的 SDK，实际上就包含了网络通讯代理，只不过这种场景下的 RPC 通讯方式，采用的通讯协议是 http。因此 mPaaS 能够提供“让我们像调用本地方法一样，去调用远程的一个函数”的编程体验，却并不能为了我带来 RPC 框架直接基于 TPC 协议实现的通讯协议的性能提升。</p>
]]></content>
      <tags>
        <tag>dubbo</tag>
        <tag>服务治理</tag>
      </tags>
  </entry>
  <entry>
    <title>如何看待“Java之父”这类人</title>
    <url>/2025/02/25/%E5%A6%82%E4%BD%95%E7%9C%8B%E5%BE%85Java%E4%B9%8B%E7%88%B6%E8%BF%99%E7%B1%BB%E4%BA%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     以前有人好奇进了余胜军的学生群（没交费的群，他还有付费学员群），余胜军也在里面。余胜军很少说话，他说过网上冒充他的人很多，知乎那个账号不是他本人。就根据那人在群里对余胜军的观察，觉得这个年轻人至少有脑子，课程水平确实比较初级，也有一些错误，但作为生意人，这个年轻人一点都不差。</p>
<p><img src="/pic/%E5%85%B6%E4%BB%96/Java%E4%B9%8B%E7%88%B6/%E5%B0%8F%E4%B8%91.jpg" alt="Java之父"></p>
<p>     余胜军能为人所熟知，靠的是包装人设，他的人设是家境贫寒，其貌不扬，初中文凭，不喜欢上学也不再上学，早早混社会，然后靠自己努力逆袭。这个人设的前五个短语就是广大中国人的人设，非常接地气。大多数跟他一样出身的中国人，最迷恋的一套成长故事就是，一个看起来屌丝中的屌丝，在学校一无是处，最后混社会混出一片天地。他们的上学经历很失败，他们也对学校充满敌意，他们一点都不敬佩学习好的人，而是疯狂跪舔余胜军这种学习一塌糊涂但在社会上混得有一定成就的人。余胜军正好给他们立了这样一个故事主人公，并且还立住了，所以他们对余胜军才推崇备至。</p>
<p>     至于余胜军那些比较张狂的宣传方式，比如 xx 全网第一，xx 之父之类的，这同样契合他那些粉丝，越是底层出身的人，越是出于自卑而形成的张狂，什么 xx 一哥，xx 一姐，都是这类人给自己网上贴的标签。余胜军这种张狂都是为了迎合他的粉丝，他混这么多年社会，不可能不知道这会找骂。你觉得 java 之父很傻逼，他的粉丝可不觉得，你不是他的受众群体，他只要维护好自己的受众群体就足够了。</p>
<p>     余胜军的课程确实有一些值得商榷的地方，比如课程内容的错误和不规范的地方，但我不认为这是什么特别不能接受的。现在整个社会就已经浮躁急功近利，劣币驱逐良币的现象大范围存在。这些底层人受社会影响，并不想一步一个脚印踏实走出来，这个社会也不给扎扎实实做事的人生存空间，他们想的就是尽快暴富或者生活好起来。余胜军的课程的定位就是给这类人一个机会，本来他的受众群体文化程度就不高，讲一些简单易懂的内容他们也容易上手。课程的错误内容可以通过以后的工作中学习来弥补，当然也许工作单位的技术水平可能还不如余胜军的课呢，我在某些大企业就切实感受到了这一点。</p>
<p>     其实可以拿余胜军和某个拍农村片的网红导演做个对比，俩人其实是一路人，都是靠立底层出身的人设，做一些接地气的事情，通过炒作蹿红。那些网红导演拍的片子纯粹奶头乐，看之前就是傻逼的人看了之后继续傻逼。顺便说一下，那些短视频里拿着玩具枪射这个射那个的老头老太太，每天的演出酬劳一个人几千块，这是我考证过的，你们手机上看到的农村大爷大妈，可能比你厂里的工头都有钱。我觉得余胜军比起那些网红导演，做的事情有积极意义，起码教会了底层人一些技能，让他们有自食其力的可能。</p>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>新梦想：梦中情房</title>
    <url>/2025/02/23/%E6%96%B0%E6%A2%A6%E6%83%B3%EF%BC%9A%E6%A2%A6%E4%B8%AD%E6%83%85%E6%88%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer17" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer17"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/梦中情房/梦中情房.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Dubbo3 源码深入解读</title>
    <url>/2025/02/23/dubbo3%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="/pdf/dubbo/ApacheDubbo3%E6%BA%90%E7%A0%81%E6%B7%B1%E5%85%A5%E8%A7%A3%E8%AF%BB.pdf">Apache Dubbo3 源码深入解读</a></p>
]]></content>
      <tags>
        <tag>dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>美团技术年货汇总</title>
    <url>/2025/01/22/%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF%E5%B9%B4%E8%B4%A7%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="/pdf/%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF/2017%E5%B9%B4%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF%E5%B9%B4%E8%B4%A7%EF%BC%88%E5%90%88%E8%BE%91%EF%BC%89.pdf">2017年美团技术年货</a></p>
<p><a href="/pdf/%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF/2018%E5%B9%B4%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF%E5%B9%B4%E8%B4%A7-%E5%90%8E%E7%AB%AF.pdf">2018年美团技术年货-后端</a></p>
<p><a href="/pdf/%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF/2018%E5%B9%B4%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF%E5%B9%B4%E8%B4%A7-%E6%B5%8B%E8%AF%95.pdf">2018年美团技术年货-测试</a></p>
<p><a href="/pdf/%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF/2018%E5%B9%B4%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF%E5%B9%B4%E8%B4%A7-%E7%B3%BB%E7%BB%9F.pdf">2018年美团技术年货-系统</a></p>
<p><a href="/pdf/%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF/2018%E5%B9%B4%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF%E5%B9%B4%E8%B4%A7-%E8%BF%90%E7%BB%B4.pdf">2018年美团技术年货-运维</a></p>
<p><a href="/pdf/%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF/2019%E5%B9%B4%E7%BE%8E%E5%9B%A2%E7%82%B9%E8%AF%84%E6%8A%80%E6%9C%AF%E5%B9%B4%E8%B4%A7.pdf">2019年美团技术年货</a></p>
<p><a href="/pdf/%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF/2020%E5%B9%B4%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF%E5%B9%B4%E8%B4%A7-%E5%90%88%E9%9B%86.pdf">2020年美团技术年货</a></p>
<p><a href="/pdf/%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF/2021%E5%B9%B4%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF%E5%B9%B4%E8%B4%A7.pdf">2021年美团技术年货</a></p>
<p><a href="/pdf/%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF/2022%E5%B9%B4%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF%E5%B9%B4%E8%B4%A7-%E5%90%88%E8%BE%91.pdf">2022年美团技术年货</a></p>
<p><a href="/pdf/%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF/2023%E5%B9%B4%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF%E5%B9%B4%E8%B4%A7.pdf">2023年美团技术年货</a></p>
<p><a href="/pdf/%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF/2024%E5%B9%B4%E7%BE%8E%E5%9B%A2%E6%8A%80%E6%9C%AF%E5%B9%B4%E8%B4%A7%E5%90%88%E9%9B%86.pdf">2024年美团技术年货</a></p>
]]></content>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title>开发以为的工作和实际的开发工作</title>
    <url>/2025/01/21/%E5%BC%80%E5%8F%91%E4%BB%A5%E4%B8%BA%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%92%8C%E5%AE%9E%E9%99%85%E7%9A%84%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%B7%A5%E4%BD%9C/%E5%BC%80%E5%8F%91%E4%BB%A5%E4%B8%BA%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%92%8C%E5%AE%9E%E9%99%85%E7%9A%84%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C/%E5%BC%80%E5%8F%91%E4%BB%A5%E4%B8%BA%E7%9A%84%E5%B7%A5%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%AE%9E%E9%99%85%E7%9A%84%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C.webp" alt="开发以为的工作以及实际的开发工作"></p>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>性能还是一致性？</title>
    <url>/2025/01/16/%E6%80%A7%E8%83%BD%E8%BF%98%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     在握手式国密通讯的机制中，正常逻辑如流程一所示：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E6%80%A7%E8%83%BD%E8%BF%98%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7/%E6%B5%81%E7%A8%8B%E4%B8%80.png" alt="流程一"></p>
<p>     上述流程中，服务端来判断 token 是否有效，如果失效会告知客户端，客户端需重新握手协商工作秘钥，并重发请求三。 屹通认为重发是一种性能浪费，于是做了如下流程二的“优化”：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E6%80%A7%E8%83%BD%E8%BF%98%E6%98%AF%E4%B8%80%E8%87%B4%E6%80%A7/%E6%B5%81%E7%A8%8B%E4%BA%8C.png" alt="流程二"></p>
<p>     这里可能存在如下问题：</p>
<p>     <strong>服务端在反馈了握手请求之后重新 ntp 或者客户端手动修改时间导致客户端与服务端的时间戳不一致的问题；</strong></p>
<p>     <strong>服务端意外删除缓存起来的 token 对应的工作秘钥，但是客户端并不知道。</strong></p>
<p>     总结起来，是这么一回事：</p>
<p>     客户端跟服务端通信之前，应该跟服务端协商一些信息，接下来的通信，客户端将依赖于协商的这些信息（实际上就是工作秘钥）进行。但是为了安全性，这些信息是会周期性更换的。正常情况下，应该是客户端走某次与服务器通讯的过程中，由服务端告知客户端这些信息失效了，然后触发重新协商的过程，协商完毕，重新建立上次中断的请求。</p>
<p>     协商的信息中，服务端会返回一些辅助类字段，例如时间戳。然后屹通，根据这个时间戳，在客户端的网络框架去自行计算协商信息的有效期，而不是根据服务端的实际反馈。理由是多了一次业务请求，性能上由浪费。</p>
<p>     重试重发，在各种各样的场景中（例如 JOB 调度，RPC 请求），都是非常常规的做法，并不是非要避免。并且现在，功能都不对了（例如客户端由于网络分区或者用户手动修改手机时间，会导致本地时间戳和服务端时间戳不一致），空谈性能，有什么用。</p>
]]></content>
      <tags>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title>2024Q1全国手机银行排名</title>
    <url>/2025/01/09/%E5%85%A8%E5%9B%BD%E6%89%8B%E6%9C%BA%E9%93%B6%E8%A1%8C%E6%8E%92%E5%90%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%B7%A5%E4%BD%9C/%E5%85%A8%E5%9B%BD%E6%89%8B%E6%9C%BA%E9%93%B6%E8%A1%8C%E6%8E%92%E5%90%8D/%E5%85%A8%E5%9B%BD%E6%89%8B%E6%9C%BA%E9%93%B6%E8%A1%8C%E6%8E%92%E5%90%8D.png" alt="2024Q1全国手机银行排名"></p>
]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>2024工作总结</title>
    <url>/2025/01/07/2024%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     2024 年的工作汇总如下图所示，其中图中下半部分为我的主职——开发平台工作。开发平台今年的工作可以总结为这个方向：应用治理。</p>
<p><img src="/pic/%E5%85%B6%E4%BB%96/2024%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/2024%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93.png" alt="2024工作总结"></p>
<p>     应用治理是相对于服务治理提出来的概念，服务治理是说，PaaS 技术平台围绕 RPC 框架提供的服务注册、服务发现、服务鉴权与限流熔断等。而应用治理，是指在开发平台层提出来的，对应用开发态、运行态、维护台进行全方位质量把关、监控管理的能力。例如下图所示的平台级健康检查与监控能力。</p>
<p><img src="/pic/%E5%85%B6%E4%BB%96/2024%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E4%B8%8E%E7%9B%91%E6%8E%A7.png" alt="健康检查与监控"></p>
]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>从头到尾说一说Java时间日期体系的前世今生</title>
    <url>/2025/01/06/00_%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E8%AF%B4%E4%B8%80%E8%AF%B4Java%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E4%BD%93%E7%B3%BB%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-突击检查"><strong>1、突击检查</strong></h4>
<p>     如下代码输出什么，机器当下所设定的时区为美国时区，在北京时间 2024-12-07 11:20:51 时，传入字符串“2024-12-07 11:46:36”。最终输出应该是true，还是false呢？</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E8%AF%B4%E4%B8%80%E8%AF%B4Java%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E4%BD%93%E7%B3%BB%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/%E7%AA%81%E5%87%BB%E6%A3%80%E6%9F%A5.webp" alt="突击检查"></p>
<h4 id="2-前言"><strong>2、前言</strong></h4>
<p>     约38亿年前地球出现生命体，约46亿年前太阳系形成，大约138亿年前宇宙大爆炸，那再往前呢？想起吕秀才对姬无命发出灵魂之问『时间是否有开端，宇宙是否有尽头』。施一公曾经在一次演讲中说，宇宙中从来不存在时间，只存在运动。地球公转太阳一圈是一年，这是运动，地球自转一圈是一天，这也是运动。从来就没有时间，或者说时间就是空间。</p>
<p>     『三十年春，秦晋围郑。郑伯使烛之武如秦』两千多年前我们就以时间记事，在造物主已经缔造的这一片井然有序的世界里，我们凭空创建出一个新的概念，并不断尝试融入这个世界体系–沙漏、水钟、日晷等等。今天站在计算机这个领域，也让我们重新梳理一遍，计算机世界里日期时间体系的前世今生。</p>
<h4 id="3-日期从1970-年1月1日说起"><strong>3、日期从1970 年1月1日说起</strong></h4>
<p>     任何一个软件开发人员对这个时间应该都不陌生，有时我们忘记初始化或者忘记赋值时，日期就会显示为1970-01-01，我们也叫日期初始值。那为什么日期的初始值是从1970-01-01开始呢？有一个说法是说遵循了Unix的时间计数，Unix认为 1970年1月1日0点 [1]是时间纪元，那为什么Unix要以这个时间为准呢？</p>
<p>     有一处说法是说，当时操作性系统都是32位，如果每一个数值代表一秒，那么最多可以表示2^32-1，也就是2147483647秒，换算成年大概是68年。而Unix系统就是由Ken Thompson、Dennis Ritchie和Douglas McIlroy等人在贝尔实验室开发于1969年开发的，他们为了让时间尽可能的多利用起来，便用了下一年，即 1970年1月1日作为开始，然后这个约定也逐步延伸到其他各个计算机领域。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E8%AF%B4%E4%B8%80%E8%AF%B4Java%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E4%BD%93%E7%B3%BB%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/%E6%97%A5%E6%9C%9F%E4%BB%8E1970%E5%B9%B41%E6%9C%881%E6%97%A5%E8%AF%B4%E8%B5%B7.webp" alt="日期从1970 年1月1日说起"></p>
<h4 id="4-时间从gmt与utc说起"><strong>4、时间从GMT与UTC说起</strong></h4>
<p>     聊完日期我们再来看时间，爱好体育的应该都知道，看欧冠得半夜起来看，看NBA得早上起来看，现在是北京时间的14点，同时也是纽约时间的凌晨1点半。那是因为我们各地处不同时区，那时区以什么为初始划分的呢？</p>
<h5 id="4-1-gmt-格林威治时间"><strong>4.1、GMT 格林威治时间</strong></h5>
<p>     GMT的全称是 Greenwich Mean Time [2]即格林威治标准时间，是一种与地球自转相关、以太阳日为单位的时间标准。在十七世纪，格林威治皇家天文台为了海上霸权的扩张计划，选择了穿过英国伦敦格林威治天文台子午仪中心的一条经线作为零度参考线，也就是我们教科书上记载的本初子午线。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E8%AF%B4%E4%B8%80%E8%AF%B4Java%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E4%BD%93%E7%B3%BB%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/%E6%A0%BC%E6%9E%97%E5%A8%81%E6%B2%BB%E6%97%B6%E9%97%B4.webp" alt="格林威治时间"></p>
<p>     并约定从本初子午线起，经度每向东或者向西间隔15°，就划分一个新的时区[3]，每个时区间隔1小时，在这个区域内，大家使用同样的标准时间。但各个国家也会基于各个国家的情况拆分或合并时区，比如中国横跨5个时区，但我们统一使用东八区；而美国则有东部时间、西部时间、夏威夷时间等等。</p>
<p>     从 1924 年开始，格林威治天文台每小时就会向全世界播报时间，最终截止到 1979 年。至于为什么会终止，自然有它的缺点和局限性，那我们就得聊聊UTC时间了。</p>
<h5 id="4-2-utc-世界协调时间"><strong>4.2、UTC 世界协调时间</strong></h5>
<p>     UTC的全称是 Coordinated Universal Time [4]协调世界时间，也称世界标准时间。据说按英语的简称是CUT，按法语的简称是TUC，然后大家相互拉扯一波后，统一叫了UTC。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E8%AF%B4%E4%B8%80%E8%AF%B4Java%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E4%BD%93%E7%B3%BB%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/%E5%9C%B0%E7%90%83%E5%85%AC%E8%BD%AC.png" alt="地球公转"></p>
<p>     上述所说GMT时间是以地球自转与围太阳公转来计时的，GMT时间认为地球自转一圈是24<em>3600秒，而地球的运动轨迹受很多方面影响，比如潮汐摩擦、气象变化、地震及地质活动等等，运动的时间周期并不是完全规律和相同的。这样会导致其实一天并不完全是24</em>3600秒，这样平均算下来GMT的一秒就不是完全意义上最精确的一秒。但偏差通常也不会很大，基本为毫秒级偏差，但日积月累如果不加以扶正，就会越差越远。</p>
<p>     而UTC的计数是基于 原子钟（Atomic Clock） [5]的计数，比如铯原子钟采用铯-133原子的特性，在特定能级跃迁时会产生一个非常确定的频率9,192,631,770赫兹。然后基于铯-133原子的运动经过换算确定出我们需要的时间周期，据说这种误差可达每百万年内不到一秒。</p>
<p>     UTC 最终由两部分构成：原子时间与世界时间。原子时间基于原子钟，来标准化我们钟表中每一秒时间前进的数据；世界时间是结合GMT时间，我们用多少个原子时来决定一个地球日的时间长度。从1972年开始，UTC被正式采用为国际标准时间。这年实施了一种新的时间调整机制，包括使用闰秒[6]以便对齐地球自转与原子时间。</p>
<h4 id="5-jdk-时间日期的发展史"><strong>5、JDK 时间日期的发展史</strong></h4>
<h5 id="5-1-java-util-date"><strong>5.1、java.util.Date</strong></h5>
<p>     说起Date那可是JDK的正牌嫡系，从1.0开始就一直存在并延续至今。但只要大家用过一些代码扫描工具，基本都是在提示你尽量不要使用Date。在oracle的官方JDK文档中，有超过一半的函数都是deprecated，要细说Date的问题，那可真是一言难尽。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E8%AF%B4%E4%B8%80%E8%AF%B4Java%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E4%BD%93%E7%B3%BB%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/java.util.Date.webp" alt="java.util.Date"></p>
<ul>
<li>
<p><strong>不能单独表示日期或时间：</strong> Sat Dec 07 17:36:58 CST 2024 这是我们输出new Date()之后的数据，因为Date本质是某一个时刻的时间戳，导致它不能单独表示日期，更不能表示不带日期的时间。</p>
</li>
<li>
<p><strong>令人捉摸不透的API：</strong> 单就Date的方法名来看，应该是非常友好的。它提供了getYear(), getDay()等等，你但凡用过一次，一定让你抓狂。</p>
</li>
<li>
<p><strong>不支持时区设定：</strong> day和month是从0开始计数的，所以月最大是11，日最大是30，年输出124是因为2024年距离1900年有124年。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="comment">// 输出 6</span></span><br><span class="line">    System.out.println(date.getDay());</span><br><span class="line">    <span class="comment">// 输出 11</span></span><br><span class="line">    System.out.println(date.getMonth());</span><br><span class="line">    <span class="comment">// 输出 124</span></span><br><span class="line">    System.out.println(date.getYear());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>不支持时区设定：</strong> 曾经写过一段这样的代码，取当前的中国时间，被老板臭骂一顿。。。Date的本质是一个时间戳。当前此时此刻，全球任何一个地方的时间戳都是同一个，Date本身不支持时区。PS.本质上这行代码也指定不了时区哦~</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> Calendar.getInstance(Locale.CHINA).getTime();</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Date是可变的：</strong> Date是一个非常基础底层的类，但它却设计为可变。当我们计算这个data3天后是不是周末，如果程序计算中把这个date加了3天，那么你手上拿着得date也变成了3天后的日期。相比同为底层基础类的String，做得就优秀多了。</li>
</ul>
<h5 id="5-2-难当大任的calendar"><strong>5.2、难当大任的Calendar</strong></h5>
<p>     JDK刚推出就发现了问题，于是赶紧在1.1版本推出了Calendar，尝试用来解决令人诟病的Date，并将Date一众函数都标记为了deprecated。但Calendar依然是可变对象、最多也只能精确到毫秒、线程不安全、API的使用复杂且笨重等等，Calendar整体而言并没有挽回颓势。</p>
<h5 id="5-3-曙光来临之jsr310"><strong>5.3、曙光来临之JSR310</strong></h5>
<p>     在聊JSR310之前，不得不先提一提  Joda-Time [7]这个开源Java库。Joda-Time以清晰的API、良好的时区支持、不可变性、强类型化等特性，得到了开发者社区的广泛好评，并在很多项目中被采用，被视为改善Java日期和时间处理的标杆库。Joda-Time如此优秀，Oracle也开启了收编之旅。2013年Java8发布，其中针对日期时间带来一套全新的标准规约 JSR310 [8]，而JSR310的核心制作者就是Joda-Time的作者Stephen Colebourne。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E8%AF%B4%E4%B8%80%E8%AF%B4Java%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E4%BD%93%E7%B3%BB%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/JSR310.webp" alt="JSR310"></p>
<ul>
<li><strong>Instant：</strong> Instant这个单词的中文含义是『瞬间』，严格来说Java8之前的Date就应该是现在的Instant。Instant类有维护2个核心字段，当前距离时间纪元的秒数以及秒中的纳秒部分。它指代当前这个时刻，全球任一位置这一时刻都是同一时刻。这一时刻川建国同学在高床软枕打着呼，这一时刻我泡着龙井写着文稿。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of seconds from the epoch of 1970-01-01T00:00:00Z.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> seconds;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of nanoseconds, later along the time-line, from the seconds field.</span></span><br><span class="line"><span class="comment"> * This is always positive, and never exceeds 999,999,999.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> nanos;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>LocalDateTime：</strong> LocalDateTime由LocalDate和LocalTime组成，分别日期和时间，以此来解决Date中不能单独表示日期和时间的问题。它们都与时区无关，只客观代表一个无时区的时间，比如2024-12-08 13:46:21，LocalDateTime记录着它的年、月、日、时、分、秒、纳秒。但具体是北京时间的13点还是伦敦时间的13点，由上下文语境自行处理。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/******************** LocalDate ********************/</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The year.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> year;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The month-of-year.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">short</span> month;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The day-of-month.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">short</span> day;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************** LocalTime ********************/</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The hour.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span> hour;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The minute.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span> minute;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The second.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">byte</span> second;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The nanosecond.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> nano;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Duration</strong></li>
</ul>
<p>     Duration中文含义译为『期间』，通常用来计算2个时间之前相差的周期，不得不说这一套时间JDK确实定义得语义非常清晰。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Instant</span> <span class="variable">startInstant</span> <span class="operator">=</span> xxx;</span><br><span class="line"><span class="type">Instant</span> <span class="variable">endInstant</span> <span class="operator">=</span> xxx;</span><br><span class="line">Duration.between(startInstant, endInstant).toMinutes();</span><br></pre></td></tr></table></figure>
<p>     这个很好理解，比较2个时间戳时间的相差分钟数。但如果换成LocalDateTime，会是怎样呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">startTime</span> <span class="operator">=</span> xxx;</span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">endTime</span> <span class="operator">=</span> xxx;</span><br><span class="line">Duration.between(startTime, endTime).toMinutes();</span><br></pre></td></tr></table></figure>
<p>     因为LocalDateTime是不带时区的，所以LocalDateTime是不能直接换成成Instant的。而Duration的比较也是不带时区的，或者你可以理解它是把时间放在同一个时区进行比较，来抹去时区的影响。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/********************* JDK Duration.between 部分源码 *******************************/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">until</span><span class="params">(Temporal endExclusive, TemporalUnit unit)</span> &#123;</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">end</span> <span class="operator">=</span> LocalDateTime.from(endExclusive);</span><br><span class="line">    <span class="keyword">if</span> (unit <span class="keyword">instanceof</span> ChronoUnit) &#123;</span><br><span class="line">        <span class="keyword">if</span> (unit.isTimeBased()) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">amount</span> <span class="operator">=</span> date.daysUntil(end.date);</span><br><span class="line">            <span class="keyword">if</span> (amount == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> time.until(end.time, unit);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="variable">timePart</span> <span class="operator">=</span> end.time.toNanoOfDay() - time.toNanoOfDay();</span><br><span class="line">            <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                amount--;  <span class="comment">// safe</span></span><br><span class="line">                timePart += NANOS_PER_DAY;  <span class="comment">// safe</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                amount++;  <span class="comment">// safe</span></span><br><span class="line">                timePart -= NANOS_PER_DAY;  <span class="comment">// safe</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 余下省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>     上述是Duration部分源码，它首先计算出2个时间相差多少天，再比较当天的时间里相差多少纳秒，再进行累加。所以你传过来2024-12-08 和 2024-12-04，那就是相差4天，至于是北京时间的12-08还是伦敦时间的12-04，在Duration里都被抹去了时区的概念。看到这里，上面的编程题里做对了吗？</p>
<ul>
<li><strong>ZonedDateTime</strong></li>
</ul>
<p>     真正需要使用时区，我们就需要用到ZonedDateTime。「zoned」这个单词在英汉词典中是zone的过去分时，译为『划为区域的』。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出：2024-12-08T14:18:32.554144+08:00[Asia/Shanghai]</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">defaultZoneTime</span> <span class="operator">=</span> ZonedDateTime.now(); <span class="comment">// 默认时区</span></span><br><span class="line"><span class="comment">// 输出：2024-12-08T01:18:32.560931-05:00[America/New_York]</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">usZoneTime</span> <span class="operator">=</span> ZonedDateTime.now(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>)); <span class="comment">// 用指定时区获取当前时间</span></span><br></pre></td></tr></table></figure>
<p>     因为LocalDateTime是没有时区的，如果我们需要将LocalDateTime转成ZonedDateTime，就需要带上时区信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2024</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">21</span>, <span class="number">17</span>);</span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">zonedDateTime</span> <span class="operator">=</span> localDateTime.atZone(ZoneId.systemDefault());</span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">usZonedDateTime</span> <span class="operator">=</span> localDateTime.atZone(ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>));</span><br></pre></td></tr></table></figure>
<p>     随着JDK不断地发布演进，Time模块确实得到了质的提升，这里不一一细说Java日期时间相关API。如果你还在苦于对Date做各种Utils的花式包装，请拥抱java.time吧。</p>
<h4 id="6-时间日期引起的惨案"><strong>6、时间日期引起的惨案</strong></h4>
<h5 id="6-1-夏令时与冬令时"><strong>6.1、夏令时与冬令时</strong></h5>
<p>     曾经小A做了一个鉴权系统，用于对请求做加密解密，保证每一次都是真实合法有效的接口请求。其中做了一个判定，如果请求的时间距现在已经超过10分钟，就会拒绝该次请求。从逻辑上来说，这很合理，但问题的雪崩却出现在3月的那个晚上。。。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E8%AF%B4%E4%B8%80%E8%AF%B4Java%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E4%BD%93%E7%B3%BB%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/%E5%A4%8F%E4%BB%A4%E6%97%B6%E4%B8%8E%E5%86%AC%E4%BB%A4%E6%97%B6.webp" alt="夏令时与冬令时"></p>
<ul>
<li><strong>什么是夏令时</strong></li>
</ul>
<p>     夏令时[9]又称夏时制，英文原文为Daylight Saving Time，从名字上可以看出，夏令时诞生的背景是为了更好的利用白天的时间。夏令时概念的提出最早可以追溯到1895年，新西兰昆虫学家乔治·哈德逊向惠灵顿哲学学会提出，提前2小时的日光节约提案，以此在工作结束后，可以获得多出一段的白昼时间。</p>
<p>     具体夏令时的实施，以美国为例，美国会在每年3月的第二个星期日的凌晨2:00，时钟会往前调1个小时变为3:00。再在每年11月的第一个星期日的凌晨2:00，将时钟在往后调1个小时变成1:00，此时的回拨也被称为“冬令时”。</p>
<ul>
<li><strong>夏令时实施的国家与地区</strong></li>
</ul>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E8%AF%B4%E4%B8%80%E8%AF%B4Java%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E4%BD%93%E7%B3%BB%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/%E5%A4%8F%E4%BB%A4%E6%97%B6%E5%AE%9E%E6%96%BD%E7%9A%84%E5%9B%BD%E5%AE%B6%E4%B8%8E%E5%9C%B0%E5%8C%BA.webp" alt="夏令时实施的国家与地区"></p>
<blockquote>
<p>蓝色为正在实施夏令时的过去和地区<br>
灰色为曾经实施但现在已经取消夏令时的国家和地区<br>
黑色为从未实施夏令时的过去和地区</p>
</blockquote>
<p>     1916年4月30日，德国与奥匈帝国成为世界上第一组实施夏时制的国家，目的是为了能在战争期间节约煤炭消耗。在1970年代，由于美洲与欧洲地区也受到能源危机影响，至此夏令时开始广泛被实施。当下全球有共约70多个国家和时区在使用夏令时，我国也曾短暂使用过夏令时，但因节约能源效果不显著，以及对日常生活工作等带来的一些影响，到1992年全国宣布取消夏令时。</p>
<h5 id="6-2-闰年与闰秒"><strong>6.2、闰年与闰秒</strong></h5>
<p>     2008年是闰年存在2月29日，但微软一些软件在处理部分任务的时候会因为闰年导致处理错误。微软甚至在SQL Server 2008 CTP发布后曾经宣读了一份证明，建议用户不要在2月29日安装和运行软件，以减少影响。并且在Windows Small Business Server上还会出现更严重的错误：因为在微软的日历里根本没那么一天，因此就无法颁发证书。</p>
<ul>
<li><strong>为什么要闰年</strong></li>
</ul>
<p>     闰年大家比较熟悉，闰年的设置是为了使日历年与太阳年（即地球绕太阳公转一周的时间）更精准地一致。严格来说地球绕太阳一圈的时间，大约是365.2422天。经过大约四年，累计误差将接近一天（0.2422 * 4 ≈ 0.9688天），但如果每4年就加1天，这样每128年又会多算出1天。所以基于此定义出了普通闰年与世纪闰年。</p>
<blockquote>
<p>普通闰年：公历年份是4的倍数，且不是100的倍数的，为闰年（如2004年、2020年等就是闰年）。<br>
世纪闰年：公历年份是整百数的，必须是400的倍数才是闰年（如1900年不是闰年，2000年是闰年）。</p>
</blockquote>
<ul>
<li><strong>为什么要闰秒</strong></li>
</ul>
<p>     闰秒[10]本质上和闰年的作用是一样的，也是解决时间解释运动中所存在的偏差。闰秒的调整是为了确保协调世界时（UTC）与地球自转时间（UT1）[11]保持一致。由于地球自转速度的不均匀性和减慢，UTC需要定期添加或删除一秒钟来进行调整，这一秒钟称为“闰秒”。</p>
<p>     国际地球自转与参考系统服务（IERS）是负责监测和发布闰秒调整的机构。ERS会根据地球自转的实际变化和测量数据，决定是否需要调整闰秒。闰秒通常在6月30日或12月31日的最后一秒添加或删除。这意味着在某些年份，时间序列可能会变为：23:59:59 → 23:59:60 → 00:00:00。</p>
<h4 id="7-写在最后"><strong>7、写在最后</strong></h4>
<p>     『存在不一定合理，但一定有原因』这是曾经我的主管跟我说的，至今我也受益其中。对所有事情怀有一丝怀疑心态，搞懂它的前世今生，或许它不那么合理，但至少当时这样做解决了一定的问题，我们在做新设计的时候可以提前考虑与规避。水多了加面，面多了加水，如果我们只是看到当下的混乱就指着“前人”没有设计思想没有技术匠心，却不了解最初“前人”这样做的意图与背景，骂着“前人”的我们终有一天也会成为后人眼中的“前人”。</p>
<p>     参考链接：<br>
     [1]<a href="https://en.wikipedia.org/wiki/Unix_time">https://en.wikipedia.org/wiki/Unix_time</a><br>
     [2]<a href="https://baike.baidu.com/item/%E4%B8%96%E7%95%8C%E6%97%B6/692237">https://baike.baidu.com/item/世界时/692237</a><br>
     [3]<a href="https://www.timeanddate.com/time/zones/">https://www.timeanddate.com/time/zones/</a><br>
     [4]<a href="https://www.utctime.net/">https://www.utctime.net/</a><br>
     [5]<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E9%92%9F/765460">https://baike.baidu.com/item/原子钟/765460</a><br>
     [6]<a href="https://baike.baidu.com/item/%E9%97%B0%E7%A7%92">https://baike.baidu.com/item/闰秒</a><br>
     [7]<a href="https://www.joda.org/joda-time/">https://www.joda.org/joda-time/</a><br>
     [8]<a href="https://jcp.org/en/jsr/detail">https://jcp.org/en/jsr/detail</a><br>
     [9]<a href="https://baike.baidu.com/item/%E5%A4%8F%E4%BB%A4%E6%97%B6/1809579">https://baike.baidu.com/item/夏令时/1809579</a><br>
     [10]<a href="https://baike.baidu.com/item/%E9%97%B0%E7%A7%92/696742">https://baike.baidu.com/item/闰秒/696742</a><br>
     [11]<a href="https://zh.wikipedia.org/wiki/%E4%B8%96%E7%95%8C%E6%97%B6">https://zh.wikipedia.org/wiki/世界时</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>架构师之路</title>
    <url>/2025/01/05/%E6%9E%84%E5%B8%88%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-前言"><strong>1、前言</strong></h4>
<p>     沈剑老师09年入职百度做即时通讯，13年开始才有意识的转型架构师，从即时通讯转到支付系统，克服了种种困难，完成了58同城即时通讯平台，支付系统重构等相关工作，之后不断地学习和进步，最终成为一名优秀的架构师。沈剑老师“身经百战”，很多业务系统设计工作都做过，在这条路上有着自己独特的体会和丰富的经验。下图展示了沈剑老师的任职与所负责的业务经历。</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B9%8B%E8%B7%AF/%E6%B2%88%E5%89%91%E8%80%81%E5%B8%88%E7%9A%84%E6%9E%B6%E6%9E%84%E5%B8%88%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF.png" alt="沈剑老师的架构师成长之路"></p>
<p>     根据自己十多年的架构师经历，沈剑老师把自己的架构师之路抽象为三个阶段：</p>
<p>     <strong>打基础</strong></p>
<p>     <strong>寻突破</strong></p>
<p>     <strong>建体系</strong></p>
<p>     以下是沈剑老师对这三个阶段所面临的问题与需要注意的重点地方的一些分享。</p>
<h4 id="2-阶段一：打基础"><strong>2、阶段一：打基础</strong></h4>
<p>     一般为从业的前3、4年，很难直接成为架构师，毕竟见识与经验尚浅，在语言层面、设计模式层面、业务逻辑层面等等，需要学习的东西还很多。这段阶段以学习技术、积累经验、增加自己的核心竞争力为第一要点，主要是了解工具、了解模式、了解各种玩法。沈剑老师认为语言对做架构设计的影响没有那么大，技术架构的路是相通的。在这个阶段，如果要找一个好的公司，沈剑老师认为需要考虑三个要点：</p>
<p>     是否重视产研：如果公司对于产品技术不重视，不利于这个打基础的阶段。比如百度就是非常重视技术，公司内部有各方面的专家，是非常适合应届生起步的一个公司。</p>
<p>     什么技术体系：公司是否有相对领先的技术栈或者技术理念也需要考虑，有一些公司会固守老旧的技术栈或技术体系，害怕技术革新，这对新人打基础是非常不利的。</p>
<p>     团队成熟度：团队成熟度也非常重要，太年轻的技术栈团队对于职业生涯前两年是不利的。</p>
<h4 id="3-阶段二：寻突破"><strong>3、阶段二：寻突破</strong></h4>
<p>     第二个阶段是寻突破的阶段。打了三四年的基础之后，在某个方向上可能是半个专家了，这个时候要考虑以后的方向了，是向业务方向发展，还是向管理方向发展，又或者向架构师方向发展。沈剑老师认为不管往哪个方向走，都没有错，但是不能放弃技术，要时刻关注技术，因为无论哪个公司，综合型的人才都是最稀缺的。如果在这个阶段，要考虑换公司，沈剑老师认为需要考虑以下三点：</p>
<p>     快速发展，比成熟稳定好：这个阶段，快速发展的公司一般要比成熟稳定的公司更好，这时候机会更多，成长会更快。</p>
<p>     业务与技术的匹配度：如果想成为技术专家，比如往高并发、大数据方向走，公司的业务与技术的匹配度就非常重要，因为只有在实践中才可以获得最快地成长，有平台才能施展自己的抱负。</p>
<p>     深度or广度：如果要往业务的方向走，需要多关注业务的扩展度。如果要往综合管理的方向走，需要考虑在公司是否有机会带小组，是否能学到业务以外的东西。深度和广度没有绝对的正确，一般来说我们要成为“π”型人才。“π”的两条腿一条腿是技术支撑，一定要在某一方面有深度，成为某一方面的专家；另一条腿是沟通和交流的能力，要有能力去带团队。这个阶段，自己去主导一些项目，做出一些成果，突破自己，证明自己是首先应该考虑的。</p>
<h4 id="3-阶段三：建体系"><strong>3、阶段三：建体系</strong></h4>
<p>     工作了8-10以后，不管是往哪个方向走，都要开始建立自己的体系了。在这个阶段，更多地要考虑就不仅仅是工作了，更多的是考虑自己的事业。这个时候注重以下三点：</p>
<p>     <strong>平台很重要；</strong></p>
<p>     <strong>空间很重要；</strong></p>
<p>     <strong>系统性思考，战略性思维。</strong></p>
<p>     作为事业，平台能不能让你自己施展抱负，完成自己的事业、空间够不够大就很重要。这时候要系统性思考，要有战略性思维，要考虑自己未来的路，如何去完成自己的事业。</p>
<p>     总结来说，沈剑老师用一个“干”字总结自己的过去十几年。展开来说，首先就是需要持续学习，不断地去做新的业务，多去交流，多向其他人学习，打好基础，积累自己的核心竞争力。这个过程可能会压力很大，但是收获也会很丰富。其次，做各种业务系统，重要的是要积极主动的去承担工作，不要太在意工资，只要有相对公平的环境就可以，这时候要拼命地干，尽力而为是不够的，要全力而为。</p>
]]></content>
      <tags>
        <tag>成长</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>一帮弱智，促成了互联网上最不可名状的低级狂欢</title>
    <url>/2025/01/03/%E4%B8%80%E5%B8%AE%E5%BC%B1%E6%99%BA%EF%BC%8C%E4%BF%83%E6%88%90%E4%BA%86%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8A%E6%9C%80%E4%B8%8D%E5%8F%AF%E5%90%8D%E7%8A%B6%E7%9A%84%E4%BD%8E%E7%BA%A7%E7%8B%82%E6%AC%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     在互联网时代，尤其是进入移动互联网以来的短视频时代，知识通过互联网走向“市场”，人们不再创造知识，而在“贩卖”知识；互联网也促使各种有害的知识或“伪知识”登上“舞台”甚至进入主流，因为人们衡量知识价值的标准成了金钱和流量。这最大后果是让一群低学历、低素质、无底线的人成为舆论的主流，让谣言、仇恨、戾气替代真相、正义、文明。</p>
<p><img src="/pic/%E5%85%B6%E4%BB%96/%E4%B8%80%E5%B8%AE%E5%BC%B1%E6%99%BA%EF%BC%8C%E4%BF%83%E6%88%90%E4%BA%86%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8A%E6%9C%80%E4%B8%8D%E5%8F%AF%E5%90%8D%E7%8A%B6%E7%9A%84%E4%BD%8E%E7%BA%A7%E7%8B%82%E6%AC%A2/%E4%B8%80%E5%B8%AE%E5%BC%B1%E6%99%BA%EF%BC%8C%E4%BF%83%E6%88%90%E4%BA%86%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8A%E6%9C%80%E4%B8%8D%E5%8F%AF%E5%90%8D%E7%8A%B6%E7%9A%84%E4%BD%8E%E7%BA%A7%E7%8B%82%E6%AC%A2.webp" alt="一帮弱智，促成了互联网上最不可名状的低级狂欢"></p>
]]></content>
      <tags>
        <tag>成长</tag>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式核心架构设计</title>
    <url>/2025/01/03/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A0%B8%E5%BF%83%E7%9A%84%E5%8D%95%E5%85%83%E5%8C%96%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A0%B8%E5%BF%83%E7%9A%84%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/%E7%89%A9%E7%90%86%E7%BD%91%E7%BB%9C.png" alt="物理网络"></p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A0%B8%E5%BF%83%E7%9A%84%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A0%B8%E5%BF%83%E7%9A%84%E5%8D%95%E5%85%83%E5%8C%96%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84.jpg" alt="技术架构与应用架构"></p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E5%88%86%E5%B8%83%E5%BC%8F%E6%A0%B8%E5%BF%83%E7%9A%84%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%8D%95%E5%85%83%E5%8C%96%E8%AE%BE%E8%AE%A1.png" alt="数据库的单元化设计"></p>
]]></content>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>不是读书无用，而是你无用</title>
    <url>/2025/01/03/%E4%B8%8D%E6%98%AF%E8%AF%BB%E4%B9%A6%E6%97%A0%E7%94%A8%EF%BC%8C%E8%80%8C%E6%98%AF%E4%BD%A0%E6%97%A0%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     每隔一段时间，“读书无用”的论调就会出现在人们的生活中。鼓吹者们言之凿凿地举出不少例子：隔壁村的张二，小学都没毕业，生意做得有模有样；刻苦用功十八年的老同学，还是个拿死工资、从牙缝里还房贷的小职员。底气之足，让我瞠目结舌。</p>
<p>     在众声喧哗的读书无用论中，我比较注意三种声音。</p>
<p>     一种读书无用论的鼓吹者，自己真没读过几天书，但或是其他能力突出，或是运气较好，也取得了不错的成就。你的旧友聚会，或许也有这样一种悲凉的酸楚：极没文化的发小，居然成了大款。我们这些读了十七八年书的，除了学位啥也没有。他们给你倒上茅台酒、递来中华烟，再送你一句加了冰块的风凉话：文化能当饭吃啊？不错，沟通能力、交际能力、执行能力，确实很重要，“成功者”不一定都是读书人，但读不读书，在很大程度上决定了一一个人究竟能够走多远。</p>
<p>     另一种读书无用论者，确实读过几年书，甚至还有相当漂亮、镶着金边儿的学历背景。你跟他聊哲学，他能把纯粹理性批判给你讲得头头是道；你跟他谈美学，他能把斯宾诺莎、海德格尔诸人的美学观梳理得脉络清晰。回翻他的在校表现，还真是可圈可点。但眼下，知识和财富之间的转化很不尽如人意，甚至在清贫愤懑、怀才不遇中挣扎。在功利意图的驱使下，读书不是为性情的雕琢、底蕴的贮藏、襟怀的开阔，完全是为换得利益，一旦变现受阻，就觉读书无用。</p>
<p>     这些人怯于面对的事实是： <strong>不是读书无用，而是你自己无用。</strong> 你确实是不错的考试选手，确实从字里行间咂摸出了些墨水味，但失去了书本的荫蔽，你再没有半分优势。你的视角局限在那几本偏狭的书本里，却不知大千世界的无限可能。你只能在故纸堆里与前人对话，却不具备在现实世界里周旋的本事。种种无用中，最无用的是将自己的一事无成归结为读书所致——我失败不赖我，赖读书没用，要不是当初浪费那么多时间去读书，也许就有用了。读书无用论，给他们提供了那么舒适、有面子、有理由的庇护所，那么理直气壮地回避了自己的无能。</p>
<p>     种种读书无用的论调中，最可恶的一种是别有用心者。明知开卷有益，却巴不得周围所有人都沉浸在玩乐中虚掷青春。每个人的学生时代，都会有这么几个同学：熬夜的黑眼圈挂在脸上，偏偏大言不惭地告诉别人自己从来不学习。明知课堂所学东西的价值，非要激进地说这种填鸭式的教学毫无意义。他们几乎是人格分裂的——一边拼命地读书，一边一脸厌弃地说读书无用。</p>
<p>     在他们看来，如果读书无用论能大肆风行，那么每多一个信奉者，自己就少一个对手。如果班上的同学都不读书，那么寥寥几个的保研名额非他莫属。如果同年进单位的新人都不读书，那么获提拔擢升机会的更有可能是自己。目光灼灼盯着一己之位，置社会风气于不顾，是为自私。比自私更浓烈的，是自卑的心理底色。这种人看似很有“谋略”，其实最没用，他不敢光明正大地迎接任何一种透明公开的挑战与竞争，只能动用这样卑劣的手腕，遮掩迫切求胜的病态竞争心理。</p>
<p>     在这个涌动着反智情绪的社会中，读书无用论总轻易地受到众多赞扬、读书人的悲凉处境总是被带着嘲讽的态度围观，读书人的负面信息总是被满含鄙夷地放大。说实话，我也被无数次问过，你读北大出来能干什么？不还得跟我一样工作挣钱吗？读那么多书不还得嫁为人妇吗，有什么用？对此，我想说的是：哪怕我们做着同一份工作，我不会同你一样目光灼灼地盯着眼前得失；哪怕我们都将在家庭的琐碎中度过，我知道琐碎之中也有诗意与温情；哪怕我们都将面对生活的苟且，我会为我的子女在嘈杂中开辟一道安静的缝隙。</p>
<p>     而如果我一无所成，我绝不拿读书无用来遮掩我的无用。因为我读过书，油墨已融入骨肉里，而你没有。</p>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>底层巨婴父母，一辈子无药可救</title>
    <url>/2024/12/23/%E5%BA%95%E5%B1%82%E5%B7%A8%E5%A9%B4%E7%88%B6%E6%AF%8D%EF%BC%8C%E4%B8%80%E8%BE%88%E5%AD%90%E6%97%A0%E8%8D%AF%E5%8F%AF%E6%95%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     现在很多50，60多岁的父母，其实本质上是个巨婴，他们并不比孩子成熟到哪里去。</p>
<p>     《情深深雨濛濛》里，黑豹子陆振华就是典型的巨婴父亲，依萍因为家里揭不开锅跑去要生活费，因为几句话，结果换来了一顿毒打，最后依萍走投无路，去了歌舞厅上班。</p>
<p>     所谓的巨婴父母，他们只允许别人顺着他们，只喜欢听好话，否则就会脾气暴躁。巨婴父母没有处理冲突的能力，要么语言攻击，要么使用暴力，所以孩子在他们的教育下也很容易走极端，一根筋（庆幸自己没有成为这样的人，反思自己的整个过程，我认为读书和思考很重要，读书和思考几乎是普通人逆天改命唯一的途径了吧）。</p>
<p>     巨婴父母有三种典型特征，如果你不想自己成为巨婴父母，就一定要在生活中注意克制。</p>
<h4 id="1-同理心很弱-觉得自己总是对的"><strong>1、同理心很弱，觉得自己总是对的</strong></h4>
<p>     一般来说，读书太少的人，没有反思习惯的人，同理心都非常弱。上一代50后，60后因为所处时代问题，受教育程度很低，加上是在农村，社会分工不足，普遍同理心比较弱。</p>
<p>     同理心弱的表现是：他们无法理解别人，也无法真正认识自己。比如别人好心指出他的错误，他不会思考对方是不是对的，而是会开始恼羞成怒，甚至是开始破口大骂。</p>
<p>     古代有句话很经典：”唯女子和小人难养也。”因为在古代，女性基本不怎么读书，加上女性比较感性，所以跟他么讲道理基本等于对牛弹琴。而进入21世纪，读书普及后，这个现象好了很多。</p>
<p>     同理心弱的人，一般社会地位都比较低，因为他们不会处理人际关系。而那些敢于认错，敢于自嘲的，往往很受欢迎，所以最后他们混的都普遍不错。</p>
<h4 id="2-对任何人都不尊重-包括孩子"><strong>2、对任何人都不尊重，包括孩子</strong></h4>
<p>     巨婴父母一般不会尊重任何人，但是他们很懂得欺软怕硬。</p>
<p>     在孩子很小的时候，巨婴父母经常口头谩骂，甚至暴揍孩子。他们是“棍棒底下出孝子”的忠实信徒，本质上他们根本不懂如何教育孩子，而使用暴力来欺负弱小的孩子，倒是从小耳濡目染。</p>
<p>     其实巨婴父母也挺可怜，他们的父母也是巨婴。所以巨婴父母培育巨婴父母，但是他们绝对不会认为自己是巨婴，而是认为自己是一个合格的普通父母。</p>
<p>     所以开头说，陆振华是巨婴父母，就是这个道理，他们本质上除了自己，谁也不放眼里。他们骨子里缺乏对生命的尊重，对孩子的尊重。他们很多人都把孩子当做是私有财产，想怎么处置怎么来。</p>
<p>     所以在这种高压环境下，巨婴父母的孩子长大后一般很缺爱，对人又比较冷漠，和那些正常有爱家庭的孩子，一眼就可以区别开来。</p>
<h4 id="3-自卑懦弱-敏感而情绪化-缺乏自我控制力"><strong>3、自卑懦弱，敏感而情绪化，缺乏自我控制力</strong></h4>
<p>     一般来讲，6岁以下的小孩缺乏情绪控制能力，但是如果父母会正面教育他们，给他们提供一个好的榜样，孩子也会慢慢成熟。12岁左右的小孩，情绪管理能力其实和成年人不会差距太大。</p>
<p>     而在巨婴父母的教育下，因为父母缺乏情绪管理能力，经常把负面情绪带给孩子，所以孩子的情绪也会经常波动。</p>
<p>     很多巨婴父母自卑懦弱又敏感，一旦被家人指责，就容易发脾气。然后他们还会把自己的情绪差怪罪给家人，其实家里所有人都是巨婴父母的受害者。</p>
<p>     很多人说娶老婆一定要娶一个原生家庭幸福的，情绪稳定的，因为娶一个情绪稳定的，这个家庭里的三代人也许不会大富大贵，但是起码拥有岁月静好。</p>
<p>     如果娶一个原生家庭父母天天吵架的，那么她的脾气大概率好不到哪里去。然后呢？你这个家庭里的三代人都会被她搞得鸡犬不灵。</p>
<h4 id="4-最后的话"><strong>4、最后的话</strong></h4>
<p>     这个世界最大的漏洞在于，生养孩子不需要任何资格和学习，所以才有那么多巨婴父母的产生。</p>
<p>     如果你的父母是巨婴，那么很遗憾，你这辈子想要改变命运，一定要远离巨婴父母，一定要多读书，多和成熟稳重的人来往，否则大概率是重复你的父母之路。</p>
<p>     如果父母是巨婴，那么尽量不要太早结婚，否则最惨的是无辜的孩子。</p>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>对于新岗位的苦恼</title>
    <url>/2024/12/20/%E5%AF%B9%E4%BA%8E%E6%96%B0%E5%B2%97%E4%BD%8D%E7%9A%84%E8%8B%A6%E6%81%BC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>       最近岗位上发生了调整。原平台开发的主职不变，在项目上的兼职从手机银行调整为小程序平台的技术经理，主要任务是基于开发平台对小程序做技术架构改造。但是一周了解下来，外包公司开发人员的专业素质和职业素养令我感到担忧，我没有把握在这些人的配合下，能将这件事情做好。举例如下：</p>
<ul>
<li>网关作为一个全局性的流量收口，主要承担协议转换、限流熔断等服务治理、鉴权等功能。但是网关服务中，被堆积了大量的业务逻辑：</li>
</ul>
<p><img src="/pic/%E5%B7%A5%E4%BD%9C/%E5%AF%B9%E4%BA%8E%E6%96%B0%E5%B2%97%E4%BD%8D%E7%9A%84%E8%8B%A6%E6%81%BC/%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81.jpg" alt="网管服务中的大量业务代码"></p>
<ul>
<li>缺少准入校验导致的大量的数据权限越权访问：</li>
</ul>
<p><img src="/pic/%E5%B7%A5%E4%BD%9C/%E5%AF%B9%E4%BA%8E%E6%96%B0%E5%B2%97%E4%BD%8D%E7%9A%84%E8%8B%A6%E6%81%BC/%E5%87%86%E5%85%A5%E6%A0%A1%E9%AA%8C.jpg" alt="准入校验"></p>
<ul>
<li>编码风格惨不忍睹：</li>
</ul>
<p><img src="/pic/%E5%B7%A5%E4%BD%9C/%E5%AF%B9%E4%BA%8E%E6%96%B0%E5%B2%97%E4%BD%8D%E7%9A%84%E8%8B%A6%E6%81%BC/%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC.jpg" alt="编码风格"></p>
<ul>
<li>逻辑不清：</li>
</ul>
<p><img src="/pic/%E5%B7%A5%E4%BD%9C/%E5%AF%B9%E4%BA%8E%E6%96%B0%E5%B2%97%E4%BD%8D%E7%9A%84%E8%8B%A6%E6%81%BC/%E9%80%BB%E8%BE%91%E4%B8%8D%E6%B8%85.jpg" alt="逻辑不清"></p>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>一个非常好用的settings文件</title>
    <url>/2024/12/17/%E4%B8%80%E4%B8%AA%E9%9D%9E%E5%B8%B8%E5%A5%BD%E7%94%A8%E7%9A%84settings%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>pentaho<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">file.encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>pentaho-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pentaho Public<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.orl.eng.hitachivantara.com/artifactory/pnt-mvn/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>pentaho-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Pentaho Public<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.orl.eng.hitachivantara.com/artifactory/pnt-mvn/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">file.encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>activiti-repos2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">file.encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>activiti-repos2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Activiti Repository 2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://app.camunda.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>mvnrepository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">file.encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>mvnrepository<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mvnrepository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.mvnrepository.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Snapshot Profile --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshot<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">file.encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshot<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-snapshot<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.pentaho.maven.plugins<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>com.pentaho.maven.plugins<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>com.github.spotbugs<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>pentaho<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>activiti-repos2<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>mvnrepository<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>spring-snapshot<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>星际穿越混剪</title>
    <url>/2024/12/16/%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer21" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer21"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/电影混剪/星际穿越.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>设计并实现了一个单元测试框架</title>
    <url>/2024/11/22/%E8%AE%BE%E8%AE%A1%E5%B9%B6%E5%AE%9E%E7%8E%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     我在平台层设计的单元测试框架，为基于开发平台落地的应用，提供了容器隔离、环境准备、共享空间等特性。</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95Maven%E4%B8%8EJunit%E5%8E%9F%E7%90%86.drawio.png" alt="单元测试"></p>
<p>     以下是源码实现：97ab0769-eab2-4e8d-a676-293c991b3a34</p>
<p>     <a href="/files/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.zip">源码</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title>新装Ubuntu之后设置SSH的root登录</title>
    <url>/2024/11/19/%E6%96%B0%E8%A3%85Ubuntu%E4%B9%8B%E5%90%8E%E8%AE%BE%E7%BD%AESSH%E7%9A%84root%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-确定一下我们的root用户存在"><strong>1、确定一下我们的root用户存在</strong></h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入命令后会提示你输入密码，不用管密码对不对，随便输入，如果没有此root用户他会提示你</span></span><br><span class="line">su root</span><br></pre></td></tr></table></figure>
<h4 id="2-修改root密码"><strong>2、修改root密码</strong></h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">他会让你输入新密码，然后就是让你再次输入新密码</span></span><br><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>
<h4 id="3-安装ssh"><strong>3、安装SSH</strong></h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server openssh-client；</span><br></pre></td></tr></table></figure>
<h4 id="4-允许root用户通过ssh连接"><strong>4、允许root用户通过SSH连接</strong></h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑配置文件</span></span><br><span class="line">sudo vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>     作出如下修改：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#PermitRootLogin prohibit-password</span><br><span class="line"># 下面这是我们新添加的一行</span><br><span class="line">PermitRootLogin yes </span><br></pre></td></tr></table></figure>
<h4 id="5-重启ssh服务"><strong>5、重启SSH服务</strong></h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>操作系统</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>一些JVM平台上的并发知识</title>
    <url>/2024/10/29/%E4%B8%80%E4%BA%9BJVM%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-处理器缓存设计"><strong>1、处理器缓存设计</strong></h4>
<p>       处理器缓存通过减少写入延迟、批量刷新数据、限定缓存的局部可见性，并合理安排内存操作顺序，有效提升了处理器的运行效率和内存总线的利用率。</p>
<p><img src="/pic/%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9BJVM%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/1.png" alt="处理器缓存设计"></p>
<h4 id="2-重排序"><strong>2、重排序</strong></h4>
<p>       源代码从编译器到最终执行的指令序列的优化过程，通过编译器重排、指令级并行重排以及内存系统重排，逐步优化指令执行顺序，以提升处理器的执行效率。</p>
<p><img src="/pic/%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9BJVM%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/2.png" alt="重排序"></p>
<h4 id="3-happens-before"><strong>3、happens-before</strong></h4>
<p>       “happens-before” 确保操作结果的可见性而不一定要求实际执行顺序。主要规则包括：程序顺序规则、监视器锁规则、volatile 变量规则和传递性规则，用于保证多线程环境下操作的有序性和一致性。</p>
<p><img src="/pic/%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9BJVM%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/3.png" alt="happens-before"></p>
<h4 id="4-数据依赖性"><strong>4、数据依赖性</strong></h4>
<p>       数据依赖性在单个处理器和单线程操作中的重要性，强调了写后读、写后写和读后写等依赖类型。如果这些操作顺序被交换，执行结果会发生变化。然而，不同处理器或线程之间的依赖性不在编译器和处理器的考虑范围内。</p>
<p><img src="/pic/%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9BJVM%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/4.png" alt="数据依赖性"></p>
<h4 id="5-as-if-serial"><strong>5、as-if-serial</strong></h4>
<p>       “as-if-serial” 语义，保证在单线程环境下操作的执行结果不受重排序的影响，无需担心内存可见性。代码执行顺序可以在不改变最终结果的前提下进行优化，例如图中 A、B、C 操作的顺序在编译器和处理器的重排序下仍保持一致的执行结果。</p>
<p><img src="/pic/%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9BJVM%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/5.png" alt="as-if-serial"></p>
<h4 id="6-程序顺序规则"><strong>6、程序顺序规则</strong></h4>
<p>       程序顺序规则中的传递性和可见性要求：如果操作 A happens-before B，且 B happens-before C，则 A happens-before C，但这并不强制要求执行顺序。只要B能够看到 A 的结果，即使 B 先于 A 执行也是合法的，JVM 允许这种非严格顺序的优化。</p>
<p><img src="/pic/%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9BJVM%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/6.png" alt="程序顺序规则"></p>
<h4 id="7-内存屏障"><strong>7、内存屏障</strong></h4>
<p>       下图介绍了内存屏障的不同类型及其作用，包括 LoadLoad、StoreStore、LoadStore 和 StoreLoad 屏障。每种屏障用于确保不同类型的内存操作顺序，从而在多处理器环境下保持数据一致性。其中，StoreLoad 屏障最强大且开销最高，用于在执行后续指令前确保当前处理器的所有写操作已刷新到内存。</p>
<p><img src="/pic/%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9BJVM%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/7.png" alt="内存屏障"></p>
<h4 id="8-重排序导致的问题"><strong>8、重排序导致的问题</strong></h4>
<p>       在多线程环境下，线程 A 的写操作 a=1 和 flag=true 可能被重排序，线程 B 在读取 flag 后立即使用变量 a，但此时 a 可能尚未更新，导致不正确的结果。这种重排序问题会破坏程序的预期执行顺序，可能引发逻辑错误。</p>
<p><img src="/pic/%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9BJVM%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/8.png" alt="重排序导致的问题"></p>
<h4 id="9-数据竞争问题"><strong>9、数据竞争问题</strong></h4>
<p>       在多线程环境中，通过同步机制（如synchronized、volatile等）可以确保数据一致性和操作的原子性，避免数据竞争问题，但Java内存模型（JMM）不能对顺序一致性和原子性同时提供保证。</p>
<p><img src="/pic/%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%BA%9BJVM%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/9.png" alt="数据竞争问题"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>关于调优</title>
    <url>/2024/10/17/%E5%85%B3%E4%BA%8E%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     任何的调优手段，都是补救措施。调优再厉害，都只是补救。</p>
<p>     写出正规的代码，规范的研发流程，及时有效的运维与预警机制，胜过一切调优。</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E5%85%B3%E4%BA%8E%E8%B0%83%E4%BC%98/1.jpg" alt="呃，多谢 ChatGPT 认可"></p>
]]></content>
      <tags>
        <tag>架构</tag>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title>用于实验的千万级数据库记录的创建脚本</title>
    <url>/2024/10/10/%E5%88%9B%E5%BB%BA%E5%8D%83%E4%B8%87%E7%BA%A7%E5%88%AB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%B0%E5%BD%95%E7%9A%84%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `order_center` <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line">USE order_center;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 users 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users</span><br><span class="line">(</span><br><span class="line">    id         <span class="type">BIGINT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    name       <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    email      <span class="type">VARCHAR</span>(<span class="number">150</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    created_at DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    INDEX idx_name_email (name, email), <span class="comment">-- 索引覆盖场景</span></span><br><span class="line">    INDEX idx_created_at (created_at)   <span class="comment">-- 针对时间的查询</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 orders 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders</span><br><span class="line">(</span><br><span class="line">    id         <span class="type">BIGINT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    user_id    <span class="type">BIGINT</span>         <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    order_date DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    status     <span class="type">VARCHAR</span>(<span class="number">50</span>)    <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    total_amount <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    INDEX idx_user_id (user_id),                     <span class="comment">-- 最左前缀法则示范</span></span><br><span class="line">    INDEX idx_order_date_status (order_date, status) <span class="comment">-- 查询组合索引</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 order_items 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> order_items</span><br><span class="line">(</span><br><span class="line">    id         <span class="type">BIGINT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    order_id   <span class="type">BIGINT</span>         <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    product_id <span class="type">BIGINT</span>         <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    quantity   <span class="type">INT</span>            <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    price      <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    INDEX idx_order_product (order_id, product_id), <span class="comment">-- 联表查询时提升性能</span></span><br><span class="line">    INDEX idx_price_quantity (price, quantity)      <span class="comment">-- 数量和价格查询优化</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> GenerateData()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> user_id <span class="type">INT</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> order_id <span class="type">INT</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> num_orders <span class="type">INT</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> j <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line">    WHILE i <span class="operator">&lt;</span> <span class="number">10000000</span> DO</span><br><span class="line">        <span class="comment">-- 插入 user 数据</span></span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (name, email)</span><br><span class="line">        <span class="keyword">VALUES</span> (CONCAT(<span class="string">&#x27;user&#x27;</span>, <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">1000000</span>)), CONCAT(<span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">1000000</span>), <span class="string">&#x27;@example.com&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">SET</span> user_id <span class="operator">=</span> LAST_INSERT_ID();</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- 随机生成1到5个订单</span></span><br><span class="line">        <span class="keyword">SET</span> num_orders <span class="operator">=</span> <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">5</span>) <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">SET</span> j <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        WHILE j <span class="operator">&lt;</span> num_orders DO</span><br><span class="line">            <span class="comment">-- 插入 order 数据</span></span><br><span class="line">            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (user_id, status, total_amount)</span><br><span class="line">            <span class="keyword">VALUES</span> (user_id, <span class="string">&#x27;completed&#x27;</span>, RAND() <span class="operator">*</span> <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">SET</span> order_id <span class="operator">=</span> LAST_INSERT_ID();</span><br><span class="line"></span><br><span class="line">            <span class="comment">-- 插入 order_items 数据</span></span><br><span class="line">            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_items (order_id, product_id, quantity, price)</span><br><span class="line">            <span class="keyword">VALUES</span> (order_id,</span><br><span class="line">                    <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">10000</span>), <span class="comment">-- 随机生成 product_id</span></span><br><span class="line">                    <span class="built_in">FLOOR</span>(RAND() <span class="operator">*</span> <span class="number">100</span>),   <span class="comment">-- 随机生成数量</span></span><br><span class="line">                    RAND() <span class="operator">*</span> <span class="number">100</span>);         <span class="comment">-- 随机生成价格</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">SET</span> j <span class="operator">=</span> j <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">END</span> WHILE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程以生成数据</span></span><br><span class="line"><span class="keyword">CALL</span> GenerateData();</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>设计一个监控模块</title>
    <url>/2024/09/23/%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-监控模块设计"><strong>1、监控模块设计</strong></h4>
<p>       要在开发平台层设计一个监控模块，提供平台级监控能力。几乎所有的监控系统都基于 CS 模式设计，监控模块也基于 CS 模式。但是开发平台层不需要自己完全实现完整的 Server 端和 Client 端。就这样设计了第一版监控模块。</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%9D%97/%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%9D%97.drawio.png" alt="第一版监控模块"></p>
<ul>
<li>
<p>server 端几乎无需自己实现，Client 只需要能以主动推送或者暴露接口的形式将监控数据提交至 server 端并展示即可。</p>
</li>
<li>
<p>client 端在逻辑上划分三层：数据源、采集层、接口层；</p>
</li>
<li>
<p>数据层是指被采集对象的整体，监控数据源自于这里。监控数据可以是业务数据，可以是开发平台层数据，例如 rpc 调用信息，还可以直接是应用环境三方的，任何可以被应用程序获取的信息，例如：Spring Boot Actuator。</p>
</li>
<li>
<p>采集层是真正需要开发平台层实现的逻辑，需要采集的各项指标待定.</p>
</li>
<li>
<p>接口层负责将数据交付给展示层。</p>
</li>
</ul>
<p>       UML 设计如下：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%9D%97/DefaultMetricsClient.png" alt="UML"></p>
<h4 id="2-为何-server-端不采用-spring-boot-admin"><strong>2、为何 Server 端不采用 Spring Boot Admin</strong></h4>
<p>       Spring Boot Actuator + Spring Boot Admin 是 Spring 官方标配。但是 Spring Boot Admin 生产部署作为监控平台的很少见，并且 Spring Boot Admin 由于在数据交互上没有统一的数据规范，展示层必须针对特定数据进行前端开发（重新开发spring-boot-admin-server-ui ）。目前 Spring Boot Admin 能展示的数据主要是 JVM 的进程信息以及依赖于 Spring 环境的相关信息（环境配置、beans、web）。</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%9D%97/sba.png" alt="Spring Boot Admin"></p>
<h4 id="3-各层的理想组合"><strong>3、各层的理想组合</strong></h4>
<p>       micrometer 的数据结构与普罗米修斯数据结构设计上一致，生产环境的监控平台 prometheus + grafana 几乎是最常见的，Sping Boot Actuator 对 prometheus 已经天然支持（spring-boot-actuator-autoconfigure  @org.springframework.boot.actuate.autoconfigure.metrics.export.prometheus.PrometheusMetricsExportAutoConfiguration）。因此将 Sping Boot Actuator 的 prometheus 端点作为接口层，将 prometheus + grafana 作为 Server 端，micrometer 作为采集层的采集工具，是最理想的组合。可行性验证效果展示：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%9D%97/grafana.png" alt="prometheus + grafana"></p>
<h4 id="4-定制化监控系统的引入"><strong>4、定制化监控系统的引入</strong></h4>
<p>       因为引入了一体化监控平台 XXX，开发平台要考虑将 XXX 作为 Server 端。Xxx 将监控信息抽象为 XxxBean 对象，并通过派生 XxxBean 对象得到三种监控场景。设计方案如图所示：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%9D%97/Xxx1.png" alt="Xxx 设计"></p>
<p>       除了支持上报 XxxBean 监控对象，Xxx 还支持基于日志的交易监控：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%9D%97/Xxx2.png" alt="Xxx 设计"></p>
<p>       其中需要特别说明：1）业务系统接入 Xxx 上报监控的能力，必须在业务逻辑中组装 XxxBean 模型（可用性模型、事件模型、调度模型）；2）基于日志的交易监控，必须调整应用系统的日志输出格式。</p>
<h4 id="5-基于度量指标的通用监控设计思路"><strong>5、基于度量指标的通用监控设计思路</strong></h4>
<p>       Xxx 从使用场景出发设计了监控平台，开发平台需要考虑更加通用开放的监控标准，基于开发的监控标准设计监控能力，再进一步将通用的监控能力运用于具体场景。</p>
<p>       在信息技术中，监控指的是对系统、网络、应用程序、基础设施等的持续观察、测量和分析，以确保其正常运行、性能优化和安全性。让我们回到监控这件事情本身来考虑，能否基于 V1 方案中 prometheus 协议进行设计，形成通用开发的监控能力，以应对类似于一体化监控平台等诸多展示层的接入需求。</p>
<p>       假设系统生成有度量指指标：demo_cpu_usage、demo_mem_usage、demo_transfer_amount。分别记作 a、b、c。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prometheus 协议数据</span></span><br><span class="line">&lt;metric_name&gt;&#123;&lt;label_name&gt;=&lt;label_value&gt;, ...&#125; &lt;value&gt; &lt;timestamp&gt;</span><br><span class="line"></span><br><span class="line">a: </span><br><span class="line">demo_cpu_usage&#123;target=&quot;192.168.1.2&quot;&#125; 81 1694116786000</span><br><span class="line"></span><br><span class="line">b:</span><br><span class="line">demo_mem_uasge&#123;target=&quot;192.168.1.2&quot;&#125; 81 1694116786000</span><br><span class="line"></span><br><span class="line">c:</span><br><span class="line">demo_transfer_amount&#123;vip_user=&quot;000000123&quot;&#125; 20000000 1694116786000</span><br></pre></td></tr></table></figure>
<p>       另外设：</p>
<p>       bool = g(x)：x.value 必须小于 80，否则 g 函数返回 false。</p>
<p>       float = f(x)：当 x.tag.vip_user in vip_user_list，x.value 如果大于一百万，f 则返回 x.value。</p>
<p>       以上 g 函数和 f 函数目的是分别通用的程序监控场景和业务场景，可以根据实际需要定义出更加复杂灵活的函数法则，函数法则施加于若干监控指标，从而得到一个具体的监控场景。以 g 函数和 f 函数为例：</p>
<p>       场景一：当 cpu 或者 mem 内存低于 80 的时候，触发可用性监控，伪代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if g(a) || g(b) </span><br><span class="line"><span class="meta prompt_">   # </span><span class="language-bash">组装可用性 XxxBean 模型</span></span><br><span class="line">endif</span><br></pre></td></tr></table></figure>
<p>       场景二：当 VIP 用户转账金额超过 100 万时，触发事件监控，伪代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if  f(c) &gt; 1000000</span><br><span class="line"><span class="meta prompt_">   # </span><span class="language-bash">组装事件 XxxBean 模型</span></span><br><span class="line">endif</span><br></pre></td></tr></table></figure>
<p>       基于以上具体案例的分析可以看出，监控模型的上报场景，完全是可以从一些自定义的监控指标中得出的，因此基于 prometheus 协议监控度量指标的封装，可以当做一种通用监控能力。基于这种能力，也可以很方便对交易进行监控，不仅是基于 Xxx 模型地监控，还是基于 prometheus 协议的监控，都有能力做到，此不赘述。</p>
<h4 id="6-监控优化方案"><strong>6、监控优化方案</strong></h4>
<p>       对 V1 方案优化如下：</p>
<p>       1）采集层基于 prometheus 协议设计出度量指标公共服务 MetricsService；</p>
<p>       2）在接口层引入度量指标汇聚层，用于汇聚各项指标数据，根据展示层实际的接入方式进行转换。</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%9D%97/%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%9D%97_01.drawio.png" alt="监控优化方案"></p>
<h4 id="7-知识补充一：prometheus"><strong>7、知识补充一：prometheus</strong></h4>
<p>       Prometheus 是一个开源的监控系统，可以看做是一个时序数据库，它使用一种特定的数据格式来收集和存储时间序列数据。数据类型：</p>
<ul>
<li>
<p>Counter（计数器）：一个单调递增的度量值，通常用于记录事件发生的次数。例如，	HTTP 请求的计数。</p>
</li>
<li>
<p>Gauge（量表）：一个可以任意增减的度量值，通常用于记录某一时刻的状态或值。例如，当前的内存使用量、CPU 使用率等。</p>
</li>
<li>
<p>Histogram（直方图）：用于测量样本的分布情况，比如请求延迟。它将数据样本划分到不同的桶（buckets）中，并记录每个桶中的样本数量。</p>
</li>
<li>
<p>Summary（摘要）：类似于直方图，但会额外提供请求的总数和总和，通常用于计算百分位数等聚合度量。</p>
</li>
</ul>
<p>       数据格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;metric_name&gt;&#123;&lt;label_name&gt;=&lt;label_value&gt;, ...&#125; &lt;value&gt; &lt;timestamp&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>metric_name: 度量名称，必须符合正则表达式 [a-zA-Z_:][a-zA-Z0-9_:]*，例如：http_requests_total。</p>
</li>
<li>
<p>{&lt;label_name&gt;=&lt;label_value&gt;, …}: 可选的标签部分，用来区分不同的时间序列，例如：{method=“GET”, endpoint=&quot;/api&quot;}。</p>
</li>
<li>
<p>value: 度量的值，是一个浮点数。</p>
</li>
<li>
<p>timestamp: 可选的 UNIX 时间戳，以毫秒为单位。</p>
</li>
</ul>
<p>       数据样例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HELP http_requests_total Total number of HTTP requests.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TYPE http_requests_total counter</span></span><br><span class="line">http_requests_total&#123;method=&quot;GET&quot;, handler=&quot;/home&quot;&#125; 1027 1694116786000</span><br><span class="line">http_requests_total&#123;method=&quot;POST&quot;, handler=&quot;/api&quot;&#125; 521 1694116786000</span><br></pre></td></tr></table></figure>
<h4 id="8-知识补充二：采集工具比较"><strong>8、知识补充二：采集工具比较</strong></h4>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%9B%91%E6%8E%A7%E6%A8%A1%E5%9D%97/%E9%87%87%E9%9B%86%E5%B7%A5%E5%85%B7%E6%AF%94%E8%BE%83.png" alt="采集工具比较"></p>
]]></content>
      <tags>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之模板方法模式和策略模式</title>
    <url>/2024/09/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     这篇博客的设计模式应用案例来自于这个仓库，完整代码可以参考本仓库：</p>
<p>     <a href="https://github.com/3546514206/WxChatGPT">微信大模型接入</a></p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E4%BB%93%E5%BA%93.png" alt="仓库主页"></p>
<p>     简单介绍一下这个仓库：1）实现了微信接入；2）实现了大模型接入；3）将微信的提问发给大模型，将大模型的回答返回给微信（欢迎给个 star）。</p>
<h4 id="1-背景分析"><strong>1、背景分析</strong></h4>
<p>     1）我们预期接入的大模型肯定不止一种，现在市面上除了最牛的 GhatGPT，国内也陆续退出了豆包、文心一言、星火大模型等。为了获得良好的扩展性，我们可以基于策略模式对模型通讯模块进行封装，将不同的模型定义为一种通讯策略，程序中可以通过参数指定不同的模型工作；</p>
<p>     2）通讯的过程无非就是三个阶段：通信前参数组装、进行通讯、通讯完成处理结果，这里显然是可以通过模板方法进行封装的。结合策略模式，我们可以规定将来接入新模型的时候，有统一的代码组织形式和良好的扩展接口。</p>
<h4 id="2-知识补充"><strong>2、知识补充</strong></h4>
<p>     我们这里不再对设计模式本身进行专门的讲解。</p>
<p>     <a href="https://www.runoob.com/design-pattern/strategy-pattern.html">策略模式</a></p>
<p>     <a href="https://www.runoob.com/design-pattern/template-pattern.html">模板方法模式</a></p>
<h4 id="3-代码分析"><strong>3、代码分析</strong></h4>
<p>     如下图所示，DefaultHandler 是程序写给微信接入模块的一个回调（实现了消息处理接口 IMsgHandlerFace），当微信接入模块接收到微信消息，便会触发此回调，执行用户预定义行为。也就是在这个地方，我们接入了大模型，并将模型的问答结果返回给微信。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E5%9E%8B%E6%8E%A5%E5%85%A5%E7%9A%84%E5%9C%B0%E6%96%B9.png" alt="模型接入的地方"></p>
<p>     一下三行代码的作用分别是：获取聊天模型的策略上下文（请参考上文中菜鸟教程——策略模式），返回的策略上下文会包含具体的执行策略，执行策略的选择是程序参数定义的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 聊天模型策略</span></span><br><span class="line"><span class="type">StrategyContext</span> <span class="variable">context</span> <span class="operator">=</span> getStrategyContext();</span><br><span class="line"><span class="comment">// 构建聊天请求</span></span><br><span class="line"><span class="type">ChatRequest</span> <span class="variable">request</span> <span class="operator">=</span> buildChatRequest(msg);</span><br><span class="line"><span class="comment">// 进行聊天</span></span><br><span class="line"><span class="type">ChatResponse</span> <span class="variable">response</span> <span class="operator">=</span> context.executeStrategy(request);</span><br></pre></td></tr></table></figure>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/%E5%8F%82%E6%95%B0%E6%8C%87%E5%AE%9A%E8%81%8A%E5%A4%A9%E6%A8%A1%E5%9E%8B.png" alt="程序参数指定执行策略"></p>
<h4 id="3-策略模式实现"><strong>3、策略模式实现</strong></h4>
<p>     首先，定义策略接口，策略接口中的 exec 方法是所有具体的策略类都需要实现的。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%8E%A5%E5%8F%A3.png" alt="策略接口"></p>
<p>     定义策略上下文，上下文是统一交给用户侧的一个”句柄”（可以参考上文 DefaultHandler 的代码，用户侧通过获取策略上下文来执行具体的策略实现的），用于持有具体的策略实现。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E4%B8%8A%E4%B8%8B%E6%96%87.png" alt="策略上下文"></p>
<p>     我们这里的策略实现类稍有不同，没有直接实现 exec 方法，也没有直接实现 IStrategy 接口。这涉及到另外一个设计模式——模板方法模式。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E7%B1%BB.png" alt="策略实现类"></p>
<h4 id="4-模板方法模式"><strong>4、</strong> 模板方法模式</h4>
<p>     抽象策略类定义了一个算法模板方法，这个模板方法规定了 exec 方法执行时发生的三个算法步骤：postChatRequest (执行前的参数处理)、doExec (执行通讯请求)、postChatResponse(通讯完成之后的响应报文处理)。但是我并没有对这三个步骤进行实现，他们都是抽象的，延迟到了将来的策略实现类去实现。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E7%AD%96%E7%95%A5%E7%B1%BB.jpg" alt="抽象策略类"></p>
<p>     所有的策略实现类，实现的不是策略接口 IStrategy，而是继承抽象策略类 AbstractStrategy，也不再去实现 exec 方法，而是实现抽象类中算法模板规定的三个算法步骤。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%92%8C%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/%E5%AE%9E%E7%8E%B0%E6%8A%BD%E8%B1%A1%E7%88%B6%E7%B1%BB%E7%9A%84%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95.PNG" alt="实现抽象策略类中规定的三个既定步骤"></p>
<h4 id="5-其他一些想法"><strong>5、</strong> 其他一些想法</h4>
<p>     面向对象语言最重要的三个基本特性：封装、多态、继承，是软件工程七大原则开闭原则，里氏代换原则，依赖倒转原则，接口隔离原则，迪米特原则和合成复用原则的重要支撑点，设计模式是一种如何最大化发挥三个基本特性，从而能够遵循七大原则的一种编码层级上的技术，这也是 Java、C++ 等完美支持 OOP 编程范式语言，在面临庞大复杂工程时，总能将源代码组织得很好的原因之一吧。从这个角度出发，Go 语言在多态、继承的表现力上不足，也许是因为我还比较缺乏 Go 开发的实战经验，所以我不确定在面临复杂的建模场景的时候，Go 语言的编程方式还能不能进行有效表达。</p>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个健康检查模块</title>
    <url>/2024/08/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     参考 SpringBoot 的健康检查设计，在平台层实现一套健康检查机制。挺优雅。</p>
<h4 id="1-健康检查器接口类设计"><strong>1、健康检查器接口类设计</strong></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * IHealthChecker</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IHealthChecker</span> &#123;</span><br><span class="line"></span><br><span class="line">    Health <span class="title function_">doHealth</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-健康检查器抽象实现类"><strong>2、健康检查器抽象实现类</strong></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AbstractHealthChecker</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 有一些公共逻辑需要定义在这一层抽象层，所有的自检实现都必须具备，例如开关、</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractHealthChecker</span> <span class="keyword">implements</span> <span class="title class_">IHealthChecker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板方法确保 Health 初始状态为 up</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Health <span class="title function_">doHealth</span><span class="params">()</span> &#123;</span><br><span class="line">        Health.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> Health.up();</span><br><span class="line">        <span class="keyword">return</span> health(builder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Health <span class="title function_">health</span><span class="params">(Health.Builder builder)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自检开关</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">toggle</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 严格模式，严格模式下的健康检查器状态，将影响最终健康状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">strict</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略了 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-健康状态的枚举"><strong>3、健康状态的枚举</strong></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查状态</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_EMPTY)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Status</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Status</span> <span class="variable">UNKNOWN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Status</span>(<span class="string">&quot;UNKNOWN&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Status</span> <span class="variable">UP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Status</span>(<span class="string">&quot;UP&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Status</span> <span class="variable">DOWN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Status</span>(<span class="string">&quot;DOWN&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Status</span> <span class="variable">OUT_OF_SERVICE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Status</span>(<span class="string">&quot;OUT_OF_SERVICE&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Status</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(code, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Status</span><span class="params">(String code, String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;status&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonInclude(JsonInclude.Include.NON_EMPTY)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Status) &#123;</span><br><span class="line">            <span class="keyword">return</span> ObjectUtils.nullSafeEquals(<span class="built_in">this</span>.code, ((Status) obj).code);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.code.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-健康信息"><strong>4、健康信息</strong></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Health</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_EMPTY)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Health</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Status status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; details;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Health</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = builder.status;</span><br><span class="line">        <span class="built_in">this</span>.details = Collections.unmodifiableMap(builder.details);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonUnwrapped</span></span><br><span class="line">    <span class="keyword">public</span> Status <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getDetails</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.details;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Health) &#123;</span><br><span class="line">            <span class="type">Health</span> <span class="variable">other</span> <span class="operator">=</span> (Health) obj;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.status.equals(other.status) &amp;&amp; <span class="built_in">this</span>.details.equals(other.details);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> <span class="built_in">this</span>.status.hashCode();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">13</span> * hashCode + <span class="built_in">this</span>.details.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getStatus() + <span class="string">&quot; &quot;</span> + getDetails();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title function_">unknown</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status(Status.UNKNOWN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title function_">up</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status(Status.UP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title function_">down</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> down().withException(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title function_">down</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status(Status.DOWN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title function_">outOfService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status(Status.OUT_OF_SERVICE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title function_">status</span><span class="params">(String statusCode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status(<span class="keyword">new</span> <span class="title class_">Status</span>(statusCode));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title function_">status</span><span class="params">(Status status)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Builder</span>(status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Status status;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; details;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.status = Status.UNKNOWN;</span><br><span class="line">            <span class="built_in">this</span>.details = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">(Status status)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.status = status;</span><br><span class="line">            <span class="built_in">this</span>.details = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">(Status status, Map&lt;String, ?&gt; details)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.status = status;</span><br><span class="line">            <span class="built_in">this</span>.details = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(details);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">withException</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> withDetail(<span class="string">&quot;error&quot;</span>, ex.getClass().getName() + <span class="string">&quot;: &quot;</span> + ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">withDetail</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.details.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">withDetails</span><span class="params">(Map&lt;String, ?&gt; details)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.details.putAll(details);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">unknown</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> status(Status.UNKNOWN);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">up</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> status(Status.UP);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">down</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> down().withException(ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">down</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> status(Status.DOWN);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">outOfService</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> status(Status.OUT_OF_SERVICE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">status</span><span class="params">(String statusCode)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> status(<span class="keyword">new</span> <span class="title class_">Status</span>(statusCode));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">status</span><span class="params">(Status status)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.status = status;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Health <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Health</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-健康检查器注册中心"><strong>5、健康检查器注册中心</strong></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HealthCheckerRegistry</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HealthCheckerRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">monitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 健康检查器集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, AbstractHealthChecker&gt; checkers = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCheckers</span><span class="params">(Map&lt;String, AbstractHealthChecker&gt; checkers)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.checkers = checkers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册检查者</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> checker</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String name, AbstractHealthChecker checker)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.monitor) &#123;</span><br><span class="line">            <span class="type">AbstractHealthChecker</span> <span class="variable">existing</span> <span class="operator">=</span> <span class="built_in">this</span>.checkers.putIfAbsent(name, checker);</span><br><span class="line">            <span class="keyword">if</span> (existing != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AresRuntimeException</span>(<span class="string">&quot;健康检查器&#123;&#125;已存在，请排查&quot;</span>, name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 卸载检查器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> AbstractHealthChecker <span class="title function_">unregister</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        Assert.notNull(name, <span class="string">&quot;检查器名称不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.monitor) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.checkers.remove(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有的检查器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, AbstractHealthChecker&gt; <span class="title function_">getAllCheckers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.monitor) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.unmodifiableMap(<span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(<span class="built_in">this</span>.checkers));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6-健康检查服务"><strong>6、健康检查服务</strong></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HealthCheckService 收集并组合所有的健康状态信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HealthCheckService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> HealthCheckerRegistry checkerRegistry;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行健康检查</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Health <span class="title function_">doHealthCheck</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compositeHealth(checkerRegistry.getAllCheckers());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 聚合自检信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> allCheckers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Health <span class="title function_">compositeHealth</span><span class="params">(Map&lt;String, AbstractHealthChecker&gt; allCheckers)</span> &#123;</span><br><span class="line">        Health.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> Health.up();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, AbstractHealthChecker&gt; entry : allCheckers.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">AbstractHealthChecker</span> <span class="variable">checker</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果当前检查器没有打开则跳过</span></span><br><span class="line">            <span class="keyword">if</span> (!checker.isEnable()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行自检逻辑</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Health</span> <span class="variable">health</span> <span class="operator">=</span> checker.doHealth();</span><br><span class="line">                builder.withDetail(name, health);</span><br><span class="line">                <span class="keyword">if</span> (health.getStatus() != Status.UP &amp;&amp; checker.isStrict()) &#123;</span><br><span class="line">                    <span class="comment">// 只要有一个健康检查器检查失败并且当前检查器处于严格模式，就设置为失败</span></span><br><span class="line">                    builder.status(Status.DOWN);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// 如果自检异常，则将该健康自检信息记录下来</span></span><br><span class="line">                builder.withDetail(name, Health.down(e).build());</span><br><span class="line">                <span class="comment">// 如果检查器处于严格模式，DOWN之</span></span><br><span class="line">                <span class="keyword">if</span>(checker.isStrict())&#123;</span><br><span class="line">                    <span class="comment">// 并标记为 DOWN</span></span><br><span class="line">                    builder.status(Status.DOWN);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="7-检查器实现案例"><strong>7、检查器实现案例</strong></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RedisHealthChecker</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 缓存健康检查</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisHealthChecker</span> <span class="keyword">extends</span> <span class="title class_">AbstractHealthChecker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxxx.cache.health.checker.enable:false&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> enable;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;xxxx.cache.health.checker.strict:true&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> strict;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据缓存</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisService cacheService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">PONG</span> <span class="operator">=</span> <span class="string">&quot;PONG&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Health <span class="title function_">health</span><span class="params">(Health.Builder builder)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据缓存就绪性自检</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == cacheService) &#123;</span><br><span class="line">            <span class="keyword">return</span> builder.down().withDetail(<span class="string">&quot;redisHealthChecker&quot;</span>, <span class="string">&quot;cacheService not prepared&quot;</span>).build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; cacheTemplate = cacheService.getRedisTemplate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == cacheTemplate) &#123;</span><br><span class="line">            <span class="keyword">return</span> builder.down().withDetail(<span class="string">&quot;redisHealthChecker&quot;</span>, <span class="string">&quot;cacheTemplate not prepared&quot;</span>).build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">RedisConnectionFactory</span> <span class="variable">cacheConnectionFactory</span> <span class="operator">=</span> cacheTemplate.getConnectionFactory();</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == cacheConnectionFactory || cacheConnectionFactory.getConnection().isClosed()) &#123;</span><br><span class="line">            <span class="keyword">return</span> builder.down().withDetail(<span class="string">&quot;redisHealthChecker&quot;</span>, <span class="string">&quot;cache server is closed&quot;</span>).build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">cachePong</span> <span class="operator">=</span> cacheConnectionFactory.getConnection().ping();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!StringUtil.isEmpty(cachePong) &amp;&amp;</span><br><span class="line">                PONG.equalsIgnoreCase(cachePong)) &#123;</span><br><span class="line">            <span class="keyword">return</span> builder.up().withDetail(<span class="string">&quot;redisHealthChecker&quot;</span>, <span class="string">&quot;session server is ready&quot;</span>).build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 未知状态</span></span><br><span class="line">        <span class="keyword">return</span> builder.up().withDetail(<span class="string">&quot;redisHealthChecker&quot;</span>, <span class="string">&quot;UNKNOWN&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 检查开关</span></span><br><span class="line">        <span class="keyword">if</span> (enable) &#123;</span><br><span class="line">            enable();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            disable();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 严格模式</span></span><br><span class="line">        <span class="keyword">if</span> (strict) &#123;</span><br><span class="line">            enStrict();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            deStrict();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="8-restful-方式接入"><strong>8、Restful 方式接入</strong></h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HealthHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 聚合检查信息详情的服务</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> HealthCheckService healthCheckService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存活性健康检查</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/liveness&quot;&#125;, produces = &#123;&quot;text/plain;charset=UTF-8&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">liveness</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 就绪性健康检查</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/readiness&quot;&#125;, produces = &#123;&quot;text/plain;charset=UTF-8&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readiness</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">Health</span> <span class="variable">health</span> <span class="operator">=</span>  healthCheckService.doHealthCheck();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果就绪检查失败，则修改返回状态码</span></span><br><span class="line">        <span class="keyword">if</span>(health.getStatus() == <span class="literal">null</span> || health.getStatus() != Status.UP)&#123;</span><br><span class="line">            response.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        String jsonStr;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jsonStr = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(health);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AresRuntimeException</span>(<span class="string">&quot;健康检查模块执行失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jsonStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title>机房服务器网口</title>
    <url>/2024/08/13/%E6%9C%BA%E6%88%BF%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BD%91%E5%8F%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     服务器的网络端口分为两种：电口和光口，电口就是双绞线的水晶头接口，光口是光纤接口。光口的速率远远高于电口，因此实际生产机房中，光口一般用于数据通信，电口一般用于管理通信。</p>
<p>     下面视频中，绿色线是光纤线，白色线是双绞线：</p>
<div id="dplayer18" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer18"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/机房服务器网口/机房服务器网口.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>携程集团技术文章汇总</title>
    <url>/2024/08/02/%E6%90%BA%E7%A8%8B%E9%9B%86%E5%9B%A2%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="/pdf/%E6%90%BA%E7%A8%8B%E6%8A%80%E6%9C%AF/%E6%90%BA%E7%A8%8B%E9%9B%86%E5%9B%A22021%E5%B9%B4%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E5%90%88%E8%BE%91.pdf">携程集团2021年技术文章合辑</a></p>
<p><a href="/pdf/%E6%90%BA%E7%A8%8B%E6%8A%80%E6%9C%AF/%E6%90%BA%E7%A8%8B%E9%9B%86%E5%9B%A22022%E5%B9%B4%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E5%90%88%E8%BE%91.pdf">携程集团2022年技术文章合辑</a></p>
<p><a href="/pdf/%E6%90%BA%E7%A8%8B%E6%8A%80%E6%9C%AF/%E6%90%BA%E7%A8%8B%E9%9B%86%E5%9B%A22023%E5%B9%B4%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E5%90%88%E8%BE%91.pdf">携程集团2023年技术文章合辑</a></p>
<p><a href="/pdf/%E6%90%BA%E7%A8%8B%E6%8A%80%E6%9C%AF/%E6%90%BA%E7%A8%8B%E9%9B%86%E5%9B%A22024%E5%B9%B4%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E5%90%88%E8%BE%91.pdf">携程集团2024年技术文章合辑</a></p>
]]></content>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes中原生的Sidecar容器</title>
    <url>/2024/07/18/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-sidecar容器的概念"><strong>1、Sidecar容器的概念</strong></h4>
<p>     sidecar 容器的概念在 Kubernetes 早期就已经存在。多年来，sidecar 模式在应用程序中变得越来越普遍，使用场景也变得更加多样化。其中比较经典的就是 Istio 通过 sidecar 容器实现了服务网格的功能，Envoy 作为 sidecar 容器与应用程序容器一起运行，负责处理所有的网络流量，实现了服务之间的安全通信、流量管理、监控等功能。</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/sidecar.webp" alt="sidecar"></p>
<h4 id="2-当前sidecar容器的问题"><strong>2、当前Sidecar容器的问题</strong></h4>
<p>     当前的 Kubernetes 原语可以很好地处理这种模式，但是对于几个用例来说，它们还存在着不足，并且迫使应用程序采用奇怪的变通方法。</p>
<h4 id="2-1-问题-1：使用-sidecar-容器的-job"><strong>2.1、问题 1：使用 Sidecar 容器的 Job</strong></h4>
<p>     假设你有一个 Job，其中包含两个容器：一个是用于执行作业的主容器，另一个只是完成辅助任务的 sidecar 容器。这个辅助容器可以是用于服务网格、收集指标或者日志的服务等等。当 Job 中的主容器完成任务退出时，由于 sidecar 容器还在运行，最终会导致 Pod 无法正常终止。此外，对于 restartPolicy:Never 的 Job，当 sidecar 容器因为 OOM 被杀死时，它不会被重新启动，如果 sidecar 容器为其他容器提供网络或者安全通信，这可能会导致 Pod 无法使用。</p>
<p>     下面我们可以通过一个简单的例子来演示这个问题。下面是一个 Job 的 YAML 文件，其中包含两个容器：一个是主容器 main-container-1，另一个是 sidecar 容器 sidecar-container-1。main-container-1 容器在完成一些任务后会正常退出，而 sidecar-container-1 容器会则一直运行。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container-1</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">              echo &quot;main container is starting...&quot;</span></span><br><span class="line"><span class="string">              for i in $(seq 1 5); do</span></span><br><span class="line"><span class="string">                echo &quot;main container is doing some task: $i/5&quot;</span></span><br><span class="line"><span class="string">                sleep 3</span></span><br><span class="line"><span class="string">              done</span></span><br><span class="line"><span class="string">              echo &quot;main container completed tasks and exited&quot;</span></span><br><span class="line"><span class="string"></span>        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sidecar-container-1</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">              echo &quot;sidecar container is starting...&quot;</span></span><br><span class="line"><span class="string">              while true; do</span></span><br><span class="line"><span class="string">                echo &quot;sidecar container is collecting logs...&quot;</span></span><br><span class="line"><span class="string">                sleep 1</span></span><br><span class="line"><span class="string">              done</span></span><br><span class="line"><span class="string"></span>      <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br></pre></td></tr></table></figure>
<p>     执行以下命令应用上面的 Job 资源。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -f 1-job-cannot-complete.yaml</span><br></pre></td></tr></table></figure>
<p>     在本文的实验中，我们会在一个 Pod 中同时运行多个容器，为了方便观察日志，我们可以使用 stern 这个开源工具。 stern 允许我们同时查看多个 Pod 中多个容器的日志，并且以不同颜色进行显示，方便我们直观地进行区分。</p>
<p>     执行以下命令查看 myapp Pod 中所有容器的日志：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># --diff-container 参数会为每个容器的日志添加不同的颜色，默认情况下，只会为每个 Pod 的日志添加不同的颜色</span></span><br><span class="line">stern myapp --diff-container</span><br></pre></td></tr></table></figure>
<p>     从日志中可以看到，main-container-1 容器完成任务后正常退出，而 sidecar-container-1 还在持续运行，最终导致这个 Job 无法正常结束。</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/Pod%E6%97%A5%E5%BF%97.webp" alt="Pod日志"></p>
<p>     如果我们提前在另一个窗口执行 kubectl get pod -w 命令，可以观察到 Pod 的状态变化如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">NAME          READY   STATUS    RESTARTS   AGE</span><br><span class="line">myapp-fdpb7   0/2     Pending   0          0s</span><br><span class="line">myapp-fdpb7   0/2     Pending   0          0s</span><br><span class="line">myapp-fdpb7   0/2     ContainerCreating   0          0s</span><br><span class="line">myapp-fdpb7   2/2     Running             0          2s</span><br><span class="line">myapp-fdpb7   1/2     NotReady            0          17s</span><br></pre></td></tr></table></figure>
<p>     每行状态的解释如下，完整的 Pod 资源内容请查看 logs/1-job-cannot-complete-status.yaml 文件：</p>
<p>     1.Pod 创建后还未被调度，Pod 的 Phase 为 Pending。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">phase:</span> <span class="string">Pending</span></span><br><span class="line">  <span class="attr">qosClass:</span> <span class="string">BestEffort</span></span><br></pre></td></tr></table></figure>
<p>     2.Pod 已经被调度到 Node 上，但是容器还未被创建，Pod 的 Phase 还是 Pending。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">conditions:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2024-05-28T13:05:25Z&quot;</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">PodScheduled</span> <span class="comment"># Pod 已经被调度到 Node 上</span></span><br><span class="line">  <span class="attr">phase:</span> <span class="string">Pending</span></span><br><span class="line">  <span class="attr">qosClass:</span> <span class="string">BestEffort</span></span><br></pre></td></tr></table></figure>
<p>     3.正在等待创建容器，Pod 还没有处于 Ready 状态，Pod 的 Phase 仍为 Pending。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">conditions:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2024-05-28T13:05:25Z&quot;</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Initialized</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2024-05-28T13:05:25Z&quot;</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">&#x27;containers with unready status: [main-container-1 sidecar-container-1]&#x27;</span></span><br><span class="line">      <span class="attr">reason:</span> <span class="string">ContainersNotReady</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">&quot;False&quot;</span> <span class="comment"># Pod 还没有处于 Ready 状态</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Ready</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2024-05-28T13:05:25Z&quot;</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">&#x27;containers with unready status: [main-container-1 sidecar-container-1]&#x27;</span></span><br><span class="line">      <span class="attr">reason:</span> <span class="string">ContainersNotReady</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">ContainersReady</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2024-05-28T13:05:25Z&quot;</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">PodScheduled</span></span><br><span class="line">  <span class="attr">containerStatuses:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">imageID:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">lastState:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">name:</span> <span class="string">main-container-1</span></span><br><span class="line">      <span class="attr">ready:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">restartCount:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">started:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">state:</span></span><br><span class="line">        <span class="attr">waiting:</span> <span class="comment"># 等待容器创建完成</span></span><br><span class="line">          <span class="attr">reason:</span> <span class="string">ContainerCreating</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">imageID:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">lastState:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">name:</span> <span class="string">sidecar-container-1</span></span><br><span class="line">      <span class="attr">ready:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">restartCount:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">started:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">state:</span></span><br><span class="line">        <span class="attr">waiting:</span> <span class="comment"># 等待容器创建完成</span></span><br><span class="line">          <span class="attr">reason:</span> <span class="string">ContainerCreating</span></span><br><span class="line">  <span class="attr">hostIP:</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line">  <span class="attr">phase:</span> <span class="string">Pending</span></span><br><span class="line">  <span class="attr">qosClass:</span> <span class="string">BestEffort</span></span><br><span class="line">  <span class="attr">startTime:</span> <span class="string">&quot;2024-05-28T13:05:25Z&quot;</span></span><br></pre></td></tr></table></figure>
<p>     4.所有容器在运行中，Pod 的 Phase 变为 Running。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">conditions:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2024-05-28T13:05:25Z&quot;</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Initialized</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2024-05-28T13:05:27Z&quot;</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Ready</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2024-05-28T13:05:27Z&quot;</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">ContainersReady</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2024-05-28T13:05:25Z&quot;</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">PodScheduled</span></span><br><span class="line">  <span class="attr">containerStatuses:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerID:</span> <span class="string">containerd://af182325a9bb106697dc56f7ff25e96d6dd22d45eb134990d9c4820349c11232</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">docker.io/library/busybox:1.35</span></span><br><span class="line">      <span class="attr">imageID:</span> <span class="string">docker.io/library/busybox@sha256:469d6089bc898ead80a47dab258a127ffdae15342eab860be3be9ed2acdee33b</span></span><br><span class="line">      <span class="attr">lastState:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">name:</span> <span class="string">main-container-1</span></span><br><span class="line">      <span class="attr">ready:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">restartCount:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">started:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">state:</span></span><br><span class="line">        <span class="attr">running:</span> <span class="comment"># 主容器在运行中</span></span><br><span class="line">          <span class="attr">startedAt:</span> <span class="string">&quot;2024-05-28T13:05:26Z&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerID:</span> <span class="string">containerd://fb24805ffe5ee1fddb64a728ee8853299f9c093b2722b77d54808d9821b90b0e</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">docker.io/library/busybox:1.35</span></span><br><span class="line">      <span class="attr">imageID:</span> <span class="string">docker.io/library/busybox@sha256:469d6089bc898ead80a47dab258a127ffdae15342eab860be3be9ed2acdee33b</span></span><br><span class="line">      <span class="attr">lastState:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">name:</span> <span class="string">sidecar-container-1</span></span><br><span class="line">      <span class="attr">ready:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">restartCount:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">started:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">state:</span></span><br><span class="line">        <span class="attr">running:</span> <span class="comment"># sidecar 容器在运行中</span></span><br><span class="line">          <span class="attr">startedAt:</span> <span class="string">&quot;2024-05-28T13:05:26Z&quot;</span></span><br><span class="line">  <span class="attr">hostIP:</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line">  <span class="attr">phase:</span> <span class="string">Running</span></span><br><span class="line">  <span class="attr">podIP:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.7</span></span><br><span class="line">  <span class="attr">podIPs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">ip:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.7</span></span><br><span class="line">  <span class="attr">qosClass:</span> <span class="string">BestEffort</span></span><br><span class="line">  <span class="attr">startTime:</span> <span class="string">&quot;2024-05-28T13:05:25Z&quot;</span></span><br></pre></td></tr></table></figure>
<p>     5.main-container-1 容器完成任务后正常退出，而 sidecar-container-1 还在持续运行，最终这个 Job 无法正常结束。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">conditions:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2024-05-28T13:05:25Z&quot;</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Initialized</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2024-05-28T13:05:42Z&quot;</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">&#x27;containers with unready status: [main-container-1]&#x27;</span></span><br><span class="line">      <span class="attr">reason:</span> <span class="string">ContainersNotReady</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">Ready</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2024-05-28T13:05:42Z&quot;</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">&#x27;containers with unready status: [main-container-1]&#x27;</span></span><br><span class="line">      <span class="attr">reason:</span> <span class="string">ContainersNotReady</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">&quot;False&quot;</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">ContainersReady</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2024-05-28T13:05:25Z&quot;</span></span><br><span class="line">      <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">PodScheduled</span></span><br><span class="line">  <span class="attr">containerStatuses:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerID:</span> <span class="string">containerd://af182325a9bb106697dc56f7ff25e96d6dd22d45eb134990d9c4820349c11232</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">docker.io/library/busybox:1.35</span></span><br><span class="line">      <span class="attr">imageID:</span> <span class="string">docker.io/library/busybox@sha256:469d6089bc898ead80a47dab258a127ffdae15342eab860be3be9ed2acdee33b</span></span><br><span class="line">      <span class="attr">lastState:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">name:</span> <span class="string">main-container-1</span></span><br><span class="line">      <span class="attr">ready:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">restartCount:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">started:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">state:</span></span><br><span class="line">        <span class="attr">terminated:</span> <span class="comment"># 主容器已经正常退出</span></span><br><span class="line">          <span class="attr">containerID:</span> <span class="string">containerd://af182325a9bb106697dc56f7ff25e96d6dd22d45eb134990d9c4820349c11232</span></span><br><span class="line">          <span class="attr">exitCode:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">finishedAt:</span> <span class="string">&quot;2024-05-28T13:05:41Z&quot;</span></span><br><span class="line">          <span class="attr">reason:</span> <span class="string">Completed</span></span><br><span class="line">          <span class="attr">startedAt:</span> <span class="string">&quot;2024-05-28T13:05:26Z&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerID:</span> <span class="string">containerd://fb24805ffe5ee1fddb64a728ee8853299f9c093b2722b77d54808d9821b90b0e</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">docker.io/library/busybox:1.35</span></span><br><span class="line">      <span class="attr">imageID:</span> <span class="string">docker.io/library/busybox@sha256:469d6089bc898ead80a47dab258a127ffdae15342eab860be3be9ed2acdee33b</span></span><br><span class="line">      <span class="attr">lastState:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">name:</span> <span class="string">sidecar-container-1</span></span><br><span class="line">      <span class="attr">ready:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">restartCount:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">started:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">state:</span></span><br><span class="line">        <span class="attr">running:</span> <span class="comment"># sidecar 容器还在继续运行</span></span><br><span class="line">          <span class="attr">startedAt:</span> <span class="string">&quot;2024-05-28T13:05:26Z&quot;</span></span><br><span class="line">  <span class="attr">hostIP:</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line">  <span class="attr">phase:</span> <span class="string">Running</span></span><br><span class="line">  <span class="attr">podIP:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.7</span></span><br><span class="line">  <span class="attr">podIPs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">ip:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.7</span></span><br><span class="line">  <span class="attr">qosClass:</span> <span class="string">BestEffort</span></span><br><span class="line">  <span class="attr">startTime:</span> <span class="string">&quot;2024-05-28T13:05:25Z&quot;</span></span><br></pre></td></tr></table></figure>
<p>     下面这张图展示了上面描述的 Pod 状态变化过程：</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/Pod%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E8%BF%87%E7%A8%8B.webp" alt="Pod状态变化过程"></p>
<p>     这里有几个地方需要解释一下，在我们观察容器和 Pod 的状态时，Kubernetes 提供了一些字段来帮助我们理解 Pod 的状态：</p>
<p>     <strong>Pod phase:</strong> Pod phase 是对 Pod 在其生命周期中所处位置的一个高层次的概括，包括 Pending、Running、Succeeded、Failed 和 Unknown。</p>
<ul>
<li>
<p>Pending：Pod 已被 Kubernetes 系统接受，但有一个或者多个容器尚未被创建。此阶段包括等待 Pod 被调度的时间和通过网络下载镜像的时间。</p>
</li>
<li>
<p>Running：Pod 中的所有容器都已经被创建，并且至少有一个容器正在运行，或者正在启动或者重启。</p>
</li>
<li>
<p>Succeeded：Pod 中的所有容器都已经成功终止，并且不会再重启。</p>
</li>
<li>
<p>Failed：Pod 中的所有容器都已经终止，但至少有一个容器是因为失败而终止。</p>
</li>
<li>
<p>Unknown：Pod 的状态无法被获取，通常是由于与 Pod 应该运行的节点通信失败导致的。</p>
</li>
</ul>
<p>     <strong>Container states:</strong> 容器的状态，包括 Waiting、Running 和 Terminated。我在上图右边部分的方框中用不同的颜色标记了这三种 Container states，另外在括号内部还对相同 Container states 的不同情况作了区分。</p>
<ul>
<li>
<p>Waiting：容器正在等待某些条件满足，例如正在拉取镜像，或者应用 Secret 数据。</p>
</li>
<li>
<p>Running：容器正在运行中。</p>
</li>
<li>
<p>Terminated：容器已经终止，可能是正常结束或者因为某些原因失败。如果你使用 kubectl describe pod 或者 kubectl get pod 命令来查询包含 Terminated 状态的容器的 Pod 时， 你会看到容器进入此状态的原因、退出代码以及容器执行期间的起止时间。</p>
</li>
</ul>
<p>     <strong>Pod Status：</strong> 在执行 kubectl get pod 命令时返回的 Pod 状态，该字段是 Pod 内所有容器状态的一个聚合，具体的源代码参见 printPod 函数.有以下几个常见的状态：</p>
<ul>
<li>
<p>Init:N/M：Pod 包含 M 个 init 容器，其中 N 个已经运行完成。</p>
</li>
<li>
<p>Init:Error：Pod 中的某个 init 容器执行失败。</p>
</li>
<li>
<p>Init:CrashLoopBackOff：Pod 中的某个 init 容器多次失败。</p>
</li>
<li>
<p>Pending：Pod 尚未开始创建 init 容器。</p>
</li>
<li>
<p>PodInitializing：Pod 已经执行完所有 init 容器，在等待创建主容器。</p>
</li>
<li>
<p>ContainerCreating：当 Pod 中不包含 init 容器时，在等待创建主容器时会显示这个状态。</p>
</li>
<li>
<p>Running：Pod 中的所有容器都在运行中。</p>
</li>
</ul>
<p>     <strong>Pod Ready：</strong> 以 Ready 的容器数量 / 所有容器的数量的形式展示。</p>
<p>     测试完毕后，执行以下命令删除这个 Job。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl delete -f 1-job-cannot-complete.yaml</span><br></pre></td></tr></table></figure>
<h4 id="2-2-问题-2：日志转发和指标收集的-sidecar-容器"><strong>2.2、问题 2：日志转发和指标收集的 Sidecar 容器</strong></h4>
<p>     日志转发和指标收集的 sidecar 容器应该在主应用容器之前启动，以便能够完整地收集日志和指标。如果 sidecar 容器在主应用容器之后启动，而主应用容器在启动时崩溃，则可能会导致日志丢失（取决于日志是否通过共享卷或者通过 Localhost 网络来进行收集）。 另外，在 Pod 停止时，如果 sidecar 容器先于其他容器退出，也会导致日志丢失的问题。</p>
<h4 id="2-3-问题-3：服务网格"><strong>2.3、问题 3：服务网格</strong></h4>
<p>     服务网格的 sidecar 容器需要在其他容器之前运行并准备就绪，以确保流量能够正确地通过服务网格。在关闭时，如果服务网格容器先于其他容器终止，也可能会导致流量异常。</p>
<h4 id="2-4-问题-4：配置-密钥"><strong>2.4、问题 4：配置/密钥</strong></h4>
<p>     当前，一些 Pod 使用 init 容器来获取配置/密钥，然后使用 sidecar 容器来持续监视变更并将更新推送给主容器，这需要两个独立的容器来实现。也许可以考虑使用同一个 sidecar 容器来处理这两种情况，以简化实现。</p>
<h4 id="3-什么是原生-sidecar-容器"><strong>3、什么是原生 Sidecar 容器</strong></h4>
<p>     Kubernetes 1.28 引入了一种新型容器 - sidecar 容器。Kubernetes 将 sidecar 容器作为 init 容器的一个特例来实现，在 Pod 启动后，sidecar 容器仍将保持运行状态。</p>
<p>     具体的实现方式是在 init 容器中添加了一个新的 restartPolicy 字段， 该字段在 SidecarContainers 特性门控启用时可用（该特性自 Kubernetes v1.29 起默认启用）。该字段是可选的，如果对其设置，则唯一有效的值为 Always。设置了这个字段以后，init 容器就成为了 sidecar 容器，它们会在 Pod 的整个生命周期内持续运行，而不是像 init 容器那样在成功执行完任务后就退出。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">secret-fetch</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">secret-fetch:1.0</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">network-proxy</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">network-proxy:1.0</span></span><br><span class="line">    <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure>
<p>     接下来让我们通过一些实验来深入理解 sidecar 容器的特性。</p>
<h4 id="4-环境准备"><strong>4、环境准备</strong></h4>
<p>     在本文中，我们将使用 Kind 来创建一个 Kubernetes 集群。Kind 是一个用于在 Docker 容器中运行本地 Kubernetes 集群的工具，它使用 Docker 容器作为节点，并在这些节点上运行 Kubernetes 的相关组件。</p>
<p>     在 Kind 配置文件中启用 SidecarContainers 特性门控，如下所示：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Cluster</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kind.x-k8s.io/v1alpha4</span></span><br><span class="line"><span class="attr">featureGates:</span></span><br><span class="line">  <span class="attr">SidecarContainers:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>     然后执行以下命令创建一个 Kubernetes 集群，集群的版本为 v1.28.0。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kind create cluster --name=sidecar-demo-cluster \</span><br><span class="line">--image kindest/node:v1.28.0 \</span><br><span class="line">--config sidecar-feature-enable.yaml</span><br></pre></td></tr></table></figure>
<h4 id="5-init-容器和主容器"><strong>5、Init 容器和主容器</strong></h4>
<p>     首先我们先来观察一下只有 init 容器和普通主容器的情况。在下面的示例中，我们定义了 3 个 init 容器和 2 个主容器。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">          sleep 10</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 completed tasks and exited&quot;</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container-2</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;init container 2 is starting...&quot;</span></span><br><span class="line"><span class="string">          echo &quot;init container 2 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">          sleep 10</span></span><br><span class="line"><span class="string">          echo &quot;init container 2 completed tasks and exited&quot;</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container-3</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;init container 3 is starting...&quot;</span></span><br><span class="line"><span class="string">          echo &quot;init container 3 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">          sleep 10</span></span><br><span class="line"><span class="string">          echo &quot;init container 3 completed task and exited&quot;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;main container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;main container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container-2</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span> ]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;main container 2 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;main container 2 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br></pre></td></tr></table></figure>
<p>     执行以下命令应用上面的 Pod 资源。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -f 2-init-and-main-containers.yaml</span><br></pre></td></tr></table></figure>
<p>     执行 stern 命令查看 Pod 的日志，可以看到 3 个 init 容器是按照定义的顺序依次启动的。每个 init 容器在执行完任务后都会正常退出，而下一个 init 容器则会等到前一个 init 容器退出后才会开始启动。</p>
<p>     等到所有的 init 容器退出后，两个主容器才会开始启动，它们之间的启动并没有先后顺序。</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/Pod%E6%97%A5%E5%BF%972.webp" alt="Pod日志2"></p>
<p>     如果我们提前在另一个窗口执行 kubectl get pod -w 命令，可以观察到 Pod 的状态变化。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">NAME    READY   STATUS    RESTARTS   AGE</span><br><span class="line">myapp   0/2     Pending   0          0s</span><br><span class="line">myapp   0/2     Pending   0          0s</span><br><span class="line">myapp   0/2     Init:0/3   0          0s</span><br><span class="line">myapp   0/2     Init:0/3   0          1s</span><br><span class="line">myapp   0/2     Init:1/3   0          12s</span><br><span class="line">myapp   0/2     Init:1/3   0          13s</span><br><span class="line">myapp   0/2     Init:2/3   0          23s</span><br><span class="line">myapp   0/2     Init:2/3   0          24s</span><br><span class="line">myapp   0/2     PodInitializing   0          34s</span><br><span class="line">myapp   2/2     Running           0          35s</span><br></pre></td></tr></table></figure>
<p>     每行状态的解释如下，完整的 Pod 资源内容请查看 logs/2-init-and-main-containers-status.yaml 文件：</p>
<p>     1.Pod 创建后还未被调度。</p>
<p>     2.Pod 已经被调度到 Node 上，但是容器还未被创建。</p>
<p>     3.等待创建第 1 个 init 容器。</p>
<p>     4.第 1 个 init 容器正在运行。</p>
<p>     5.第 1 个 init 容器正常退出，等待创建第 2 个 init 容器。</p>
<p>     6.第 2 个 init 容器正在运行。</p>
<p>     7.第 2 个 init 容器正常退出，等待创建第 3 个 init 容器。</p>
<p>     8.第 3 个 init 容器正在运行。</p>
<p>     9.所有的 init 容器都已经正常退出，等待创建 main-container-1 和 main-container-2 两个主容器。</p>
<p>     10.两个主容器都正在运行。</p>
<p>     下面这张图展示了上面描述的 Pod 状态变化过程：</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/Pod%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E8%BF%87%E7%A8%8B2.webp" alt="Pod状态变化过程2"></p>
<p>     测试完毕后，执行以下命令删除这个 Pod。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行 --force 参数立即删除 Pod，方便我们快速进行实验</span></span><br><span class="line"><span class="comment"># 不等待 terminationGracePeriodSeconds（默认是 30s）时间就让 Kubelet 强制发送 SIGKILL 信号，因为我们当前的容器并不会处理 SIGTERM 信号，这将在第 9 小节中会进一步说明</span></span><br><span class="line"><span class="comment"># 如果这里不使用 --force 参数，容器将等待 30s 后容器才会退出， </span></span><br><span class="line">kubectl delete -f 2-init-and-main-containers.yaml --force</span><br></pre></td></tr></table></figure>
<h4 id="6-init-容器-sidecar-容器和主容器"><strong>6、Init 容器、Sidecar 容器和主容器</strong></h4>
<p>     接下来，我们在 Pod 中引入 sidecar 容器，sidecar 容器是设置了 restartPolicy: Always 的 init 容器。在下面的示例中，我们定义了 3 个 init 容器、2 个 sidecar 容器和 2 个主容器。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">          sleep 10</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 completed tasks and exited&quot;</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sidecar-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;sidecar container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>      <span class="attr">restartPolicy:</span> <span class="string">Always</span> <span class="comment"># sidecar 容器是设置了 restartPolicy: Always 的 init 容器</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sidecar-container-2</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 2 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;sidecar container 2 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;main container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;main container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container-2</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span> ]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;main container 2 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;main container 2 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br></pre></td></tr></table></figure>
<p>     执行以下命令应用上面的 Pod 资源。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -f 3-init-and-sidecar-and-main-containers.yaml</span><br></pre></td></tr></table></figure>
<p>     从日志中我们可以清晰地看到整个 Pod 的启动过程。首先，init-container-1 作为第一个 init 容器启动，在成功执行完任务后正常退出。</p>
<p>     接下来，sidecar-container-1 作为第一个 sidecar 容器开始启动，接着是 sidecar-container-2 容器 。与 init 容器类似，sidecar 容器也是按照定义的顺序逐个启动的。不同的是，sidecar 不会像 init 容器那样在完成任务后退出。这确保了 sidecar 容器可以在 Pod 的整个生命周期内提供辅助功能。</p>
<p>     当两个 sidecar 容器启动并成功运行后，两个主容器才会开始启动。两个主容器之间并没有固定的启动顺序，它们几乎是同时启动的。</p>
<p>     最后我们可以看到 sidecar 容器和主容器会一直运行，交替输出日志。</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/Pod%E6%97%A5%E5%BF%973.webp" alt="Pod日志3"></p>
<p>     如果我们提前在另一个窗口执行 kubectl get pod -w 命令，可以观察到 Pod 的状态变化。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">NAME    READY   STATUS    RESTARTS   AGE</span><br><span class="line">myapp   0/4     Pending   0          0s</span><br><span class="line">myapp   0/4     Pending   0          0s</span><br><span class="line">myapp   0/4     Init:0/3   0          0s</span><br><span class="line">myapp   0/4     Init:0/3   0          1s</span><br><span class="line">myapp   0/4     Init:1/3   0          11s</span><br><span class="line">myapp   1/4     Init:2/3   0          12s</span><br><span class="line">myapp   2/4     PodInitializing   0          13s</span><br><span class="line">myapp   4/4     Running           0          14s</span><br></pre></td></tr></table></figure>
<p>     每行状态的解释如下，完整的 Pod 资源内容请查看 logs/3-init-and-sidecar-and-main-containers-status.yaml 文件：</p>
<p>     1.Pod 创建后还未被调度。</p>
<p>     2.Pod 已经被调度到 Node 上，但是容器还未被创建。</p>
<p>     3.等待创建第 1 个 init 容器。</p>
<p>     4.第 1 个 init 容器正在运行。</p>
<p>     5.第 1 个 init 容器正常退出，等待创建第 1 个 sidecar 容器。</p>
<p>     6.第 1 个 sidecar 容器正在运行，等待创建第 2 个 sidecar 容器。</p>
<p>     7.第 2 个 sidecar 容器正在运行，等待创建 main-container-1 和 main-container-2 两个主容器。</p>
<p>     8.两个主容器都正在运行。</p>
<p>     注意 READY 字段显示的容器数量是 4（2个 sidecar 容器 + 2 个主容器），而不是 2。这是因为 sidecar 容器也被包含在内，而 init 容器并不会被计算在内，因为 init 容器执行完任务就退出了。</p>
<p>     下面这张图展示了上面描述的 Pod 状态变化过程：</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/Pod%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E8%BF%87%E7%A8%8B3.webp" alt="Pod状态变化过程3"></p>
<p>     测试完毕后，执行以下命令删除这个 Pod。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl delete -f 3-init-and-sidecar-and-main-containers.yaml --force</span><br></pre></td></tr></table></figure>
<h4 id="7-sidecar-容器的-restartpolicy"><strong>7、Sidecar 容器的 RestartPolicy</strong></h4>
<p>     我们前面提到过，sidecar 容器是通过在原有的 init 容器中设置 restartPolicy: Always 来实现的。这意味着如果 sidecar 容器异常退出，kubelet 会自动重启它，从而确保 sidecar 容器在 Pod 的整个生命周期内都能一直运行。 在以下示例中，我们定义了两个 sidecar 容器，并分别设置它们运行 20 秒和 30 秒后退出。通过这种方式，我们可以观察 sidecar 容器的重启行为。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">          sleep 10</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 completed tasks and exited&quot;</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sidecar-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span> <span class="comment"># sidecar 容器完成任务后退出</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">          sleep 20</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 1 completed tasks and exited&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sidecar-container-2</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span>  <span class="comment"># sidecar 容器完成任务后退出</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 2 is starting...&quot;</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 2 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">          sleep 30</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 2 completed tasks and exited&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;main container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;main container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container-2</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span> ]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;main container 2 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;main container 2 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br></pre></td></tr></table></figure>
<p>     执行以下命令应用上面的 Pod 资源。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl apply -f 4-sidecar-containers-restart.yaml</span><br></pre></td></tr></table></figure>
<p>     通过日志我们可以看到 sidecar-container-1 和 sidecar-container-2 分别在 20 秒和 30 秒后退出，然后又被重新启动了。</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/Pod%E6%97%A5%E5%BF%974.webp" alt="Pod日志4"></p>
<p>     如果我们提前在另一个窗口执行 kubectl get pod -w 命令，可以观察到 Pod 的状态变化。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME    READY   STATUS    RESTARTS   AGE</span><br><span class="line">myapp   0/4     Pending   0          0s</span><br><span class="line">myapp   0/4     Pending   0          0s</span><br><span class="line">myapp   0/4     Init:0/3   0          0s</span><br><span class="line">myapp   0/4     Init:0/3   0          1s</span><br><span class="line">myapp   0/4     Init:1/3   0          11s</span><br><span class="line">myapp   1/4     Init:2/3   0          12s</span><br><span class="line">myapp   2/4     PodInitializing   0          13s</span><br><span class="line">myapp   4/4     Running           0          14s</span><br><span class="line">myapp   3/4     Running           0          32s</span><br><span class="line">myapp   4/4     Running           1 (2s ago)   33s</span><br><span class="line">myapp   3/4     Running           1 (11s ago)   42s</span><br><span class="line">myapp   4/4     Running           2 (1s ago)    43s</span><br></pre></td></tr></table></figure>
<p>     每行状态的解释如下，完整的 Pod 资源内容请查看 logs/4-sidecar-containers-restart-status.yaml 文件：</p>
<p>     Pod 创建后还未被调度。</p>
<p>     Pod 已经被调度到 Node 上，但是容器还未被创建。</p>
<p>     等待创建第 1 个 init 容器。</p>
<p>     第 1 个 init 容器正在运行。</p>
<p>     第 1 个 init 容器正常退出，等待创建第 1 个 sidecar 容器。</p>
<p>     第 1 个 sidecar 容器正在运行，等待创建第 2 个 sidecar 容器。</p>
<p>     第 2 个 sidecar 容器正在运行，等待创建 main-container-1 和 main-container-2 两个主容器。</p>
<p>     两个主容器都正在运行。</p>
<p>     sidecar-container-1 退出，kubelet 根据 restartPolicy: Always 自动重启 sidecar-container-1。</p>
<p>     sidecar-container-1 重启成功，所有容器都在运行状态。</p>
<p>     sidecar-container-2 退出，kubelet 根据 restartPolicy: Always 自动重启 sidecar-container-2。</p>
<p>     sidecar-container-2 重启成功，所有容器都在运行状态。</p>
<p>     下面这张图展示了上面描述的 Pod 状态变化过程：</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/Pod%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E8%BF%87%E7%A8%8B4.webp" alt="Pod状态变化过程4"></p>
<p>     测试完毕后，执行以下命令删除这个 Pod。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl delete -f 4-sidecar-containers-restart.yaml --force</span><br></pre></td></tr></table></figure>
<h4 id="8-容器探针"><strong>8、容器探针</strong></h4>
<p>     在上面的实验中，我们知道了主容器要等到 sidecar 容器运行以后才会开始启动。那么 sidecar 容器的探针是否会影响到主容器的启动呢？也就是说，主容器是否需要等到 sidecar 容器 Ready 后才能启动呢？让我们通过以下实验来寻找答案。</p>
<p>     sidecar 容器允许我们像主容器一样设置探针（startupProbe, readinessProbe, livenessProbe）来检查容器的健康状态。在下面的例子中，我们为两个 sidecar 容器分别添加了 readiness 探针，每个探针都会在容器启动后等待 30 秒才会通过。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">          sleep 10</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 completed tasks and exited&quot;</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sidecar-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;sidecar container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">readinessProbe:</span> <span class="comment"># sidecar 容器的 readiness 探针等待 30 秒通过</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">              echo &quot;readiness probe of sidecar container 1 is starting...&quot; &gt;&gt; /proc/1/fd/1</span></span><br><span class="line"><span class="string">              sleep 30</span></span><br><span class="line"><span class="string">              echo &quot;readiness probe of sidecar container 1 passed successfully&quot; &gt;&gt; /proc/1/fd/1</span></span><br><span class="line"><span class="string"></span>        <span class="attr">timeoutSeconds:</span> <span class="number">999</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sidecar-container-2</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 2 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;sidecar container 2 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">readinessProbe:</span> <span class="comment"># sidecar 容器的 readiness 探针等待 30 秒通过</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">              echo &quot;readiness probe of sidecar container 2 is starting...&quot; &gt;&gt; /proc/1/fd/1</span></span><br><span class="line"><span class="string">              sleep 30</span></span><br><span class="line"><span class="string">              echo &quot;readiness probe of sidecar container 2 passed successfully&quot; &gt;&gt; /proc/1/fd/1</span></span><br><span class="line"><span class="string"></span>        <span class="attr">timeoutSeconds:</span> <span class="number">999</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;main container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;main container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container-2</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span> ]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;main container 2 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;main container 2 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br></pre></td></tr></table></figure>
<p>     通过观察容器日志可以发现，两个主容器在 sidecar 容器的 readiness 探针通过之前就已经启动并开始执行任务了。 这表明主容器的启动并不需要等待 sidecar 容器达到 Ready 状态，只要 sidecar 容器处于 Running 状态即可。</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/Pod%E6%97%A5%E5%BF%975.webp" alt="Pod日志5"></p>
<p>     如果我们提前在另一个窗口执行 kubectl get pod -w 命令，可以观察到 Pod 的状态变化。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME    READY   STATUS    RESTARTS   AGE</span><br><span class="line">myapp   0/4     Pending   0          0s</span><br><span class="line">myapp   0/4     Pending   0          0s</span><br><span class="line">myapp   0/4     Init:0/3   0          0s</span><br><span class="line">myapp   0/4     Init:0/3   0          1s</span><br><span class="line">myapp   0/4     Init:1/3   0          11s</span><br><span class="line">myapp   0/4     Init:2/3   0          12s</span><br><span class="line">myapp   0/4     PodInitializing   0          13s</span><br><span class="line">myapp   2/4     Running           0          14s</span><br><span class="line">myapp   3/4     Running           0          42s</span><br><span class="line">myapp   4/4     Running           0          43s</span><br></pre></td></tr></table></figure>
<p>     每行状态的解释如下，完整的 Pod 资源内容请查看 logs/5-readiness-probe-status.yaml 文件：</p>
<p>     Pod 创建后还未被调度。</p>
<p>     Pod 已经被调度到 Node 上，但是容器还未创建。</p>
<p>     等待创建第 1 个 init 容器。</p>
<p>     第 1 个 init 容器正在运行。</p>
<p>     第 1 个 init 容器正常退出，等待创建第 1 个 sidecar 容器。</p>
<p>     第 1 个 sidecar 容器正在运行，等待创建第 2 个 sidecar 容器。注意，此时 sidecar-container-1 并未处于 ready 状态，因为就绪探针还在执行中，也就是说一旦容器处于 Running 状态，下一个容器就会开始启动。</p>
<p>     第 2 个 sidecar 容器正在运行但并未处于 Ready 状态，等待创建 main-container-1 和 main-container-2 两个主容器。</p>
<p>     两个主容器都正在运行，并且处于 Ready 状态。</p>
<p>     sidecar-container-1 通过就绪探针检查，进入 Ready 状态。</p>
<p>     sidecar-container-2 通过就绪探针检查，进入 Ready 状态。</p>
<p>     下面这张图展示了上面描述的 Pod 状态变化过程：</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/Pod%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E8%BF%87%E7%A8%8B5.webp" alt="Pod状态变化过程5"></p>
<p>测试完毕后，执行以下命令删除这个 Pod。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl delete -f 5-readiness-probe.yaml --force</span><br></pre></td></tr></table></figure>
<h4 id="9-容器的停止顺序"><strong>9、容器的停止顺序</strong></h4>
<p>     我们当前使用的 Kubernetes 版本是 1.28.0。让我们首先看看在这个版本中删除 Pod 时，sidecar 容器和主容器的停止顺序是怎样的。</p>
<p>     在下面的示例中，我们为主容器设置了 preStop hook。在容器停止之前，Kubelet 会先执行 preStop hook 中定义的命令，然后才会发送 SIGTERM 信号给容器。</p>
<p>     为了让容器接收到 SIGTERM 信号，我们在容器中使用了 trap 命令来捕获 SIGTERM 信号。另外，通常 hook 和 probe 的输出不会打印在 kubectl logs 中，为了方便我们通过日志来对容器的状态进行观察，这里使用了一种间接的方法：将输出重定向到 /proc/1/fd/1 文件中。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">          sleep 10</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 completed tasks and exited&quot;</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sidecar-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span> ]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          sh -c &quot;</span></span><br><span class="line"><span class="string">            trap &#x27;</span></span><br><span class="line"><span class="string">              echo \&quot;sidecar container 1 received SIGTERM\&quot;;</span></span><br><span class="line"><span class="string">              sleep 3;</span></span><br><span class="line"><span class="string">              echo \&quot;sidecar container 1 stopped\&quot;;</span></span><br><span class="line"><span class="string">              exit 0</span></span><br><span class="line"><span class="string">            &#x27; TERM;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">            <span class="string">while</span> <span class="literal">true</span><span class="string">;</span> <span class="string">do</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">\&quot;sidecar</span> <span class="string">container</span> <span class="number">1</span> <span class="string">is</span> <span class="string">doing</span> <span class="string">some</span> <span class="string">tasks...\&quot;;</span></span><br><span class="line">              <span class="string">sleep</span> <span class="number">3</span><span class="string">;</span></span><br><span class="line">            <span class="string">done</span></span><br><span class="line">          <span class="string">&quot;</span></span><br><span class="line"><span class="string">      restartPolicy: Always</span></span><br><span class="line"><span class="string">    - name: sidecar-container-2</span></span><br><span class="line"><span class="string">      image: busybox:1.35</span></span><br><span class="line"><span class="string">      command: [ &quot;</span><span class="string">sh&quot;,</span> <span class="string">&quot;-c&quot;</span> <span class="string">]</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 2 is starting...&quot;</span></span><br><span class="line"><span class="string">          sh -c &quot;</span></span><br><span class="line"><span class="string">            trap &#x27;</span></span><br><span class="line"><span class="string">              echo \&quot;sidecar container 2 received SIGTERM\&quot;;</span></span><br><span class="line"><span class="string">              sleep 3;</span></span><br><span class="line"><span class="string">              echo \&quot;sidecar container 2 stopped\&quot;;</span></span><br><span class="line"><span class="string">              exit 0</span></span><br><span class="line"><span class="string">            &#x27; TERM;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">            <span class="string">while</span> <span class="literal">true</span><span class="string">;</span> <span class="string">do</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">\&quot;sidecar</span> <span class="string">container</span> <span class="number">2</span> <span class="string">is</span> <span class="string">doing</span> <span class="string">some</span> <span class="string">tasks...\&quot;;</span></span><br><span class="line">              <span class="string">sleep</span> <span class="number">3</span><span class="string">;</span></span><br><span class="line">            <span class="string">done</span></span><br><span class="line">          <span class="string">&quot;</span></span><br><span class="line"><span class="string">      restartPolicy: Always</span></span><br><span class="line"><span class="string">  containers:</span></span><br><span class="line"><span class="string">    - name: main-container-1</span></span><br><span class="line"><span class="string">      image: busybox:1.35</span></span><br><span class="line"><span class="string">      command: [&quot;</span><span class="string">sh&quot;,</span> <span class="string">&quot;-c&quot;</span><span class="string">]</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;main container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          exec sh -c &quot;</span></span><br><span class="line"><span class="string">            trap &#x27;</span></span><br><span class="line"><span class="string">              echo \&quot;main container 1 received SIGTERM\&quot;;</span></span><br><span class="line"><span class="string">              sleep 10;</span></span><br><span class="line"><span class="string">              echo \&quot;main container 1 stopped\&quot;;</span></span><br><span class="line"><span class="string">              exit 0</span></span><br><span class="line"><span class="string">            &#x27; TERM;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">            <span class="string">while</span> <span class="literal">true</span><span class="string">;</span> <span class="string">do</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">\&quot;main</span> <span class="string">container</span> <span class="number">1</span> <span class="string">is</span> <span class="string">doing</span> <span class="string">some</span> <span class="string">tasks...\&quot;;</span></span><br><span class="line">              <span class="string">sleep</span> <span class="number">3</span><span class="string">;</span></span><br><span class="line">            <span class="string">done</span></span><br><span class="line">          <span class="string">&quot;</span></span><br><span class="line"><span class="string">      lifecycle:</span></span><br><span class="line"><span class="string">        preStop:</span></span><br><span class="line"><span class="string">          exec:</span></span><br><span class="line"><span class="string">            command: [&quot;</span><span class="string">sh&quot;,</span> <span class="string">&quot;-c&quot;</span><span class="string">,</span> <span class="string">&quot;echo &#x27;main container 1 preStop hook is running...&#x27; &gt;&gt; /proc/1/fd/1; sleep 5&quot;</span><span class="string">]</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container-2</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;main container 2 is starting...&quot;</span></span><br><span class="line"><span class="string">          exec sh -c &quot;</span></span><br><span class="line"><span class="string">            trap &#x27;</span></span><br><span class="line"><span class="string">              echo \&quot;main container 2 received SIGTERM\&quot;;</span></span><br><span class="line"><span class="string">              sleep 10;</span></span><br><span class="line"><span class="string">              echo \&quot;main container 2 stopped\&quot;;</span></span><br><span class="line"><span class="string">              exit 0</span></span><br><span class="line"><span class="string">            &#x27; TERM;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">            <span class="string">while</span> <span class="literal">true</span><span class="string">;</span> <span class="string">do</span></span><br><span class="line">              <span class="string">echo</span> <span class="string">\&quot;main</span> <span class="string">container</span> <span class="number">2</span> <span class="string">is</span> <span class="string">doing</span> <span class="string">some</span> <span class="string">tasks...\&quot;;</span></span><br><span class="line">              <span class="string">sleep</span> <span class="number">3</span><span class="string">;</span></span><br><span class="line">            <span class="string">done</span></span><br><span class="line">          <span class="string">&quot;</span></span><br><span class="line"><span class="string">      lifecycle:</span></span><br><span class="line"><span class="string">        preStop:</span></span><br><span class="line"><span class="string">          exec:</span></span><br><span class="line"><span class="string">            command: [&quot;</span><span class="string">sh&quot;,</span> <span class="string">&quot;-c&quot;</span><span class="string">,</span> <span class="string">&quot;echo &#x27;main container 2 preStop hook is running...&#x27; &gt;&gt; /proc/1/fd/1; sleep 5&quot;</span><span class="string">]</span></span><br></pre></td></tr></table></figure>
<p>     执行以下命令应用上面的 Pod 资源。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl apply -f 6-prestop-hook.yaml</span><br></pre></td></tr></table></figure>
<p>     通过查看日志，可以看到主容器首先执行了 preStop hook，然后接收到了 SIGTERM 信号，最后优雅地退出了。同时，sidecar 容器也接收到了 SIGTERM 信号，但是它在主容器停止之前就已经停止了。</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/Pod%E6%97%A5%E5%BF%976.webp" alt="Pod日志6"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NAME    READY   STATUS    RESTARTS   AGE</span><br><span class="line">myapp   0/4     Pending   0          0s</span><br><span class="line">myapp   0/4     Pending   0          0s</span><br><span class="line">myapp   0/4     Init:0/3   0          0s</span><br><span class="line">myapp   0/4     Init:0/3   0          1s</span><br><span class="line">myapp   0/4     Init:1/3   0          11s</span><br><span class="line">myapp   1/4     Init:2/3   0          12s</span><br><span class="line">myapp   2/4     PodInitializing   0          13s</span><br><span class="line">myapp   4/4     Running           0          14s</span><br><span class="line">myapp   4/4     Terminating       0          38s</span><br><span class="line">myapp   0/4     Terminating       0          53s</span><br><span class="line">myapp   0/4     Terminating       0          54s</span><br><span class="line">myapp   0/4     Terminating       0          54s</span><br><span class="line">myapp   0/4     Terminating       0          54s</span><br></pre></td></tr></table></figure>
<p>     每行状态的解释如下，完整的 Pod 资源内容请查看 logs/6-prestop-hook-status.yaml 文件：</p>
<p>     Pod 创建后还未被调度。</p>
<p>     Pod 已经被调度到 Node 上，但是容器还未创建。</p>
<p>     等待创建第 1 个 init 容器。</p>
<p>     第 1 个 init 容器正在运行。</p>
<p>     第 1 个 init 容器正常退出，等待创建第 1 个 sidecar 容器。</p>
<p>     第 1 个 sidecar 容器正在运行，等待创建第 2 个 sidecar 容器。</p>
<p>     第 2 个 sidecar 容器正在运行，等待创建 main-container-1 和 main-container-2 两个主容器。</p>
<p>     两个主容器都正在运行。</p>
<p>     接收到 Pod 删除的请求，开始停止容器。</p>
<p>     sidecar 容器和主容器都已经停止。</p>
<p>     在后面的几行 Terminating 中， 容器的状态并不会发生变化。</p>
<p>     以下这张图展示了上面描述的 Pod 状态变化过程：</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/Pod%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E8%BF%87%E7%A8%8B6.webp" alt="Pod状态变化过程6"></p>
<p>     然而，由于 sidecar 容器可能会在主容器之前停止，这种情况仍然可能带来一些问题。例如，如果 sidecar 容器负责收集日志，那么可能会造成部分日志内容缺失。又比如，如果 sidecar 容器提供网络代理功能，那么它的提前退出可能会导致主容器的网络连接中断。</p>
<p>     为了解决这个问题，从 Kubernetes 1.29 版本开始，如果 Pod 中包含一个或多个 sidecar 容器，kubelet 将延迟向这些 sidecar 容器发送 SIGTERM 信号，直到最后一个主容器完全终止。sidecar 容器将按照它们在 Pod spec 中定义的相反顺序终止。这确保了 sidecar 容器继续为 Pod 中的其他容器提供服务，直到不再需要它们。</p>
<p>     下面让我们创建一个 Kubernetes 1.29 版本的集群，然后再次测试 sidecar 容器的停止顺序。由于在 1.29 版本中 SidecarContainers 这个特性已经成为 Beta 版本，因此默认是开启的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kind create cluster --name=sidecar-demo-cluster-2 \</span><br><span class="line">--image kindest/node:v1.29.0</span><br></pre></td></tr></table></figure>
<p>     通过分析以下日志，我们可以清晰地看到容器退出的整个过程。首先两个主容器的 preStop hook 被执行，然后主容器接收到 Kubelet 发送的 SIGTERM 信号并正常退出。等到主容器完全退出后，sidecar-container-1 才会接收到 SIGTERM 信号并正常退出。最后，sidecar-container-2 接收到 SIGTERM 信号并正常退出。</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/Pod%E6%97%A5%E5%BF%977.webp" alt="Pod日志7"></p>
<p>     下面这张图描述了 1.29 版本的 sidecar 容器的停止顺序：</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/Pod%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E8%BF%87%E7%A8%8B7.webp" alt="Pod状态变化过程7"></p>
<p>     测试完毕后，执行以下命令删除这个 Pod。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl delete -f 6-prestop-hook.yaml --force</span><br></pre></td></tr></table></figure>
<h4 id="10-容器资源的-request-和-limit"><strong>10、容器资源的 Request 和 Limit</strong></h4>
<p>     在 Kubernetes 中，我们可以为容器设置资源请求（request）和资源限制（limit）。当你为 Pod 中的容器指定了资源 request（请求）时，kube-scheduler 就根据该信息决定将 Pod 调度到哪个节点上。 当你为容器指定了资源 limit（限制） 时，kubelet 就可以确保运行的容器不会使用超出所设限制的资源。</p>
<p>     在评估节点是否有足够的资源来运行 Pod 时，kube-scheduler 会根据不同情况来计算 Pod 中容器资源的最大请求量。在没有引入 sidecar 容器的情况下，计算方式比较简单：资源的最大请求量是单个 init 容器的最大请求量与所有主容器请求量总和之间的最大值。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Max ( Max(initContainers), Sum(Containers) )</span><br></pre></td></tr></table></figure>
<p>     有了 sidecar 容器之后，计算公式会变得复杂一些。可以简单地分为两种情况：</p>
<ul>
<li>1.所有 sidecar 容器都是在 init 容器之后启动的。对于这种情况，我们只需要把所有 sidecar 容器的资源请求量与主容器的资源请求量相加，然后与单个 init 容器的最大请求量进行比较即可。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Max ( Max(initContainers), Sum(Containers) + Sum(Sidecar Containers) )</span><br></pre></td></tr></table></figure>
<ul>
<li>2.有一个或者多个 sidecar 容器是在 init 容器之前启动的。在这种情况下，当计算 init 容器的最大请求量时，我们需要把在该 init 容器之前启动的 sidecar 容器也考虑在内。在这里，我们使用 InitContainerUse(i) 来表示当启动 i 个 init 容器时，所需的最大资源请求量（等于该 init 容器的请求量 + 在该 init 容器之前启动的 sidecar 容器的请求量总和）：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">InitContainerUse(i) = Sum(sidecar containers with index &lt; i) + InitContainer(i)</span><br></pre></td></tr></table></figure>
<p>     最后将 InitContainerUse 与所有主容器以及在该 init 容器之后启动的 sidecar 容器的总和进行比较，取最大值。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Max ( Max( each InitContainerUse ) , Sum(Sidecar Containers) + Sum(Containers) )</span><br></pre></td></tr></table></figure>
<p>     接下来我们用两个例子来验证上面的结论，当前 Kubernetes 集群中只有一个节点，使用 kubectl describe node 命令可以看到该节点总共有 10 个 CPU 可供分配，当前 CPU request 已经使用了 9% 的 CPU 资源，也就是说还有 9 个 完整的 CPU 可供分配。</p>
<p><img src="/pic/Kubernetes%E4%B8%AD%E5%8E%9F%E7%94%9F%E7%9A%84Sidecar%E5%AE%B9%E5%99%A8/%E8%8A%82%E7%82%B9CPU%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5.webp" alt="节点CPU使用情况"></p>
<p>     在下面的示例中，我们为 init 容器设置了 9 个 CPU 的 request，为 sidecar 容器和主容器也设置了总共 9 个 CPU 的 request，这样 Pod 刚刚好被允许调度到节点上。如果你尝试将 init 容器的 CPU request 设置为 10，或者将任一 sidecar 容器或主容器的 CPU request 增加 1，那么这个 Pod 都将无法被调度到节点上。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 7-resource-requests.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">          sleep 10</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 completed tasks and exited&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;9&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sidecar-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;sidecar container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sidecar-container-2</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 2 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;sidecar container 2 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;main container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;main container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container-2</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span> ]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;main container 2 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;main container 2 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;4&quot;</span></span><br></pre></td></tr></table></figure>
<p>     在第二个例子中，我们调整了容器的定义顺序，将 sidecar-container-1 移动到了 init-container-1 之前。虽然 Pod 的 CPU 资源请求总量没有改变，但你会发现这次 Pod 无法被调度到节点上了。这是因为在计算单个 init 容器的最大资源请求量时，sidecar-container-1 的资源请求量也被计入了。原本 init-container-1 的资源请求量是 9，现在加上了 sidecar-container-1 的资源请求量 1，最大的资源请求量就变为了 10，超过了节点的可用资源。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 8-resource-requests-init-container-after-sidecar-container.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">initContainers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sidecar-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;sidecar container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">init-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">          sleep 10</span></span><br><span class="line"><span class="string">          echo &quot;init container 1 completed tasks and exited&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;9&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sidecar-container-2</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;sidecar container 2 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;sidecar container 2 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container-1</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;main container 1 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;main container 1 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">main-container-2</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox:1.35</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span> ]</span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;main container 2 is starting...&quot;</span></span><br><span class="line"><span class="string">          while true; do</span></span><br><span class="line"><span class="string">            echo &quot;main container 2 is doing some tasks...&quot;</span></span><br><span class="line"><span class="string">            sleep 3</span></span><br><span class="line"><span class="string">          done</span></span><br><span class="line"><span class="string"></span>      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">cpu:</span> <span class="string">&quot;4&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="11-在-istio-中使用-sidecar-容器"><strong>11、在 Istio 中使用 Sidecar 容器</strong></h4>
<p>     在没有原生 sidecar 容器的支持之前，Istio 采用了一种变通的方法来保证 sidecar 容器在主容器之前启动：通过为 Istio 的 sidecar 容器添加一个 postStart hook，该 hook 会阻塞其他容器的启动，直到 sidecar 代理完全运行为止。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">spec:</span><br><span class="line">  initContainers:</span><br><span class="line">    - name: istio-init</span><br><span class="line">      ...</span><br><span class="line">  containers:</span><br><span class="line">    - name: istio-proxy</span><br><span class="line">      ...</span><br><span class="line">      lifecycle:</span><br><span class="line">        postStart:</span><br><span class="line">          exec:</span><br><span class="line">            command:</span><br><span class="line">              - pilot-agent</span><br><span class="line">              - wait</span><br></pre></td></tr></table></figure>
<p>     在 Istio 中可以通过将 holdApplicationUntilProxyStarts 设置为 true 来启用这个功能。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.7 版本特性 https://github.com/istio/istio/pull/24737</span></span><br><span class="line">istioctl install --set values.global.proxy.holdApplicationUntilProxyStarts=true</span><br></pre></td></tr></table></figure>
<p>     在 Kubernetes 1.28 发布 SidecarContainers 的功能之后，现在我们直接可以在 Istio 中使用原生的 sidecar 容器了，只需将 pilot 的ENABLE_NATIVE_SIDECARS 环境变量设置为 true 即可。完整的教程请参见 Kubernetes Native Sidecars in Istio。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TAG=1.19.0-beta.0</span><br><span class="line">curl -L https://github.com/istio/istio/releases/download/$TAG/istio-$TAG-linux-amd64.tar.gz | tar xz</span><br><span class="line">./istioctl install --set values.pilot.env.ENABLE_NATIVE_SIDECARS=true -y</span><br></pre></td></tr></table></figure>
<h4 id="12-总结"><strong>12、总结</strong></h4>
<p>     本文首先回顾了传统 sidecar 模式存在的问题，包括 Job 无法正常终止、日志和指标收集不完整以及服务网格流量异常等等。随后，我们介绍了 Kubernetes 1.28 版本中引入的原生 sidecar 容器功能，这一功能旨在解决传统 sidecar 模式的局限性。我们还深入探讨了 sidecar 容器的其他特性，包括 sidecar 容器的启动顺序、重启策略、容器探针、停止顺序等。最后，我们简要地介绍了如何在 Istio 中利用原生 sidecar 容器来提升服务网格的可靠性。</p>
<p><a href="https://mp.weixin.qq.com/s/x9bcRjWUiWdtQokHlU0MrQ">原文地址</a></p>
]]></content>
      <tags>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>一键部署单机K8S环境</title>
    <url>/2024/07/04/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E5%8D%95%E6%9C%BAK8S%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">. /etc/init.d/functions</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">IP地址,默认为本机第一块网卡IP地址(不包含lo网卡)</span></span><br><span class="line">ip=</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主机名称,默认为当前主机名称</span></span><br><span class="line">hostName=master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Docker版本</span></span><br><span class="line">dockerVersion=20.10.6</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Kubernetes版本</span></span><br><span class="line">k8sVersion=1.23.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Pod网段</span></span><br><span class="line">podSubnet=&quot;10.244.0.0/16&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Service网段</span></span><br><span class="line">serviceSubnet=&quot;10.10.0.0/16&quot;</span><br><span class="line"></span><br><span class="line">networkCheck()&#123;</span><br><span class="line">ping -c 1 www.baidu.com &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">if [ $? -eq 0 ];then</span><br><span class="line">	action &quot;外网权限检查:&quot;</span><br><span class="line">else</span><br><span class="line">	action &quot;外网权限检查:&quot;</span><br><span class="line">	echo &quot;此脚本需要访问外网权限才可成功执行,退出脚本&quot;</span><br><span class="line">	exit 5</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line">cpuCheck()&#123;</span><br><span class="line">cpuCores=$(grep -c ^processor /proc/cpuinfo)</span><br><span class="line">if [[ $&#123;cpuCores&#125; -lt 2 ]];then</span><br><span class="line">	action &quot;CPU配置检查:&quot; false</span><br><span class="line">	echo -e &quot;\033[32m# 当前主机CPU $&#123;cpuCores&#125;核 &lt; 2核,不满足安装K8s最低需求,请检查配置\033[0m&quot;</span><br><span class="line">	exit 5</span><br><span class="line">else</span><br><span class="line">	action &quot;CPU配置检查:&quot; </span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">menoryCheck()&#123;</span><br><span class="line">menorySize=$(free -m|grep -i mem|awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">if [[ $&#123;menorySize&#125; -lt 1800 ]];then</span><br><span class="line">        action &quot;内存配置检查:&quot; false</span><br><span class="line">        echo -e &quot;\033[32m# 当前主机内存 $&#123;menorySize&#125;M &lt; 1800M(2G),不满足安装K8s最低需求,请检查配置\033[0m&quot;</span><br><span class="line">	exit 5</span><br><span class="line">else</span><br><span class="line">        action &quot;内存配置检查:&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stopFirewall()&#123;</span><br><span class="line">systemctl disable firewalld --now &amp;&gt;/dev/null</span><br><span class="line">setenforce 0 &amp;&gt;/dev/null</span><br><span class="line">sed  -i.$(date +%F) -r &#x27;s/SELINUX=[ep].*/SELINUX=disabled/g&#x27; /etc/selinux/config</span><br><span class="line"></span><br><span class="line">if (grep SELINUX=disabled /etc/selinux/config) &amp;&gt;/dev/null;then</span><br><span class="line">	action &quot;关闭防火墙:&quot;</span><br><span class="line">else</span><br><span class="line">	action &quot;关闭防火墙:&quot; false</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hostName()&#123;</span><br><span class="line">if [[ -z $&#123;ip&#125; ]];then</span><br><span class="line">	ip=$(ip addr | grep -oP &#x27;(?&lt;=inet\s)\d+\.\d+\.\d+\.\d+&#x27;|egrep -v &quot;127.0.0.1|172.17.0.1&quot;|awk NR==1)</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ -z $&#123;hostName&#125; ]];then</span><br><span class="line">	hostName=&quot;$&#123;HOSTNAME&#125;&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if ! (egrep -w &quot;$&#123;ip&#125; +$&#123;hostName&#125;&quot; /etc/hosts) &amp;&gt;/dev/null;then</span><br><span class="line">	hostnamectl set-hostname $&#123;hostName&#125;</span><br><span class="line">	echo &quot;$&#123;ip&#125; $&#123;hostName&#125;&quot; &gt;&gt; /etc/hosts</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if (egrep -w &quot;$&#123;ip&#125; +$&#123;hostName&#125;&quot; /etc/hosts) &amp;&gt;/dev/null;then</span><br><span class="line">	action &quot;添加本地域名解析:&quot;</span><br><span class="line">else</span><br><span class="line">        action &quot;添加本地域名解析:&quot; false</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timeSync()&#123;</span><br><span class="line">if ! (which ntpdate &amp;&gt;/dev/null);then</span><br><span class="line">	echo -e &quot;\033[32m# ntpdate未安装,开始进行安装....\033[0m&quot;</span><br><span class="line">	(yum -y install ntpdate) &amp;&gt;/dev/null;sleep 0.3</span><br><span class="line">	if (which ntpdate &amp;&gt;/dev/null);then</span><br><span class="line">		action &quot;ntpdate安装成功:&quot;</span><br><span class="line">	fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if (ntpdate ntp1.aliyun.com &amp;&gt;/dev/null);then</span><br><span class="line">	if ! (egrep &quot;ntpdate +ntp1.aliyun.com&quot; /var/spool/cron/root &amp;&gt;/dev/null);then</span><br><span class="line">		echo &quot;0 1 * * * ntpdate ntp1.aliyun.com&quot; &gt;&gt; /var/spool/cron/root</span><br><span class="line">	fi</span><br><span class="line">		action &quot;时间同步:&quot;</span><br><span class="line">else</span><br><span class="line">	action &quot;时间同步:&quot; false</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swapOff()&#123;</span><br><span class="line">swapoff --all</span><br><span class="line">sed -i -r &#x27;/swap/ s/^/#/&#x27; /etc/fstab</span><br><span class="line"></span><br><span class="line">if [[ $(free | grep -i swap | awk &#x27;&#123;print $2&#125;&#x27;) -eq 0 ]]; then</span><br><span class="line">    action &quot;关闭交换分区:&quot;</span><br><span class="line">else</span><br><span class="line">    action &quot;关闭交换分区:&quot; false</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addKernelArg()&#123;</span><br><span class="line">KernelArg=(&quot;net.bridge.bridge-nf-call-ip6tables&quot; &quot;net.bridge.bridge-nf-call-iptables&quot; &quot;net.ipv4.ip_forward&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断内核参数是否存在,如果不存在则添加</span></span><br><span class="line">for ((i=0;i&lt;$&#123;#KernelArg[@]&#125;;i++))do</span><br><span class="line">	if [[ $(sysctl -n $&#123;KernelArg[i]&#125;) -ne 1 ]];then</span><br><span class="line">		echo &quot;$&#123;KernelArg[i]&#125; = 1&quot; &gt;&gt; /etc/sysctl.d/kubernetes.conf</span><br><span class="line">	fi</span><br><span class="line">done</span><br><span class="line">modprobe br_netfilter &amp;&gt;/dev/null</span><br><span class="line">sysctl -p /etc/sysctl.d/kubernetes.conf &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line">if [[ $(sysctl -n $&#123;KernelArg[0]&#125;) -eq 1 &amp;&amp; $(sysctl -n $&#123;KernelArg[1]&#125;) -eq 1 &amp;&amp; $(sysctl -n $&#123;KernelArg[2]&#125;) -eq 1 ]]; then</span><br><span class="line">		action &quot;添加内核参数:&quot;</span><br><span class="line">	else</span><br><span class="line">		action &quot;添加内核参数:&quot; false</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ipvs()&#123;</span><br><span class="line">if (command -v ipset &amp;&gt;/dev/null &amp;&amp; command -v ipvsadm &amp;&gt;/dev/null);then</span><br><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4  </span><br><span class="line">EOF</span><br><span class="line">	chmod +x /etc/sysconfig/modules/ipvs.modules</span><br><span class="line">	/etc/sysconfig/modules/ipvs.modules</span><br><span class="line">else</span><br><span class="line">	echo -e &quot;\033[32m# ipvs未安装,开始进行安装....\033[0m&quot;</span><br><span class="line">	yum -y install ipset ipvsadm &amp;&gt;/dev/null</span><br><span class="line">	if (command -v ipset &amp;&gt;/dev/null &amp;&amp; command -v ipvsadm &amp;&gt;/dev/null);then</span><br><span class="line">		action &quot;ipvs安装成功:&quot;</span><br><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4  </span><br><span class="line">EOF</span><br><span class="line">	        chmod +x /etc/sysconfig/modules/ipvs.modules</span><br><span class="line">        	/etc/sysconfig/modules/ipvs.modules</span><br><span class="line"></span><br><span class="line">	fi</span><br><span class="line">fi</span><br><span class="line">modprobe br_netfilter &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line">if (lsmod | grep -q -e ip_vs -e nf_conntrack_ipv4)&amp;&gt;/dev/null; then</span><br><span class="line">	action &quot;启用ipvs模块:&quot; </span><br><span class="line">else</span><br><span class="line">	action &quot;启用ipvs模块:&quot; false</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line">dockerInstall()&#123;</span><br><span class="line">if ! (command -v docker &amp;&gt;/dev/null);then</span><br><span class="line">	echo -e &quot;\033[32m# Docker未安装,开始进行安装....\033[0m&quot;</span><br><span class="line">	(curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo) &amp;&gt;/dev/null</span><br><span class="line">	(wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo) &amp;&gt;/dev/null</span><br><span class="line">	(yum install -y yum-utils) &amp;&gt;/dev/null</span><br><span class="line">	(yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo) &amp;&gt;/dev/null</span><br><span class="line">	(yum install docker-ce-$&#123;dockerVersion&#125; docker-ce-cli-$&#123;dockerVersion&#125; -y) &amp;&gt;/dev/null</span><br><span class="line">	if (command -v docker &amp;&gt;/dev/null);then</span><br><span class="line">		action &quot;Docker安装成功:&quot;</span><br><span class="line">	else</span><br><span class="line">		action &quot;Docker安装成功:&quot; false</span><br><span class="line">	fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir /etc/docker &amp;&gt;/dev/null</span><br><span class="line">if [[ -f /etc/docker/daemon.json ]];then</span><br><span class="line">	mv /etc/docker/daemon.json&#123;,.$(date +%F)&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://aoewjvel.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">(systemctl enable docker --now) &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line">if [[ -f /etc/docker/daemon.json ]];then</span><br><span class="line">	action &quot;Docker镜像加速源:&quot;</span><br><span class="line">else</span><br><span class="line">	action &quot;Docker镜像加速源:&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k8sInstall()&#123;</span><br><span class="line">k8scommand=(&quot;kubeadm&quot; &quot;kubelet&quot; &quot;kubectl&quot;)</span><br><span class="line"></span><br><span class="line">if [[ -f /etc/yum.repos.d/kubernetes.repo ]];then</span><br><span class="line">	mv /etc/yum.repos.d/kubernetes.repo&#123;,.$(date +%F)&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">echo -e &quot;\033[32m# 正在安装K8S,请耐心等待......\033[0m&quot;</span><br><span class="line">(yum -y install --setopt=obsoletes=0 kubeadm-$&#123;k8sVersion&#125; kubelet-$&#123;k8sVersion&#125; kubectl-$&#123;k8sVersion&#125;) &amp;&gt;/dev/null</span><br><span class="line">systemctl enable kubelet.service --now  &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line">for ((i=0;i&lt;$&#123;#k8scommand[@]&#125;;i++))do</span><br><span class="line">	if (command -v $&#123;k8scommand[i]&#125; &amp;&gt;/dev/null);then</span><br><span class="line">		action &quot;安装$&#123;k8scommand[i]&#125;组件:&quot;</span><br><span class="line">	else</span><br><span class="line">		action &quot;安装$&#123;k8scommand[i]&#125;组件:&quot; false</span><br><span class="line">	fi</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k8sInit()&#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过hosts文件获取IP地址</span></span><br><span class="line">if [[ -z $&#123;ip&#125; ]];then</span><br><span class="line">	ip=$(grep $&#123;HOSTNAME&#125; /etc/hosts|awk &#x27;&#123;print $1&#125;&#x27;| awk NR==1)</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ -f /root/kubeadm-config.yaml ]];then</span><br><span class="line">	mv /root/kubeadm-config.yaml&#123;,.$(date +%F)&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /root/kubeadm-config.yaml &lt;&lt; EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta3</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- groups:</span><br><span class="line">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">  token: abcdef.0123456789abcdef</span><br><span class="line">  ttl: 24h0m0s</span><br><span class="line">  usages:</span><br><span class="line">  - signing</span><br><span class="line">  - authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: $&#123;ip&#125;</span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  imagePullPolicy: IfNotPresent</span><br><span class="line">  name: $&#123;hostName&#125;</span><br><span class="line">  taints: null</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta3</span><br><span class="line">certificatesDir: /etc/kubernetes/pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns: &#123;&#125;</span><br><span class="line">etcd:</span><br><span class="line">  local:</span><br><span class="line">    dataDir: /var/lib/etcd</span><br><span class="line">imageRepository: registry.aliyuncs.com/google_containers</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: $&#123;k8sVersion&#125;</span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  serviceSubnet: $&#123;serviceSubnet&#125;</span><br><span class="line">  podSubnet: $&#123;podSubnet&#125;</span><br><span class="line">scheduler: &#123;&#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: kubeproxy.config.k8s.io/v1alpha1</span><br><span class="line">kind: KubeProxyConfiguration</span><br><span class="line">mode: ipvs</span><br><span class="line">---</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">cgroupDriver: systemd</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">if [[ -f /root/kubeadm-config.yaml ]];then</span><br><span class="line">        action &quot;生成K8s初始化文件:&quot;</span><br><span class="line">else</span><br><span class="line">        action &quot;生成K8s初始化文件:&quot; false</span><br><span class="line">fi</span><br><span class="line">echo -e &quot;\033[32m# K8s初始化中,时间可能较长,可以使用 tailf k8s_init.log 可追踪整个过程....\033[0m&quot;</span><br><span class="line">echo </span><br><span class="line">kubeadm init --config /root/kubeadm-config.yaml --ignore-preflight-errors=SystemVerification &amp;&gt;k8s_init.log</span><br><span class="line">if [[ $? -eq 0 ]];then</span><br><span class="line">	action &quot;K8s初始化:&quot;</span><br><span class="line">	mkdir -p $HOME/.kube</span><br><span class="line">	sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">	sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line">else</span><br><span class="line">	action &quot;K8s初始化:&quot; false</span><br><span class="line">	exit 5</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k8sNetwork()&#123;</span><br><span class="line">(wget -O /root/calico.yaml https://gitee.com/qinziteng/K8S/raw/master/YMAL/calico.yaml) &amp;&gt;/dev/null</span><br><span class="line">(kubectl apply -f  /root/calico.yaml) &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line">if [[ $? -eq 0 ]];then</span><br><span class="line">	action &quot;K8s网络插件:&quot;</span><br><span class="line">else</span><br><span class="line">	action &quot;K8s网络插件:&quot;  false</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k8sTaint()&#123;</span><br><span class="line">(kubectl taint nodes --all node-role.kubernetes.io/master-) &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line">if [[ $? -eq 0 ]];then</span><br><span class="line">        action &quot;设置Master节点可调度:&quot;</span><br><span class="line">else</span><br><span class="line">        action &quot;设置Master节点可调度:&quot; false</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">confCheck()&#123;</span><br><span class="line">cpuCheck</span><br><span class="line">menoryCheck</span><br><span class="line">networkCheck</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initEnv()&#123;</span><br><span class="line">clear;echo &quot;一键部署单机版K8S脚本&quot;</span><br><span class="line">hostName</span><br><span class="line">stopFirewall</span><br><span class="line">swapOff</span><br><span class="line">timeSync</span><br><span class="line">ipvs</span><br><span class="line">addKernelArg</span><br><span class="line">dockerInstall</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k8s()&#123;</span><br><span class="line">clear;k8sInstall</span><br><span class="line">k8sInit</span><br><span class="line">k8sNetwork</span><br><span class="line">k8sTaint</span><br><span class="line"></span><br><span class="line">echo</span><br><span class="line">echo -e &quot;\033[32m# K8s单机版部署完成,等待Pod全部运行成功即可使用 使用 kubectl get pods -n kube-system 关注Pod状态...\033[0m&quot;</span><br><span class="line">bash</span><br><span class="line">&#125;</span><br><span class="line">confCheck</span><br><span class="line">initEnv</span><br><span class="line">k8s</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>GC—全流程</title>
    <url>/2024/06/29/GC%E2%80%94%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-minorgc-和-full-gc-区别"><strong>1、minorGC 和 Full GC 区别</strong></h4>
<p>     新生代 GC（Minor GC）：指发生新生代的的垃圾收集动作，Minor GC 非常频繁，回收速度一般也比较快。</p>
<p>     老年代 GC（Major GC/Full GC）：指发生在老年代的 GC，出现了 Major GC 经常会伴随至少一次的 Minor GC（并非绝对），Major GC 的速度一般会比 Minor GC 的慢 10 倍以上。</p>
<h4 id="2-minorgc-过程详解"><strong>2、minorGC 过程详解</strong></h4>
<p>     在初始阶段，新创建的对象被分配到 Eden 区，Survivor 的两块空间都为空。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B1.png" alt="图一"></p>
<p>     当Eden区满了的时候，minor garbage 被触发。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B2.png" alt="图二"></p>
<p>     经过扫描与标记，存活的对象被复制到S0，不存活的对象被回收， 并且存活的对象年龄都增大一岁。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B3.png" alt="图三"></p>
<p>     在下一次的 Minor GC 中，Eden 区的情况和上面一致，没有引用的对象被回收，存活的对象被复制到 Survivor区。当 Eden 和 s0区空间满了，S0 的所有的数据都被复制到S1，需要注意的是，在上次 Minor GC 过程中移动到S0 中的两个对象在复制到 S1 后其年龄要加1。此时 Eden 区 S0 区被清空，所有存活的数据都复制到了 S1 区，并且 S1 区存在着年龄不一样的对象，过程如下图所示：</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B4.png" alt="图四"></p>
<p>     再下一次 Minor GC 则重复这个过程，这一次 Survivor 的两个区对换，存活的对象被复制到 S0，存活的对象年龄加1，Eden 区和另一个 Survivor 区被清空。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B5.png" alt="图五"></p>
<p>     再经过几次 Minor GC 之后，当存活对象的年龄达到一个阈值之后（-XX：MaxTenuringThreshold 默认是15），就会被从年轻代 Promotion 到老年代。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B6.png" alt="图六"></p>
<p>     随着 MinorGC 一次又一次的进行，不断会有新的对象被 Promote 到老年代。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B7.png" alt="图七"></p>
<p>     上面基本上覆盖了整个年轻代所有的回收过程。最终，MajorGC将会在老年代发生，老年代的空间将会被清除和压缩(标记-清除或者标记-整理)。从上面的过程可以看出，Eden 区是连续的空间，且 Survivor 总有一个为空。经过一次 GC 和复制，一个 Survivor 中保存着当前还活着的对象，而 Eden 区和另一个 Survivor 区的内容都不再需要了，可以直接清空，到下一次 GC 时，两个 Survivor 的角色再互换。因此，这种方式分配内存和清理内存的效率都极高，这种垃圾回收的方式就是著名的“停止-复制（Stop-and-copy）”清理法（将 Eden 区和一个 Survivor 中仍然存活的对象拷贝到另一个 Survivor 中），这不代表着停止复制清理法很高效，其实，它也只在这种情况下（基于大部分对象存活周期很短的事实）高效，如果在老年代采用停止复制，则是非常不合适的。</p>
<p>     老年代存储的对象比年轻代多得多，而且不乏大对象，对老年代进行内存清理时，如果使用停止-复制算法，则相当低效。一般，老年代用的算法是标记-压缩算法，即：标记出仍然存活的对象（存在引用的），将所有存活的对象向一端移动，以保证内存的连续。在发生 Minor GC 时，虚拟机会检查每次晋升进入老年代的大小是否大于老年代的剩余空间大小，如果大于，则直接触发一次 Full GC，否则，就查看是否设置了-XX:+HandlePromotionFailure（允许担保失败），如果允许，则只会进行 MinorGC，此时可以容忍内存分配失败；如果不允许，则仍然进行Full GC（ 这代表着如果设置-<br>
XX:+Handle PromotionFailure，则触发MinorGC就会同时触发Full GC，哪怕老年代还有很多内存，所以，最好不要这样做）。</p>
<h4 id="3-整体描述"><strong>3、整体描述</strong></h4>
<p>     大部分情况，对象都会首先在 Eden 区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入 s1(“To”)，并且对象的年龄还会加 1( Eden 区 -&gt; Survivor 区后对象的初始年龄变为 1)，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 -XX:MaxTenuringThreshold 来设置。经过这次 GC 后，Eden 区和 From 区已经被清空。这个时候，From 和 To 会交换他们的角色，也就是新的 To 就是上次 GC 前的 From ，新的 From 就是上次 GC 前的 To。不管怎样，都会保证名为 To 的 Survivor 区域是空的。Minor GC 会一直重复这样的过程，直到 To 区被填满，To 区被填满之后，会将所有对象移动到年老代中。</p>
<h4 id="4-gc-触发条件"><strong>4、GC 触发条件</strong></h4>
<p>     Minor GC 触发条件：Eden 区满时。Full GC 触发条件：</p>
<ul>
<li>调用 System.gc 时，系统建议执行 Full GC，但是不必然执行；</li>
<li>老年代空间不足；</li>
<li>方法去空间不足；</li>
<li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存；</li>
<li>由 Eden 区、From Space 区向 To Space 区复制时，对象大小大于 To Space 可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小。</li>
</ul>
<h4 id="5-对象进入老年代的四种情况"><strong>5、对象进入老年代的四种情况</strong></h4>
<p>     假如进行Minor GC时发现，存活的对象在ToSpace区中存不下，那么把存活的对象存入老年代。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B8.png" alt="图八"></p>
<p>     大对象直接进入老年代：假设新创建的对象很大，比如为5M(这个值可以通过PretenureSizeThreshold这个参数进行设置，默认3M)，那么即使Eden区有足够的空间来存放，也不会存放在Eden区，而是直接存入老年代。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B9.png" alt="图九"></p>
<p>     长期存活的对象将进入老年代：此外，如果对象在Eden出生并且经过1次Minor GC后仍然存活，并且能被To区容纳，那么将被移动到To区，并且把对象的年龄设置为1，对象没&quot;熬过&quot;一次Minor GC(没有被回收，也没有因为To区没有空间而被移动到老年代中)，年龄就增加一岁，当它的年龄增加到一定程度(默认15岁，配置参数-XX:MaxTenuringThreshold)，就会被晋升到老年代中。</p>
<p>     动态对象年龄判定：还有一种情况，如果在From空间中，相同年龄所有对象的大小总和大于Survivor空间的一半，那么年龄大于等于该年龄的对象就会被移动到老年代，而不用等到15岁(默认)。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/GC-%E5%85%A8%E6%B5%81%E7%A8%8B/GC%E5%85%A8%E6%B5%81%E7%A8%8B10.png" alt="图十"></p>
<h4 id="6-空间分配担保"><strong>6、空间分配担保</strong></h4>
<p>     在发生 Minor GC 之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么 Minor GC 可以确保是安全的。如果不成立，则虚拟机会查看 HandlerPromotionFailure 这个参数设置的值（ true 或 flase ）是否允许担保失败（如果这个值为 true，代表着 JVM 说，我允许在这种条件下尝试执行 Minor GC，出了事我负责）。</p>
<p>     如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试进行一次 Minor GC，尽管这次 Minor GC 是有风险的；如果小于，或者 HandlerPromotionFailure 为 false，那么这次 Minor GC 将升级为 Full GC。如果老年代最大可用的连续空间大于历次晋升到老年代对象的平均大小，那么 HandlerPromotionFailure 为 true 的情况下，可以尝试进行一次 Minor GC，但这是有风险的，如果本次将要晋升到老年代的对象很多，那么 Minor GC 还是无法执行，此时还得改为 Full GC。</p>
<p>     注意：JDK 6Update 24 之后，只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大 小就会进行 Minor GC，否则进行 Full GC。</p>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>GC—基础知识</title>
    <url>/2024/06/28/GC%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     JVM 的 GC 是指垃圾回收，主要是对堆内存的回收。本文将介绍 JVM 中一次完整的 GC 流程是怎样<br>
的，首先抛出第一个问题，什么样的对象会是 JVM 回收的目标？</p>
<h4 id="1-可达性分析算法-gc-roots"><strong>1、可达性分析算法（GC Roots）</strong></h4>
<p>     有一种引用计数法，可以用来判断对象被引用的次数，如果引用次数为0，则代表可以被回收。这种实现方式比较简单，但对于循环引用的情况束手无策，所以 Java 采用了可达性分析算法。即判断某个对象是否与 GC Roots 的这类对象之间的路径可达，若不可达，则有可能成为回收对象，被判定为不可达的对象要成为可回收对象必须至少经历两次标记过程，如果在这两次标记过程中仍然没有逃脱成为可回收对象的可能性，则基本上就真的成为可回收对象了。在 Java 中，可作为 GC Roots 的对象包括以下几种：</p>
<ul>
<li>虚拟机栈（本地变量表）中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈中引用的对象</li>
</ul>
<h4 id="2-jvm中的堆结构"><strong>2、JVM中的堆结构</strong></h4>
<p>     JVM 中的堆可划分为两大部分，新生代和老年代，大小比例为1:2，如下：</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/GC%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E5%A0%86%E5%8C%BA%E7%9A%84%E5%88%92%E5%88%86%E6%AF%94%E4%BE%8B.png" alt="JVM 分代比例"></p>
<p>     其中，新生代分为 Eden 区和 Survivor 区， Survivor 幸存者区又分为大小相等的两块 from 和 to<br>
区。这便是 JVM 中堆的结构和各部分默认的比例，当然这些比例都可通过对应 JVM 参数来调整。完整的 JMM 如下：</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/GC%E2%80%94%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/JVM%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="JVM 内存模型全景"></p>
<h4 id="2-1-为何新生代要分为三个区"><strong>2.1、为何新生代要分为三个区</strong></h4>
<p>     这里需要介绍新生代的垃圾回收算法——复制算法。该算法的核心是将可用内存按容量划分为大小<br>
相等的两块，每次回收周期只用其中一块，当这一块的内存用完，就将还存活的对象复制到另一块上面，然后把已使用过的内存空间清理掉。</p>
<p>     优点：不必考虑内存碎片问题；效率高。</p>
<p>     缺点：可用容量减少为原来的一半，比较浪费。</p>
<p>     最优设置：根据权威数据分析，90%的对象都是朝生夕死的，所以采用10%的空间用作交换区，因为交换区必须要有等量的两个，所以采用复制算法中新生代中三个区默认分配比例为8:1:1。</p>
<h4 id="2-2-新生代对象的分配和回收"><strong>2.2、新生代对象的分配和回收</strong></h4>
<p>     基本上新的对象优先在 Eden 区分配；</p>
<p>     当 Eden 区没有足够空间时，会发起一次 Minor GC；</p>
<p>     Minor GC 回收新生代采用复制回收算法的改进版本。即：<br>
from 区和 to 区的两个交换区，这两个区只有一个区有数据。采用8:1:1的默认分配比例（-XX:SurvivorRatio默认为8，代表 Eden 区与 Survivor 区的大小比例）</p>
<h4 id="2-3-老年代对象的分配和回收"><strong>2.3、老年代对象的分配和回收</strong></h4>
<p>     老年代的对象一般来自于新生代中的长期存活对象。这里有一概念叫做年龄阈值，每个对象定义了年龄计数器，经<br>
过一次 Minor GC （在交换区）后年龄加1，对象年龄达到15次后将会晋升到老年代，老年代空间不够时进行 Full GC。当然这个参数仍是可以通过 JVM 参数（-XX:MaxTenuringThreshold，默认15）来调整。</p>
<p>     大对象直接进入老年代。即超过 Eden 区空间，或超过一个参数值（-<br>
XX:PretenureSizeThreshold=30m，无默认值）。这样做的目的是避免在Eden区及两个Survivor区之间发生大量的内存复制。</p>
<p>     对象提前晋升到老年代（组团）。动态年龄判定：如果在 Survivor 区中相同年龄所有对象大小总和<br>
大于 Survivor 区大小的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，而无须等到自己<br>
的晋升年龄。</p>
<h4 id="3-jvm完整的gc流程"><strong>3、JVM完整的GC流程</strong></h4>
<p>     对象的正常流程：Eden 区 -&gt; Survivor 区 -&gt; 老年代。</p>
<p>     新生代GC：Minor GC；老年代GC：Full GC，比 Minor GC 慢10倍，JVM 会“stop the world”，严重<br>
影响性能。</p>
<p>     总结：内存区域不够用了，就会引发GC。Minor GC 避免不了，Full GC 尽量避免。<br>
处理方式：保存堆栈快照日志、分析内存泄漏、调整内存设置控制垃圾回收频率，选择合适的垃圾<br>
回收器等。</p>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学算法分类</title>
    <url>/2024/06/18/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%97%E6%B3%95%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%97%E6%B3%95%E5%88%86%E7%B1%BB/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AE%97%E6%B3%95%E5%88%86%E7%B1%BB.png" alt="密码学算法分类"></p>
]]></content>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>三段式国密</title>
    <url>/2024/06/18/%E4%B8%89%E6%AE%B5%E5%BC%8F%E5%9B%BD%E5%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E4%B8%89%E6%AE%B5%E5%BC%8F%E5%9B%BD%E5%AF%86/%E4%B8%89%E6%AE%B5%E5%BC%8F%E5%9B%BD%E5%AF%86%E9%80%9A%E8%AE%AF.png" alt="三段式国密通讯"></p>
<p>     <strong>三段式国密的问题</strong></p>
<p>     1、三段式国密一次一密，每次通信都需要进行 SM2 运算，SM2 运算是对性能的极大损耗；</p>
<p>     2、签名不能代替摘要，签名说的是不可抵赖性，摘要说的是防篡改性；</p>
<p>     3、私钥放在了客户端。</p>
]]></content>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>https工作流程</title>
    <url>/2024/06/16/https%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/HTTPS%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/HTTPS%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.drawio.png" alt="https工作流程"></p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>兜底在系统设计中的重要性</title>
    <url>/2024/04/07/%E8%AE%BA%E5%85%9C%E5%BA%95%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E5%85%9C%E5%BA%95%E5%9C%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" alt="系统调用关系"></p>
<p>     生产环境存在如上图的调用关系，应用 AB 在往下游发起 RPC 调用时，都先去向全局的序列服务申请序列号，序列号用来作为全局流水号或者追踪号。TDSQL 架构如图：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E5%85%9C%E5%BA%95%E5%9C%A8%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/TDSQL%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="TDSQL示意图"></p>
<p>     三周前，TDSQL 做了序列服务数据库的机房迁移，从甲机房迁移到了乙机房，当晚验证没有问题。但是三周过后，硬件负载 F5 出了问题，导致 B 获取序列失败。由于 B 在实现上强依赖于序列服务，序列服务，整个 B 系统的所有交易都走不通了。但是 A 仍然可以正常发起 RPC 调用，因为 A 在实现上，如果调用失败，兜底的方案是会在本地生成序列。</p>
<p>     由于 A 应用依赖于 B 应用，而 B 缺少类似于 A 的兜底策略，导致整体对客的服务全都不可用。</p>
<p>     事实上，序列号只不过是用来追踪程序的一个功能，A 应用的情况，就算不走全局序列服务来生成，本地生成一个序列号也没有任何影响，只不过序列服务那边溯源的时候查不到这笔交易。但是总好过 B 应用，在序列服务出问题的时候，连核心的交易都走不通要好。</p>
]]></content>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>一个粗心的Java并发问题</title>
    <url>/2024/03/15/%E4%B8%80%E4%B8%AA%E7%B2%97%E5%BF%83%E7%9A%84Java%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E4%B8%80%E4%B8%AA%E7%B2%97%E5%BF%83%E7%9A%84Java%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0.jpg" alt="问题描述"><br>
<img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E4%B8%80%E4%B8%AA%E7%B2%97%E5%BF%83%E7%9A%84Java%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/%E9%97%AE%E9%A2%98%E8%AF%A6%E6%83%85.jpg" alt="问题详情"><br>
<img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E4%B8%80%E4%B8%AA%E7%B2%97%E5%BF%83%E7%9A%84Java%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/%E5%BE%AE%E8%A7%82%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%83%85%E5%86%B5.jpg" alt="微观场景下的多线程执行情况"><br>
<img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E4%B8%80%E4%B8%AA%E7%B2%97%E5%BF%83%E7%9A%84Java%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/%E4%BF%AE%E5%A4%8D%E4%B9%8B%E5%90%8E%E7%9A%84%E4%BB%A3%E7%A0%81.jpg" alt="修复之后的代码"></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>http是个高冷的女孩</title>
    <url>/2024/03/07/http%E6%98%AF%E4%B8%AA%E9%AB%98%E5%86%B7%E7%9A%84%E5%A5%B3%E5%AD%A9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E7%AC%94%E8%AE%B0/http%E6%98%AF%E4%B8%AA%E9%AB%98%E5%86%B7%E7%9A%84%E5%A5%B3%E5%AD%A9/http%E6%98%AF%E4%B8%AA%E9%AB%98%E5%86%B7%E7%9A%84%E5%A5%B3%E5%AD%A9.jpg" alt="http是个高冷的女孩"></p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网发展的历程</title>
    <url>/2024/03/03/%E4%BA%92%E8%81%94%E7%BD%91%E5%8F%91%E5%B1%95%E7%9A%84%E5%8E%86%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E4%BA%92%E8%81%94%E7%BD%91%E5%8F%91%E5%B1%95%E7%9A%84%E5%8E%86%E7%A8%8B/%E4%BA%92%E8%81%94%E7%BD%91%E5%8E%86%E5%8F%B2.jpeg" alt="互联网发展的历程"></p>
]]></content>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title>String引用传值问题</title>
    <url>/2024/03/01/String%E5%BC%95%E7%94%A8%E4%BC%A0%E5%80%BC%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     Java 中是没有引用传递的，Java 中只有值传递。Java 中所谓的引用传递，也只是传递了&quot;引用变量保存的地址值&quot;。 Java 中判断&quot;引用传递&quot;有没有达到你预期的效果，前提要基于内存模型，并结合你的上下文，根据有没有利用引用变量&quot;传递&quot;的这个地址值去修改实际内存对象的数据来判断。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.zjnu;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 杨海波</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/2/29 20:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> String 引用传值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test01();</span><br><span class="line">        test02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;out&quot;</span>;</span><br><span class="line">        <span class="comment">// str = &quot;out2&quot;;</span></span><br><span class="line">        f01(str);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工程实践表明，java 中没有引用传递，只有值传递。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Java 中所谓的引用传递，也只是传递了&quot;引用变量保存的地址值&quot;，如果无法做到</span></span><br><span class="line"><span class="comment">     * 根据这个引用指向的地址去修改实际对象的值，那么函数外部的实际对象无法被修改。</span></span><br><span class="line"><span class="comment">     * 特别的，String 是不可变对象：</span></span><br><span class="line"><span class="comment">     * 在 test01 这个例子中， 外部的 &#x27; str = &quot;out2&quot;;  这行代码只是在方法区的</span></span><br><span class="line"><span class="comment">     * 字符串常量池新建了一个字符串常量对象 &quot;out2&quot;,并将该对象的地址赋值给引用变</span></span><br><span class="line"><span class="comment">     * 量 str。内部的 str = &quot;in&quot;; 也是同理，但是当 f01 函数执行 str = &quot;in&quot;; </span></span><br><span class="line"><span class="comment">     * 这行代码时，引用变量保存的值（该值是尊从值传递的）是新的字符串常量对象 &quot;in&quot; </span></span><br><span class="line"><span class="comment">     * 的地址，当 f01 执行完毕，这个值尊从函数作用域规则消失了。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f01</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        str = <span class="string">&quot;in&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决办法如下</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringWrapper</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWrapper</span>(<span class="string">&quot;out&quot;</span>);</span><br><span class="line">        f02(str);</span><br><span class="line">        System.out.println(str.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">f02</span><span class="params">(StringWrapper str)</span> &#123;</span><br><span class="line">        str.value = <span class="string">&quot;in&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StringWrapper</span> &#123;</span><br><span class="line">        <span class="comment">// 实际值</span></span><br><span class="line">        <span class="keyword">public</span> String value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">StringWrapper</span><span class="params">(String value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生之于服务端开发</title>
    <url>/2024/02/29/%E4%BA%91%E5%8E%9F%E7%94%9F%E4%B9%8B%E4%BA%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     每个服务端开发人员都应该了解云原生。云原生视角，是一个全栈的服务端视角—自下而上从硬件设备到应用架构。在云原生视角下回过头来看服务端开发的问题，有点降维打击的感觉。现在看服务端开发的问题，再复杂的问题，也只是局部的一个点，很小的问题。</p>
]]></content>
      <tags>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>像专业开发人员那样调试程序</title>
    <url>/2024/02/09/%E5%83%8F%E4%B8%93%E4%B8%9A%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E9%82%A3%E6%A0%B7%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer8" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer8"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/像专业开发人员那样调试程序/像专业开发人员那样调试程序.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>进程间通信的5种方式</title>
    <url>/2024/02/04/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E7%9A%845%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以下是类UNIX操作系统（如Linux）中常见的5种通讯机制。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E7%9A%845%E7%A7%8D%E6%96%B9%E5%BC%8F/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E7%9A%845%E7%A7%8D%E6%96%B9%E5%BC%8F.jpeg" alt="进程间通信的5种方式"></p>
<p>     管道（Pipes）:管道是指连接两个或多个进程的输入和输出，常用于流式传输数据。例如，shell脚本通常使用管道运算符“|” 将命令链接在一起：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /var/log/syslog | grep &#x27;error&#x27; | less</span><br></pre></td></tr></table></figure>
<p>     消息队列（Message Queues）：消息队列通过允许进程以消息的形式交换数据来提供异步通信。写入队列的消息按先进先出的顺序处理。</p>
<p>例如，服务器可能将作业分派到队列中，消费守护进程从中拉取并独立处理。</p>
<p>     信号（Signals）：信号提供了一种通知系统，能够让进程立即收到重要事件，如被强制终止。例如，SIGKILL提供了一种可靠的方法来结束无响应的应用程序。</p>
<p>     信号量（Semaphores）：信号量是是一种在多线程环境中使用的同步机制，旨在确保多个线程不会同时访问同一块共享内存区域或其他临界资源。</p>
<p>     共享内存（Shared Memory）：共享内存是允许直接访问共享内存区域，以便多个进程可以高效地读取和修改数据，而无需复制。一个示例用例是处理大型图像帧的程序，其中多个进程可以同时访问和处理图像的不同部分。</p>
<p>     这些IPC机制有时被组合在一起以实现高效的进程通信。</p>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTPS是如何工作的</title>
    <url>/2024/02/04/HTTPS%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     超文本传输协议安全（HTTPS）是超文本传输协议（HTTP）的扩展。</p>
<p>     HTTPS使用传输层安全协议（TLS）来传输加密数据。如果数据在网上被劫持，劫持者得到的只是二进制代码。那么数据是如何加密和解密的呢？</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTPS%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/HTTPS%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84.jpeg" alt="HTTPS是如何工作的"></p>
<ul>
<li>
<p>步骤1 - 客户端（浏览器）和服务器建立TCP连接。</p>
</li>
<li>
<p>步骤2 - 客户端向服务器发送“客户端hello”。该消息包含一组必要的加密算法（密码套件）以及它可以支持的最新TLS版本。服务器通过发送“服务器hello”来响应，以便浏览器知道它是否支持算法和TLS版本。服务器然后向客户端发送SSL证书。证书包含公钥、主机名、过期日期等。客户端验证证书。</p>
</li>
<li>
<p>步骤3 - 在验证SSL证书后，客户端生成会话密钥并使用公钥对其进行加密。服务器接收加密的会话密钥并使用私钥进行解密。</p>
</li>
<li>
<p>步骤4 - 现在客户端和服务器都持有相同的会话密钥（对称加密），加密数据通过安全的双向通道进行传输。</p>
</li>
</ul>
<p>     为什么HTTPS在数据传输期间会切换到对称加密？主要有两个原因：</p>
<ul>
<li>
<p>1、安全：非对称加密只适用于单向。这意味着如果服务器尝试将加密数据发送回客户端，任何人都可以使用公钥解密数据。</p>
</li>
<li>
<p>2、服务器资源：非对称加密增加了大量的数学开销。它不适合长会话中的数据传输。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>MQ组件的封装</title>
    <url>/2024/01/31/MQ%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     之前给人封装的一套消息发送工具。类层次设计得挺有感觉的。</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E6%9C%8D%E5%8A%A1%E7%AB%AF/MQ%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85/MQ%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85.png" alt="MQ组件的封装"></p>
]]></content>
      <tags>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 开发常见面试知识点梳理</title>
    <url>/2023/12/21/%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1、Java 部分</span><br><span class="line"></span><br><span class="line">设计模式：</span><br><span class="line">    单例模式（懒汉式、饿汉式、双重锁）</span><br><span class="line">    工厂模式（简单工厂、工厂方法、抽象工厂）</span><br><span class="line">    代理模式（静态代理、动态代理）</span><br><span class="line">    策略模式（解耦算法与业务）</span><br><span class="line">    观察者模式（发布-订阅模式）</span><br><span class="line">    装饰者模式（功能扩展）</span><br><span class="line"></span><br><span class="line">并发：</span><br><span class="line">    Java 线程基础（线程创建、状态、生命周期）</span><br><span class="line">    线程池（ThreadPoolExecutor 原理、线程池优化）</span><br><span class="line">    并发工具类（CountDownLatch、CyclicBarrier、Semaphore）</span><br><span class="line">    锁机制（synchronized、ReentrantLock、公平锁、读写锁）</span><br><span class="line">    CAS 与原子操作（Atomic 类的实现原理、ABA 问题）</span><br><span class="line">    volatile 与内存可见性（happens-before 原则）</span><br><span class="line">    AQS（AbstractQueuedSynchronizer）原理（锁的底层实现）</span><br><span class="line">    并发容器（ConcurrentHashMap 原理、CopyOnWriteArrayList）</span><br><span class="line"></span><br><span class="line">集合框架：</span><br><span class="line">    List（ArrayList、LinkedList 区别）</span><br><span class="line">    Set（HashSet、TreeSet、LinkedHashSet）</span><br><span class="line">    Map（HashMap、TreeMap、LinkedHashMap、ConcurrentHashMap）</span><br><span class="line">    Fail-fast 与 fail-safe（遍历过程中修改问题）</span><br><span class="line">    HashMap 的底层原理（链表转红黑树的条件）</span><br><span class="line"></span><br><span class="line">JVM：</span><br><span class="line">    JVM 内存模型（堆、栈、方法区、程序计数器）</span><br><span class="line">    类加载机制（双亲委派模型、类加载器）</span><br><span class="line">    垃圾回收算法（标记-清除、标记-整理、复制算法）</span><br><span class="line">    垃圾回收器（Serial、Parallel、CMS、G1 原理）</span><br><span class="line">    JVM 性能调优（JVM 参数、内存分析工具、GC 日志分析）</span><br><span class="line">    类文件结构（字节码结构、方法区细节）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、框架部分</span><br><span class="line"></span><br><span class="line">Spring：</span><br><span class="line">    Spring IOC 容器（Bean 的生命周期、依赖注入）</span><br><span class="line">    AOP 原理（动态代理、CGLib 实现）</span><br><span class="line">    事务管理（声明式事务、事务传播机制）</span><br><span class="line">    Spring MVC（请求处理流程、DispatcherServlet、HandlerMapping）</span><br><span class="line">    Spring Boot（自动配置原理、嵌入式容器）</span><br><span class="line">    Spring Cloud（服务注册与发现、负载均衡、断路器）</span><br><span class="line"></span><br><span class="line">MyBatis：</span><br><span class="line">    MyBatis 基础（SQL 映射、动态 SQL、缓存机制）</span><br><span class="line">    一级缓存、二级缓存的原理和区别</span><br><span class="line">    MyBatis 插件机制（拦截器实现、性能优化）</span><br><span class="line">    性能调优（懒加载、批量处理、SQL 优化）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、缓存</span><br><span class="line"></span><br><span class="line">Redis 的基本数据结构：</span><br><span class="line">    String、List、Set、Sorted Set、Hash、Bitmap、HyperLogLog、Geo</span><br><span class="line"></span><br><span class="line">大Key 和 热Key：</span><br><span class="line">    概念，如何解决</span><br><span class="line"></span><br><span class="line">大Key问题：</span><br><span class="line">    如何拆分大Key，避免阻塞 Redis 线程</span><br><span class="line"></span><br><span class="line">热Key问题：</span><br><span class="line">    热点数据导致单节点压力过大，如何通过分片或缓存穿透防止单点瓶颈</span><br><span class="line"></span><br><span class="line">持久化：</span><br><span class="line">    RDB（快照）机制（优点、缺点、触发条件）</span><br><span class="line">    AOF（Append Only File）机制（优点、缺点、重写策略）</span><br><span class="line">    混合持久化（RDB+AOF 的结合）</span><br><span class="line"></span><br><span class="line">Redis 高可用：</span><br><span class="line">    主从复制（异步复制的原理）</span><br><span class="line">    哨兵模式（自动故障转移）</span><br><span class="line">    Redis Cluster（分片、槽位映射、Gossip 协议）</span><br><span class="line">    持久化与高可用的权衡</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、MySQL</span><br><span class="line"></span><br><span class="line">事务相关：</span><br><span class="line">    ACID 原则（原子性、一致性、隔离性、持久性）</span><br><span class="line">    事务隔离级别（读未提交、读已提交、可重复读、串行化）</span><br><span class="line">    锁机制（共享锁、排他锁、行锁、表锁）</span><br><span class="line">    MVCC（多版本并发控制，InnoDB 如何实现可重复读）</span><br><span class="line"></span><br><span class="line">死锁：</span><br><span class="line">    概念及其解决办法（死锁检测、回滚机制）</span><br><span class="line"></span><br><span class="line">SQL 优化：</span><br><span class="line">    索引设计与优化（覆盖索引、最左前缀原则、索引下推）</span><br><span class="line">    慢查询分析（explain、索引扫描、全表扫描）</span><br><span class="line">    分库分表（垂直拆分、水平拆分、分片策略）</span><br><span class="line">    读写分离（主从复制、读从库、写主库）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5、消息队列</span><br><span class="line"></span><br><span class="line">消息类型：</span><br><span class="line">    点对点（Queue）：消息只能由一个消费者消费</span><br><span class="line">    发布-订阅（Topic）：消息广播给多个订阅者</span><br><span class="line">    延时消息：如 RabbitMQ 的 TTL 队列或 Kafka 延时消息</span><br><span class="line">    事务消息：RocketMQ 事务消息，用于实现分布式事务</span><br><span class="line"></span><br><span class="line">消息队列架构：</span><br><span class="line">    Broker、Producer、Consumer 模型（生产者、消费者、Broker 的架构）</span><br><span class="line"></span><br><span class="line">消息确认机制：</span><br><span class="line">    消息成功消费的确认流程，避免消息丢失</span><br><span class="line"></span><br><span class="line">负载均衡：</span><br><span class="line">    如何平衡消费者之间的消费压力</span><br><span class="line"></span><br><span class="line">可靠投递：</span><br><span class="line">    消息持久化（消息落盘，防止 Broker 宕机导致消息丢失）</span><br><span class="line">    幂等性保障（如何避免重复消费的问题，如幂等消费逻辑）</span><br><span class="line">    消息投递重试机制（失败后重试策略，死信队列）</span><br><span class="line"></span><br><span class="line">消息堆积：</span><br><span class="line">    消息积压问题：由于消费速度跟不上生产速度，消息在队列中堆积</span><br><span class="line">    如何应对：增加消费者并行消费能力、削峰填谷</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6、分布式</span><br><span class="line"></span><br><span class="line">CAP 理论：</span><br><span class="line">    Consistency：一致性</span><br><span class="line">    Availability：可用性</span><br><span class="line">    Partition Tolerance：分区容错性</span><br><span class="line">    CAP 不可能三角：只能同时满足两者，典型场景举例</span><br><span class="line"></span><br><span class="line">微服务架构：</span><br><span class="line">    服务拆分与通信（REST、RPC、gRPC）</span><br><span class="line">    服务发现（Zookeeper、Eureka、Consul）</span><br><span class="line">    负载均衡（Ribbon、Nginx、Spring Cloud LoadBalancer）</span><br><span class="line">    服务容错（Hystrix、Sentinel 实现熔断降级）</span><br><span class="line"></span><br><span class="line">服务治理：</span><br><span class="line">    配置管理（Spring Cloud Config、Nacos）</span><br><span class="line">    服务监控（Prometheus、Grafana、Sleuth）</span><br><span class="line">    链路追踪（Zipkin、Jaeger，分布式追踪系统）</span><br><span class="line"></span><br><span class="line">7、项目准备</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>日志框架简史</title>
    <url>/2023/12/06/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E7%AE%80%E5%8F%B2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer19" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer19"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/日志框架简史/日志框架简史.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的算法时间复杂度由小到大依次为</title>
    <url>/2023/12/06/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E7%94%B1%E5%B0%8F%E5%88%B0%E5%A4%A7%E4%BE%9D%E6%AC%A1%E4%B8%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>O(1)常数阶 &lt; O(logn)对数阶 &lt; O(n)线性阶 &lt; O(nlogn)线性对数阶 &lt; O(n^2)平方阶 &lt; O(n^3)(立方阶) &lt; O(2^n) (指数阶) &lt; O(n!)</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/%E5%A4%8D%E6%9D%82%E5%BA%A6.png" alt="常见的算法时间复杂度"></p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>浅述Java对象的内存布局</title>
    <url>/2023/12/05/%E6%B5%85%E8%BF%B0Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     Java的实例对象、数组对象在内存中的组成包括如下三部分：对象头Hearder、实例数据、内存填充。示意图如下所示：</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E6%B5%85%E8%BF%B0Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/%E5%AF%B9%E8%B1%A1%E5%A4%B4%E7%BB%93%E6%9E%84.png" alt="对象头结构"></p>
<ul>
<li>对象头：其主要包括两部分数据：Mark Word、Class对象指针。特别地对于数组对象而言，其还包括了数组长度数据。在64位的HotSpot虚拟机下，Mark Word占8个字节，其记录了Hash Code、GC信息、锁信息等相关信息；而Class对象指针则指向该实例的Class对象，在开启指针压缩的情况下占用4个字节，否则占8个字节；如果其是一个数组对象，则还需要4个字节用于记录数组长度信息。这里列出64位HotSpot虚拟机Mark Word的具体含义，以供参考。需要注意的是在下图的Mark Word中，左侧为高字节，右侧为低字节。</li>
</ul>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E6%B5%85%E8%BF%B0Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/%E5%AF%B9%E8%B1%A1%E5%A4%B4%E7%BB%86%E8%8A%82.jpg" alt="对象头细节"></p>
<ul>
<li>
<p>实例数据：用于存放该对象的实例数据。</p>
</li>
<li>
<p>内存填充：64位的HotSpot要求Java对象地址按8字节对齐，即每个对象所占内存的字节数必须是8字节的整数倍。因此Java对象需要通过内存填充来满足对齐要求。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>三高：高可用、高性能、高扩展</title>
    <url>/2023/12/04/%E4%B8%89%E9%AB%98%EF%BC%9A%E9%AB%98%E5%8F%AF%E7%94%A8%E3%80%81%E9%AB%98%E6%80%A7%E8%83%BD%E3%80%81%E9%AB%98%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     我们经常被要求设计高可用性、高可扩展性和高性能。上图包含了针对“三高”的常见解决方案。</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E4%B8%89%E9%AB%98%EF%BC%9A%E9%AB%98%E5%8F%AF%E7%94%A8%E3%80%81%E9%AB%98%E6%80%A7%E8%83%BD%E3%80%81%E9%AB%98%E6%89%A9%E5%B1%95/640.gif" alt="git 分支模型"></p>
<p><strong>高可用性</strong></p>
<p>     这意味着我们需要确保系统高水平的正常运行时间。我们经常将设计目标描述为“3个9”或“4个9”。“4个9”，即99.99%的正常运行时间，意味着服务每天只能停机8.64秒。 为了实现高可用性，我们需要在系统中增加冗余节点。 有以下几种方法可以做到这一点：</p>
<ul>
<li>
<p>hot-hot结构：两个实例接收相同的输入并将输出发送到下游服务。如果其中一个实例停机，另一个实例可以立即接管。由于双方都向下游发送输出，下游系统需要进行重复数据删除。</p>
</li>
<li>
<p>hot-warm结构：两个实例接收相同的输入，只有hot实例将输出发送到下游服务。如果hot实例发生故障，warm实例将接管并开始向下游服务发送输出。</p>
</li>
<li>
<p>single-leader Cluster：一个leader实例从上游系统接收数据并复制到其他副本。</p>
</li>
<li>
<p>Leaderless cluster：在这种类型的集群中没有领导者。任何写入操作都会被复制到其他实例。只要写入实例的数量加上读取实例的数量大于实例的总数，我们就会得到有效数据。</p>
</li>
</ul>
<p><strong>高性能</strong></p>
<p>     这意味着服务需要在一段时间内处理大量请求。常用的指标是QPS（每秒查询数）或TPS（每秒事务数）。为了实现高性能，我们经常在架构中添加缓存，这样请求就可以在不命中数据库或磁盘等较慢的I/O设备的情况下返回。我们还可以增加计算密集型任务的线程数量。然而，添加太多线程可能会降低性能。最后，我们需要识别系统中的瓶颈并提高其性能。使用异步处理通常可以有效地隔离繁重的组件。</p>
<p><strong>高可扩展性</strong></p>
<p>     这意味着系统可以快速轻松地扩展以容纳更多容量（横向可扩展性）或更多功能（纵向可扩展性）。通常，我们会观察响应时间以决定是否需要扩展系统。为了实现高可扩展性，重要的是将服务的职责分离。为此，微服务被广泛采用。我们还利用服务注册表和负载均衡器将请求路由到适当的实例。</p>
]]></content>
      <tags>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>Hotspot源码目录结构</title>
    <url>/2023/12/04/Hotspot%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Hotspot%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/Hotspot%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="Hotspot源码目录结构"></p>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>数学地图</title>
    <url>/2023/12/02/%E6%95%B0%E5%AD%A6%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/%E6%95%B0%E5%AD%A6%E5%9C%B0%E5%9B%BE/TheMapofMathematics.png" alt="git 分支模型"></p>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>对修饰符final和static的浅析</title>
    <url>/2023/12/01/%E5%AF%B9%E4%BF%AE%E9%A5%B0%E7%AC%A6final%E5%92%8Cstatic%E7%9A%84%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>1、static修饰符</strong></p>
<p>     被static修饰的变量和方法，被类的所有实例所共享。加载类时只分配一次内存。</p>
<ul>
<li>静态变量：可以直接通过类名来访问 Person.a;</li>
<li>态方法：可以直接通过类名来访问 Person.say();静态方法内，可以访问静态变量，但是不能使用this关键字且不能访问实例变量，因为被所有实例所共有,无法判断属于哪个实例对象；</li>
<li>静态代码块：java虚拟机在加载类时就执行静态代码块。</li>
</ul>
<p><strong>2、final修饰符</strong></p>
<p>     有final修饰表示最终（不可再修改）的意思：</p>
<ul>
<li>final类：不能被继承（即没有子类）；</li>
<li>final方法：不能被子类的方法覆盖（final不用来修饰构造方法，父类与子类之间的构造方法不存在覆盖关系，final修饰是没有意义的）；</li>
<li>final修饰的变量：即常量，常量只能被赋值一次，之后不能改变。</li>
</ul>
<p><strong>3、静态常量</strong></p>
<p>     静态常量属于编译时常量（final static int a=2*3;）在编译的时就能计算出具体的值)，在编译的时候将这个值就放入到常量池中，a被访问时类是不会被初始化的（这是类的被动使用）。访问类的静态变量或静态方法的时候类会被初始化（这是类的主动使用）。而静态变量只会在类初始化的时候才会被赋值。具体细节请参考“类的生命周期”：加载（堆区、方法区）——连接（验证、准备（静态变量分配内存、设置默认初始值为0）、解析（符号引用替换为直接引用，即指针指向方法区的内存位置））——初始化（程序对类或接口主动使用的时候才会被初始化）。</p>
<p><strong>4、类的初始化化时机</strong></p>
<p>     类的初始化阶段java虚拟机会为类的static静态变量赋予初始值(这和准备阶段设置默认初始值为0是不一样的)。只有类的主动使用才会初始化类。</p>
<p><strong>4.1、类的主动使用</strong></p>
<ul>
<li>
<p>创建类的实例：用new语句创建实例 Person ps=new Person()。</p>
</li>
<li>
<p>调用类的静态变量或对静态变量赋值：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Person&#123; </span><br><span class="line">    //这和final static int a=2*3;是有区别的</span><br><span class="line">    static int a=2*3;  </span><br><span class="line">    </span><br><span class="line">    static&#123;  </span><br><span class="line">        //Java在定义一个类的时候里面只能放方法和属性，这是规定死了的。System.out.println()是在调用一个叫println的函数，这里是函数的调用而不是类里面定义一个函数。所以需要用static代码块</span><br><span class="line">        System.out.println(&quot;init Person&quot;); //static声明的静态代码块，使得类在初始化的时候会被调用而不需要创建实例对象。它这时候就不在任何一个方法中。</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>     调用的时候写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//这样就可以在不new一个Person实例的情况下，来初始化Person类了。调用类的静态方法</span><br><span class="line">System.out.println(&quot;a=&quot;+Person.a);</span><br></pre></td></tr></table></figure>
<ul>
<li>调用java API中的反射方法：Class.forName(“Person”);</li>
<li>初始化子类的时候会先初始化父类(但&quot;父类&quot;是接口的时候，不会先初始化它所实现的接口的，只有在程序在使用接口的静态变量时才会使静态接口初始化)。</li>
<li>Java 虚拟机启动时被标明为启动类的类。</li>
</ul>
<p><strong>4.2、类的被动使用</strong></p>
<ul>
<li>final 类型的静态变量在编译的时候能计算出值（即编译时常量，在编译的时候将这个值就放入到常量池中了）：注： final类型的静态变量在编译的时候不能计算出变量的值(即运行时常量)的时候是会被初始化的</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//变量a是编译时常量</span><br><span class="line">final static int a=2*3;                 </span><br><span class="line">//变量a不是是编译时常量（即运行时常量）</span><br><span class="line">final static int a=(int)Math.random();  </span><br></pre></td></tr></table></figure>
<ul>
<li>&quot;父类&quot;是接口的时候，不会先初始化它所实现的接口的，只有在程序在使用接口的静态变量时才会使静态接口初始化。</li>
<li>ClassLoader类的loadClass(“Person”)方法的时候，只是对类的加载，不是初始Class.forName(“Person”);才会初始化。</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript执行上下文</title>
    <url>/2023/11/30/JavaScript%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>1、什么是执行上下文？</strong></p>
<p>     简而言之，执行上下文是计算和执行 JavaScript 代码环境的抽象概念。每当 Javascript 代码在运行的时候，它都是在执行上下文中运行。一个执行上下文包含：scope(作用域)、variable object(变量对象)、this value(this 值)。</p>
<p><strong>2、执行上下文的类型</strong></p>
<p>     JavaScript 中有三种执行上下文类型：</p>
<ul>
<li>全局执行上下文：这是默认或者说基础的上下文，任何不在函数内部的代码都在全局上下文中。它会执行两件事：创建一个全局的 window 对象（浏览器的情况下），并且设置 this 的值等于这个全局对象。一个程序中只会有一个全局执行上下文。</li>
<li>函数执行上下文：每当一个函数被调用时, 都会为该函数创建一个新的上下文。每个函数都有它自己的执行上下文，不过是在函数被调用时创建的。函数上下文可以有任意多个。每当一个新的执行上下文被创建，它会按定义的顺序（将在后文讨论）执行一系列步骤。</li>
<li>Eval 函数执行上下文：执行在 eval 函数内部的代码也会有它属于自己的执行上下文，但由于 JavaScript 开发者并不经常使用 eval，所以在这里我不会讨论它。</li>
</ul>
<p><strong>3、执行栈</strong></p>
<p>     执行栈，也就是在其它编程语言中所说的“调用栈”，是一种拥有 LIFO（后进先出）的数据结构，被用来存储代码运行时创建的所有执行上下文。</p>
<p>     当 JavaScript 引擎第一次遇到你的脚本时，它会创建一个全局的执行上下文并且压入当前执行栈。每当引擎遇到一个函数调用，它会为该函数创建一个新的执行上下文并压入栈的顶部。引擎会执行处于栈顶的执行上下文的函数。当该函数执行结束时，执行上下文从栈中弹出，控制流程到达当前栈中的下一个上下文。让我们通过下面的代码示例来理解：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a = &#x27;Hello World!&#x27;;</span><br><span class="line"></span><br><span class="line">function first() &#123;</span><br><span class="line">  console.log(&#x27;Inside first function&#x27;);</span><br><span class="line">  second();</span><br><span class="line">  console.log(&#x27;Again inside first function&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function second() &#123;</span><br><span class="line">  console.log(&#x27;Inside second function&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">first();</span><br><span class="line">console.log(&#x27;Inside Global Execution Context&#x27;);</span><br></pre></td></tr></table></figure>
<p>     当上述代码在浏览器加载时，JavaScript 引擎创建了一个全局执行上下文并把它压入当前执行栈。当遇到 first() 函数调用时，JavaScript 引擎为该函数创建一个新的执行上下文并把它压入当前执行栈的顶部。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/JavaScript%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/%E8%BF%90%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.png" alt="IP报文结构"></p>
<p>     当从 first() 函数内部调用 second() 函数时，JavaScript 引擎为 second() 函数创建了一个新的执行上下文并把它压入当前执行栈的顶部。当 second() 函数执行完毕，它的执行上下文会从当前栈弹出，并且控制流程到达下一个执行上下文，即 first() 函数的执行上下文。当 first() 执行完毕，它的执行上下文从栈弹出，控制流程到达全局执行上下文。一旦所有代码执行完毕，JavaScript 引擎从当前栈中移除全局执行上下文。</p>
<p><strong>4、怎么创建执行上下文</strong></p>
<p>     到现在，我们已经看过 JavaScript 怎样管理执行上下文了，现在让我们了解 JavaScript 引擎是怎样创建执行上下文的。创建执行上下文有两个阶段：1） 创建阶段 和 2） 执行阶段。</p>
<p><strong>4.2、执行上下文的创建阶段（ES5及其以后规范）</strong></p>
<p>     创建阶段做三件事：1）this 值的决定，即我们所熟知的 this 绑定。2）创建词法环境组件。3）创建变量环境组件。</p>
<p>     所以执行上下文的伪代码表示可以为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExecutionContext = &#123;</span><br><span class="line">  ThisBinding = &lt;this value&gt;,</span><br><span class="line">  LexicalEnvironment = &#123; ... &#125;,</span><br><span class="line">  VariableEnvironment = &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>4.2.1、this 绑定</strong></p>
<p>     在全局执行上下文中，this 的值指向全局对象。(在浏览器中，this引用 Window 对象)。在函数执行上下文中，this 的值取决于该函数是如何被调用的。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined（在严格模式下）。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let foo = &#123;           // PS:对象的花括号理解为作用域可能不太妥，理解为&quot;属于&quot;也许更为准确</span><br><span class="line">  baz: function() &#123;</span><br><span class="line">      console.log(this);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.baz();   // &#x27;this&#x27; 引用 &#x27;foo&#x27;, 因为 &#x27;baz&#x27; 被</span><br><span class="line">             // 对象 &#x27;foo&#x27; 调用</span><br><span class="line">let bar = foo.baz;</span><br><span class="line"></span><br><span class="line">bar();       // &#x27;this&#x27; 指向全局 window 对象，因为</span><br><span class="line">             // 没有指定引用对象</span><br></pre></td></tr></table></figure>
<p><strong>4.2.2、词法环境</strong></p>
<p>     官方的 ES6 文档把词法环境定义为：</p>
<p>     <strong>词法环境是一种规范类型，基于 ECMAScript 代码的词法嵌套结构来定义标识符和具体变量和函数的关联。一个词法环境由环境记录器和一个可能的引用outer词法环境的空值组成。</strong></p>
<p>     简单来说词法环境是一种持有标识符—变量映射的结构。（这里的标识符指的是变量/函数的名字，而变量是对实际对象[包含函数类型对象]或原始数据的引用）。</p>
<p>     现在，在词法环境的内部有两个组件：(1) 环境记录器：环境记录器是存储变量和函数声明的实际位置。 (2) 一个外部环境的引用：外部环境的引用意味着它可以访问其父级词法环境（作用域）。</p>
<p>     词法环境有两种类型：1）全局词法环境（在全局执行上下文中）是没有外部环境引用的词法环境。全局环境的外部环境引用是 null。它拥有内建的 Object/Array/等、在环境记录器内的原型函数（关联全局对象，比如 window 对象）还有任何用户定义的全局变量，并且 this的值指向全局对象。2）函数词法环境，函数内部用户定义的变量存储在函数环境记录器中。并且引用的外部环境可能是全局环境，或者任何包含此内部函数的外部函数。</p>
<p>     环境记录器也有两种类型：1）声明式环境记录器存储变量、函数和参数；2）对象环境记录器用来定义出现在全局上下文中的变量和函数的关系。简而言之，在全局环境中，环境记录器是对象环境记录器。在函数环境中，环境记录器是声明式环境记录器。</p>
<p>     对于函数环境，声明式环境记录器还包含了一个传递给函数的 arguments 对象（此对象存储索引和参数的映射）和传递给函数的参数的 length。抽象地讲，词法环境在伪代码中看起来像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GlobalExectionContext = &#123;</span><br><span class="line">  LexicalEnvironment: &#123;</span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Object&quot;,</span><br><span class="line">      // 在这里绑定标识符</span><br><span class="line">    &#125;</span><br><span class="line">    outer: &lt;null&gt;    // 全局词法环境的外部环境引用为null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FunctionExectionContext = &#123;</span><br><span class="line">  LexicalEnvironment: &#123;</span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Declarative&quot;,</span><br><span class="line">      // 在这里绑定标识符</span><br><span class="line">    &#125;</span><br><span class="line">    outer: &lt;Global or outer function environment reference&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>4.2.3、变量环境</strong></p>
<p>     变量环境同样是一个词法环境，所以它有着上面定义的词法环境的所有属性，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。在 ES6 中，词法环境组件和变量环境组件的一个不同点就是前者被用来存储函数声明和变量（let 和 const）绑定，而后者只用来存储 var 变量绑定。我们看点样例代码来理解上面的概念：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a = 20;</span><br><span class="line">const b = 30;</span><br><span class="line">var c;</span><br><span class="line"></span><br><span class="line">function multiply(e, f) &#123;</span><br><span class="line"> var g = 20;</span><br><span class="line"> return e * f * g * a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c = multiply(20, 30);</span><br></pre></td></tr></table></figure>
<p>     运行上述JS代码所创建的执行上下文的伪代码看起来像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 全局执行上下文</span><br><span class="line">GlobalExectionContext = &#123;</span><br><span class="line">  // this 绑定  </span><br><span class="line">  ThisBinding: &lt;Global Object&gt;,</span><br><span class="line">  // 词法环境</span><br><span class="line">  LexicalEnvironment: &#123;</span><br><span class="line">    // 环境记录器(对象环境记录器)  </span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Object&quot;,</span><br><span class="line">      // 标识符绑定，词法环境对应的是let,const还有函数声明</span><br><span class="line">      a: &lt; uninitialized &gt;,</span><br><span class="line">      b: &lt; uninitialized &gt;,</span><br><span class="line">      multiply: &lt; func &gt;</span><br><span class="line">    &#125;</span><br><span class="line">    // 外部环境引用(全局执行上下文的外部环境引用都是null)</span><br><span class="line">    outer: &lt;null&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 变量环境</span><br><span class="line">  VariableEnvironment: &#123;</span><br><span class="line">    // 环境记录器(全局执行上下文的词法环境和变量环境的环境记录器都是对象环境记录器)  </span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Object&quot;,</span><br><span class="line">      // 在这里绑定标识符</span><br><span class="line">      c: undefined,</span><br><span class="line">    &#125;</span><br><span class="line">    outer: &lt;null&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 函数执行上下文</span><br><span class="line">FunctionExectionContext = &#123;</span><br><span class="line">    </span><br><span class="line">  ThisBinding: &lt;Global Object&gt;,</span><br><span class="line"></span><br><span class="line">  LexicalEnvironment: &#123;</span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Declarative&quot;,</span><br><span class="line">      // 在这里绑定标识符</span><br><span class="line">      Arguments: &#123;0: 20, 1: 30, length: 2&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    outer: &lt;GlobalLexicalEnvironment&gt;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  VariableEnvironment: &#123;</span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Declarative&quot;,</span><br><span class="line">      // 在这里绑定标识符</span><br><span class="line">      g: undefined</span><br><span class="line">    &#125;,</span><br><span class="line">    outer: &lt;GlobalLexicalEnvironment&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>     只有遇到调用函数 multiply 时，函数执行上下文才会被创建。可能你已经注意到 let 和 const 定义的变量并没有关联任何值，但 var 定义的变量被设成了 undefined。这是因为在创建阶段时，引擎检查代码找出变量和函数声明，虽然函数声明完全存储在环境中，但是变量最初设置为 undefined（var 情况下），或者未初始化（let 和 const 情况下）。这就是为什么你可以在声明之前访问 var 定义的变量（虽然是 undefined），但是在声明之前访问 let 和 const 的变量会得到一个引用错误。这就是我们说的变量声明提升。</p>
<p><strong>4.3、执行上下文的执行阶段</strong></p>
<p>     这是整篇文章中最简单的部分。在此阶段，完成对所有这些变量的分配，最后执行代码。需要注意的是：在执行阶段，如果 JavaScript 引擎不能在源码中声明的实际位置找到 let 变量的值，它会被赋值为 undefined。</p>
]]></content>
      <tags>
        <tag>大前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC层次关系图</title>
    <url>/2023/11/30/JDBC%E5%B1%82%E6%AC%A1%E5%85%B3%E7%B3%BB%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     总体而言，JDBC包含以下几大角色 : Driver、DriverManager、Connection、Statement、ResultSet。这几大角色之间的层次关系如下图所示：</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/JDBC%E5%B1%82%E6%AC%A1%E5%85%B3%E7%B3%BB%E5%9B%BE/JDBC%E5%B1%82%E6%AC%A1%E5%85%B3%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="JDBC层次关系结构"></p>
<p>     Connection表示与特定数据库的连接，可以获取到数据库的一些信息，这些信息包括：其表信息，应该支持的SQL语法，数据库内有什么存储过程，此链接功能的信息等等。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/JDBC%E5%B1%82%E6%AC%A1%E5%85%B3%E7%B3%BB%E5%9B%BE/Connecyion.png" alt="Connection"></p>
<p>     Statement 的功能在于根据传入的sql语句，将传入sql经过整理组合成数据库能够识别的sql语句(对于静态的sql语句，不需要整理组合；而对于预编译sql语句和批量语句，则需要整理)，然后传递sql请求，之后会得到返回的结果。对于查询sql，结果会以ResultSet的形式返回。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/JDBC%E5%B1%82%E6%AC%A1%E5%85%B3%E7%B3%BB%E5%9B%BE/statement.png" alt="Connection"></p>
<p>     当Statement查询sql执行后，会得到ResultSet对象，ResultSet对象是sql语句查询的结果，作为数据库结果的映射，其映射关系如下图所示。ResultSet对从数据库返回的结果进行了封装，使用迭代器的模式逐条取出结果集中的记录。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/JDBC%E5%B1%82%E6%AC%A1%E5%85%B3%E7%B3%BB%E5%9B%BE/ResultSet.png" alt="ResultSet"></p>
<p>     工作时序图：</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/JDBC%E5%B1%82%E6%AC%A1%E5%85%B3%E7%B3%BB%E5%9B%BE/%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="时序图"></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>前端开发体系</title>
    <url>/2023/11/29/%E5%89%8D%E6%AE%B5%E5%BC%80%E5%8F%91%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BD%93%E7%B3%BB/%E7%8E%B0%E4%BB%A3%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91.jpg" alt="现代前端开发"></p>
]]></content>
      <tags>
        <tag>大前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端量子特效</title>
    <url>/2023/11/29/%E5%89%8D%E7%AB%AF%E9%87%8F%E5%AD%90%E7%89%B9%E6%95%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E7%AC%94%E8%AE%B0/%E9%9A%8F%E7%AC%94/%E5%89%8D%E7%AB%AF%E9%87%8F%E5%AD%90%E7%89%B9%E6%95%88/%E9%87%8F%E5%AD%90%E7%BA%A0%E7%BC%A0%E7%89%B9%E6%95%88.gif" alt="前端量子特效"></p>
]]></content>
      <tags>
        <tag>大前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Java技术全栈图</title>
    <url>/2023/11/29/Java%E6%8A%80%E6%9C%AF%E5%85%A8%E6%A0%88%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/Java%E6%8A%80%E6%9C%AF%E5%85%A8%E6%A0%88%E5%9B%BE/Java%E4%BD%93%E7%B3%BB%E5%9B%BE%E5%86%8C.jpg" alt="Java技术全栈图"></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的队列</title>
    <url>/2023/11/28/%E5%B8%B8%E8%A7%81%E7%9A%84%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     队列是系统中广泛使用的流行数据结构。上图显示了我们经常使用的4种不同类型的队列。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%B8%B8%E8%A7%81%E7%9A%84%E9%98%9F%E5%88%97/640.gif" alt="常见的队列"></p>
<ul>
<li><strong>简单的FIFO队列</strong></li>
</ul>
<p>     简单队列遵循 FIFO（先进先出）。新元素插入到队列的尾部，元素从队列的头部移除。如果我们想在收到付款响应时向用户发送电子邮件通知，我们可以使用 FIFO 队列。电子邮件将以与付款响应相同的顺序发送。</p>
<ul>
<li><strong>环形队列</strong></li>
</ul>
<p>     环形队列也称为环形缓冲区或环形缓冲区。它的最后一个元素链接到第一个元素。插入发生在队列的前端，删除发生在队列的末尾。</p>
<p>     一个著名的实现是LMAX的低延迟环形缓冲区。交易组件通过环形缓冲区相互通信。这是在内存中实现的，速度非常快。</p>
<ul>
<li><strong>优先队列</strong></li>
</ul>
<p>     优先级队列中的元素具有预定义的优先级。我们从队列中取出具有最高（或最低）优先级的元素。在幕后，它使用最大堆或最小堆实现，其中具有最大或最低优先级的元素位于堆的根。</p>
<p>     一个典型的用例是将病情最严重的患者分配到急诊室，而将其他患者分配到普通病房。</p>
<ul>
<li><strong>Deque</strong></li>
</ul>
<p>     Deque 也称为双端队列。插入和删除可以在头部和尾部同时发生。Deque 支持 FIFO 和 LIFO（后进先出），因此我们可以使用它来实现堆栈数据结构。</p>
]]></content>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>内核稳定，是一个人最根本的能力</title>
    <url>/2023/11/24/%E5%86%85%E6%A0%B8%E7%A8%B3%E5%AE%9A%EF%BC%8C%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BA%BA%E6%9C%80%E6%A0%B9%E6%9C%AC%E7%9A%84%E8%83%BD%E5%8A%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer10" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer10"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/内核稳定，是一个人最根本的能力/内核稳定，是一个人最根本的能力.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
        <tag>内核稳定</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 中的左值（Lvalues）和右值（Rvalues）</title>
    <url>/2023/11/24/%E5%B7%A6%E5%80%BC%E5%92%8C%E5%8F%B3%E5%80%BC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     C++ 中有两种类型的表达式：</p>
<ul>
<li>左值（lvalue）：指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li>
<li>右值（rvalue）：术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li>
</ul>
<p>     变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。下面是一个有效的语句：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> g = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<p>     但是下面这个就不是一个有效的语句，会生成编译时错误：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span> = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>编程理论</tag>
      </tags>
  </entry>
  <entry>
    <title>Java资源大全</title>
    <url>/2023/11/16/Java%E8%B5%84%E6%BA%90%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>Java资源大全中文版</h1>
<p>我想很多程序员应该记得 GitHub 上有一个 Awesome - XXX 系列的资源整理。<a href="https://github.com/akullpp/awesome-java">awesome-java</a> 就是 akullpp 发起维护的 Java 资源列表，内容包括：构建工具、数据库、框架、模板、安全、代码分析、日志、第三方库、书籍、Java 站点等等。伯乐在线已经把 awesome-java 资源列表翻成中文后发布于 <a href="http://www.importnew.com/14429.html">ImportNew</a>。</p>
<p>Awesome 系列虽然挺全，但基本只对收录的资源做了极为简要的介绍，如果有更详细的中文介绍，对相应开发者的帮助会更大。这也是我们发起这个开源项目的初衷。</p>
<hr>
<h3 id="我们要做什么？">我们要做什么？</h3>
<ul>
<li>基于 awesome-java 资源列表，我们将对各个资源项进行编译整理。</li>
<li>整理后的内容，将收录在<a href="http://www.importnew.com/">伯乐在线资源频道</a>。可参考已整理的内容：
<ul>
<li>《<a href="http://www.importnew.com/owner/">OWNER：Java配置文件解决方案</a>》</li>
<li>《<a href="http://www.importnew.com/spring-boot/">Spring Boot：简化Spring应用初始搭建以及开发过程</a>》</li>
<li>《<a href="http://www.importnew.com/sonarqube/">SonarQube：开源的代码质量管理工具</a>》</li>
</ul>
</li>
</ul>
<hr>
<h3 id="如何参与本项目？">如何参与本项目？</h3>
<!-- 从下面的目录来看，本项目的工作量小不了，所以非常期待能有更多程序员一起来参与。

不过加入前，有几个小要求：

* 英文还不错，能读懂英文并用自己的话复述；
* 在用 Java；

如有兴趣，请加 QQ：50872495。加 Q 时请注明「Java大全」 -->
<hr>
<h3 id="如何为列表贡献新资源？">如何为列表贡献新资源？</h3>
<p>欢迎大家为列表贡献高质量的新资源，提交PR时请参照以下要求：</p>
<ul>
<li>请确保推荐的资源自己使用过</li>
<li>提交PR时请注明推荐理由</li>
</ul>
<p>资源列表管理收到PR请求后，会定期（每周）在微博转发本周提交的PR列表，并在微博上面听取使用过这些资源的意见。确认通过后，会加入资源大全。</p>
<p>感谢您的贡献！</p>
<hr>
<h3 id="本项目的参与者">本项目的参与者</h3>
<ul>
<li>
<p>维护者：<a href="https://github.com/tangyouhua">tangyouhua</a></p>
</li>
<li>
<p>贡献者：<a href="https://github.com/tangyouhua">tangyouhua</a>、<a href="https://github.com/kingzone">kingzone</a>、<a href="https://github.com/llhua2329">llhua2329</a>、<a href="https://github.com/BadCoderChou">BadCoderChou</a>、<a href="http://www.importnew.com/members/anankun/">anankun</a>、<a href="http://www.importnew.com/members/jianghehe/">贺贺</a>、<a href="http://www.importnew.com/members/petra/">大彭</a>、<a href="https://github.com/wing00yf/">superXiaoFan</a>、<a href="http://www.importnew.com/members/3951356/">javayrf</a>、<a href="http://www.importnew.com/members/John%20Smith/">John Smith</a>、<a href="http://www.importnew.com/members/jaler/">Jaler</a>、<a href="http://www.importnew.com/members/fdconan/">JM</a>、<a href="http://www.importnew.com/members/zy124348985/">dreamkidd</a>、<a href="http://www.importnew.com/members/cheenlie">cheenlie</a>、<a href="http://www.importnew.com/members/zhangQian1991">zhangQian1991</a>、<a href="http://www.importnew.com/members/wt726553124/">王涛</a>、<a href="http://www.importnew.com/members/xun_cui">马</a>、<a href="http://www.importnew.com/members/xuhf_1988/">vvkee</a>、<a href="http://www.importnew.com/members/yangxy81118">凝枫</a>、<a href="https://github.com/luhaixun">haixunlu</a>、<a href="http://www.importnew.com/members/milly/">milly</a>、<a href="http://www.importnew.com/members/xuhf_1988/">Hodur</a>、<a href="http://www.importnew.com/members/FakeHank">FakeHank</a>、<a href="http://www.importnew.com/members/%E8%BF%9E%E4%B9%90/">连乐</a>、<a href="http://www.importnew.com/members/UncleTim/">UncleTim</a>、<a href="http://www.importnew.com/members/sunbiaobiao">sunbiaobiao</a>、<a href="http://www.importnew.com/members/wx2702327993/">zhiguo</a>、<a href="http://www.importnew.com/members/zhongjianno1/">光光头去打酱油</a>、<a href="http://www.importnew.com/members/TonyAaron/">云中游</a>、<a href="http://www.importnew.com/members/zemo/">Zemo</a>、<a href="https://github.com/sdcuike">sdcuike</a>、<a href="https://github.com/danielwii">danielwii</a>、<a href="http://www.importnew.com/members/q1118024125/">oneDay</a>、<a href="https://github.com/dfghj44444">邢敏</a>、<a href="https://github.com/heikehuan">heikehuan</a>、<a href="https://github.com/fgcui1204">fgcui1204</a>、<a href="https://github.com/wenxueliu">wenxueliu</a>、<a href="https://github.com/node">Gentle Yang</a>、<a href="http://www.importnew.com/author/huangxiaofei/">黄小非</a>、<a href="http://www.importnew.com/members/wtgn1m1/">wangtg</a>、<a href="http://www.importnew.com/members/2937134480/">百焱</a>、<a href="http://www.importnew.com/members/2480130384/">胡不GUI</a>、<a href="http://www.importnew.com/members/mtHzm/">Another_mt</a>、<a href="http://www.importnew.com/members/adonis/">Rainbow</a>、<a href="http://www.importnew.com/members/menghuanqiqi">super^糖</a>、<a href="http://www.importnew.com/members/huangyuliang/">黄余粮</a>、<a href="http://www.importnew.com/members/sunbojian100/">Sun</a>、<a href="https://github.com/SoberChina">李伟高</a>、<a href="https://github.com/q977734161">lixiaobao</a>、<a href="https://github.com/XuZhongCN">許中</a>、<a href="https://github.com/eiDear">eiDear</a>、<a href="https://github.com/click33">click33</a>、You</p>
</li>
</ul>
<p>注：名单不分排名，不定期补充更新</p>
<hr>
<!-- ### 奖励计划

虽然奖励可能并不是你加入的主要原因，但还是有必要提一下：

* 整理超过 20 个资源后，可在伯乐在线上开通打赏；
* 每整理 20 个资源，有机会获得技术书籍或各种有意思的创意、极客产品；
* [奖励详情](http://www.importnew.com/rewards/)

* * * -->
<h3 id="目录">目录</h3>
<ul>
<li><a href="#awesome-java-cn">Java资源大全中文版</a>
<ul>
<li><a href="#ancients">古董级工具</a></li>
<li><a href="#build">构建工具</a></li>
<li><a href="#bytecode-manipulation">字节码操作</a></li>
<li><a href="#cluster-management">集群管理</a></li>
<li><a href="#code-analysis">代码分析</a></li>
<li><a href="#compiler-compiler">编译器生成工具</a></li>
<li><a href="#configuration">外部配置工具</a></li>
<li><a href="#constraint-satisfaction-problem-solver">约束满足问题求解程序</a></li>
<li><a href="#continuous-integration">持续集成</a></li>
<li><a href="#csv">CSV解析</a></li>
<li><a href="#data-structures">数据结构</a></li>
<li><a href="#database">数据库</a></li>
<li><a href="#date-and-time">时间日期工具库</a></li>
<li><a href="#dependency-injection">依赖注入</a></li>
<li><a href="#development">开发流程增强工具</a></li>
<li><a href="#distributed-applications">分布式应用</a></li>
<li><a href="#distributed-databases">分布式数据库</a></li>
<li><a href="#distribution">发布</a></li>
<li><a href="#document-processing">文档处理工具</a></li>
<li><a href="#functional-programming">函数式编程</a></li>
<li><a href="#game-development">游戏开发</a></li>
<li><a href="#gui">GUI</a></li>
<li><a href="#high-performance">高性能计算</a></li>
<li><a href="#ide">IDE</a></li>
<li><a href="#imagery">图像处理</a></li>
<li><a href="#json">JSON</a></li>
<li><a href="#jvm-and-jdk">JVM与JDK</a></li>
<li><a href="#languages">基于JVM的语言</a></li>
<li><a href="#logging">日志</a></li>
<li><a href="#machine-learning">机器学习</a></li>
<li><a href="#messaging">消息传递</a></li>
<li><a href="#miscellaneous">杂项</a></li>
<li><a href="#monitoring">应用监控工具</a></li>
<li><a href="#native">原生开发库</a></li>
<li><a href="#natural-language-processing">自然语言处理</a></li>
<li><a href="#networking">网络</a></li>
<li><a href="#orm">ORM</a></li>
<li><a href="#pdf">PDF</a></li>
<li><a href="#performance-analysis">性能分析</a></li>
<li><a href="#reactive-libraries">响应式开发库</a></li>
<li><a href="#rest-frameworks">REST框架</a></li>
<li><a href="#science">科学计算与分析</a></li>
<li><a href="#search">搜索引擎</a></li>
<li><a href="#security">安全</a></li>
<li><a href="#serialization">序列化</a></li>
<li><a href="#server">应用服务器</a></li>
<li><a href="#template-engine">模板引擎</a></li>
<li><a href="#testing">测试</a></li>
<li><a href="#utility">通用工具库</a></li>
<li><a href="#web-crawling">网络爬虫</a></li>
<li><a href="#web-frameworks">Web框架</a></li>
<li><a href="#Business-Process-Management">业务流程管理套件</a></li>
</ul>
</li>
<li><a href="#resources">资源</a>
<ul>
<li><a href="#communities">社区</a></li>
<li><a href="#influential-books">有影响力的书</a></li>
<li><a href="#podcasts">播客</a></li>
<li><a href="#weibo-weixin">微博、微信公众号</a></li>
<li><a href="#twitter">Twitter</a></li>
<li><a href="#websites">知名网站</a></li>
</ul>
</li>
</ul>
<h2 id="ancients">古董级工具</h2>
<p><em>这些工具伴随着Java一起出现，在各自辉煌之后还在一直使用。</em></p>
<ul>
<li><a href="http://www.importnew.com/apache-ant/">Apache Ant</a>：基于XML的构建管理工具。<a href="http://ant.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/cglib/">cglib</a>：字节码生成库。<a href="https://github.com/cglib/cglib">官网</a></li>
<li><a href="http://www.importnew.com/glassfish/">GlassFish</a>：应用服务器，由Oracle赞助支持的Java EE参考实现。<a href="https://glassfish.java.net/">官网</a></li>
<li><a href="http://www.importnew.com/hudson/">Hudson</a>：持续集成服务器，目前仍在活跃开发。<a href="http://hudson-ci.org/">官网</a></li>
<li><a href="http://www.importnew.com/javaserver-faces/">JavaServer Faces</a>：Mojarra是JSF标准的一个开源实现，由Oracle开发。<a href="https://javaserverfaces.java.net/">官网</a></li>
<li><a href="http://www.importnew.com/javaserver-pages/">JavaServer Pages</a>：支持自定义标签库的网站通用模板库。<a href="https://jsp.java.net/">官网</a></li>
<li><a href="http://www.importnew.com/liquibase/">Liquibase</a>：与具体数据库独立的追踪、管理和应用数据库Scheme变化的工具。<a href="http://www.liquibase.org/">官网</a></li>
</ul>
<h3 id="build">构建工具</h3>
<p><em>构建及应用依赖关系处理工具。</em></p>
<ul>
<li><a href="http://www.importnew.com/maven/">Apache Maven</a>：Maven是一款声明式构建及依赖管理工具，采用约定优于配置方式进行管理。相对Apache Ant更推荐使用Maven，前者采用了过程式管理，维护相对困难。<a href="http://maven.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/bazel/">Bazel</a>：来自Google的构建工具，可以快速、可靠地构建代码。<a href="http://bazel.io">官网</a></li>
<li><a href="http://www.importnew.com/gradle/">Gradle</a>：使用Groovy（非XML）进行增量构建，可以很好地与Maven依赖管理配合工作。<a href="http://gradle.org/">官网</a></li>
<li><a href="http://www.importnew.com/buck/">Buck</a>：Facebook构建工具。<a href="https://buckbuild.com/">官网</a></li>
</ul>
<h3 id="bytecode-manipulation">字节码操作</h3>
<p><em>编程方式操作字节码的开发库。</em></p>
<ul>
<li><a href="http://www.importnew.com/asm/">ASM</a>：通用底层字节码操作和分析开发库。<a href="http://asm.ow2.org/">官网</a></li>
<li><a href="http://www.importnew.com/byte-buddy/">Byte Buddy</a>：使用流式API进一步简化字节码生成。<a href="http://bytebuddy.net/">官网</a></li>
<li><a href="http://www.importnew.com/byteman/">Byteman</a>：在运行时通过DSL（规则）操作字节码进行测试和故障排除。<a href="http://byteman.jboss.org/">官网</a></li>
<li><a href="http://www.importnew.com/javassist/">Javassist</a>：一个简化字节码编辑尝试。<a href="http://jboss-javassist.github.io/javassist">官网</a></li>
</ul>
<h3 id="cluster-management">集群管理</h3>
<p><em>在集群内动态管理应用程序的框架。</em></p>
<ul>
<li><a href="http://www.importnew.com/apache-aurora/">Apache Aurora</a>：Apache Aurora是一个Mesos框架，用于长时间运行服务和定时任务（cron job）。<a href="http://aurora.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/singularity/">Singularity</a>：Singularity是一个Mesos框架，方便部署和操作。它支持Web Service、后台运行、调度作业和一次性任务。<a href="http://getsingularity.com/">官网</a></li>
</ul>
<h3 id="code-analysis">代码分析</h3>
<p><em>测量代码指标和质量工具。</em></p>
<ul>
<li><a href="http://www.importnew.com/checkstyle/">Checkstyle</a>：代码编写规范和标准静态分析工具。<a href="https://github.com/checkstyle/checkstyle">官网</a></li>
<li><a href="http://www.importnew.com/error-prone/">Error Prone</a>：将常见编程错误作为运行时错误报告。<a href="https://github.com/google/error-prone">官网</a></li>
<li>FindBugs：通过字节码静态分析查找隐藏bug。<a href="http://findbugs.sourceforge.net/">官网</a></li>
<li><a href="http://www.importnew.com/jqassistant/">jQAssistant</a>：使用基于Neo4J查询语言进行代码静态分析。<a href="http://jqassistant.org/">官网</a></li>
<li><a href="http://www.importnew.com/pmd/">PMD</a>：对源代码分析查找不良的编程习惯。<a href="https://github.com/pmd/pmd">官网</a></li>
<li><a href="http://www.importnew.com/sonarqube/">SonarQube</a>：通过插件集成其它分析组件，对过去一段时间内的数据进行统计。<a href="http://www.sonarqube.org/">官网</a></li>
</ul>
<h3 id="compiler-compiler">编译器生成工具</h3>
<p><em>用来创建解析器、解释器或编译器的框架。</em></p>
<ul>
<li><a href="http://www.importnew.com/antlr/">ANTLR</a>：复杂的全功能自顶向下解析框架。<a href="http://www.antlr.org/">官网</a></li>
<li><a href="http://www.importnew.com/javacc/">JavaCC</a>：JavaCC是更加专门的轻量级工具，易于上手且支持语法超前预测。<a href="https://javacc.org/">官网</a></li>
</ul>
<h3 id="configuration">外部配置工具</h3>
<p><em>支持外部配置的开发库。</em></p>
<ul>
<li><a href="http://www.importnew.com/config/">config</a>：针对JVM语言的配置库。<a href="https://github.com/typesafehub/config">官网</a></li>
<li><a href="http://www.importnew.com/owner/">owner</a>：减少冗余配置属性。<a href="https://github.com/lviggiano/owner">官网</a></li>
</ul>
<h3 id="constraint-satisfaction-problem-solver">约束满足问题求解程序</h3>
<p><em>帮助解决约束满足问题的开发库。</em></p>
<ul>
<li><a href="http://www.importnew.com/choco/">Choco</a>：可直接使用的约束满足问题求解程序，使用了约束规划技术。<a href="http://choco-solver.org/">官网</a></li>
<li><a href="http://www.importnew.com/jacop/">JaCoP</a>：为FlatZinc语言提供了一个接口，可以执行MiniZinc模型。<a href="https://github.com/radsz/jacop/">官网</a></li>
<li><a href="http://www.importnew.com/optaplanner/">OptaPlanner</a>：业务规划与资源调度优化求解程序。<a href="http://www.optaplanner.org/">官网</a></li>
<li><a href="http://www.importnew.com/sat4j/">Sat4J</a>：逻辑代数与优化问题最先进的求解程序。<a href="http://www.sat4j.org/">官网</a></li>
</ul>
<h3 id="continuous-integration">持续集成</h3>
<ul>
<li><a href="http://www.importnew.com/bamboo/">Bamboo</a>：Atlassian解决方案，可以很好地集成Atlassian的其他产品。可以选择开源许可，也可以购买商业版。<a href="https://www.atlassian.com/software/bamboo">官网</a></li>
<li>CircleCI：提供托管服务，可以免费试用。<a href="https://circleci.com/">官网</a></li>
<li><a href="http://www.importnew.com/codeship/">Codeship</a>：提供托管服务，提供有限的免费模式。<a href="https://codeship.com/features">官网</a></li>
<li><a href="hao.importnew.com/fabric8/">fabric8</a>：容器集成平台。<a href="http://fabric8.io/">官网</a></li>
<li><a href="http://www.importnew.com/go/">Go</a>：ThoughtWork开源解决方案。<a href="https://www.gocd.io/">官网</a></li>
<li><a href="http://www.importnew.com/jenkins/">Jenkins</a>：支持基于服务器的部署服务。<a href="http://jenkins-ci.org/">官网</a></li>
<li><a href="http://www.importnew.com/teamcity/">TeamCity</a>：JetBrain的持续集成解决方案，有免费版。<a href="http://www.jetbrains.com/teamcity/">官网</a></li>
<li><a href="http://www.importnew.com/travis/">Travis</a>：通常用作开源项目的托管服务。<a href="https://travis-ci.org">官网</a></li>
<li><a href="http://www.importnew.com/buildkite/">Buildkite</a>: 持续集成工具，用简单的脚本就能设置pipeline，而且能快速构建，可以免费试用。<a href="https://buildkite.com/">官网</a></li>
</ul>
<h3 id="csv">CSV解析</h3>
<p><em>简化CSV数据读写的框架与开发库</em></p>
<ul>
<li><a href="http://www.importnew.com/univocity-parsers/">uniVocity-parsers</a>：速度最快功能最全的CSV开发库之一，同时支持TSV与固定宽度记录的读写。<a href="https://github.com/uniVocity/univocity-parsers">官网</a></li>
</ul>
<h3 id="database">数据库</h3>
<p><em>简化数据库交互的相关工具。</em></p>
<ul>
<li><a href="http://www.importnew.com/apache-phoenix/">Apache Phoenix</a>：HBase针对低延时应用程序的高性能关系数据库层。<a href="http://phoenix.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/crate/">Crate</a>：实现了数据同步、分片、缩放、复制的分布式数据存储。除此之外还可以使用基于SQL的语法跨集群查询。<a href="https://crate.io/">官网</a></li>
<li><a href="http://www.importnew.com/flyway/">Flyway</a>：简单的数据库迁移工具。<a href="http://flywaydb.org/">官网</a></li>
<li><a href="http://www.importnew.com/h2/">H2</a>：小型SQL数据库，以可以作为内存数据库使用著称。<a href="http://h2database.com/">官网</a></li>
<li><a href="http://www.importnew.com/hikaricp/">HikariCP</a>：高性能JDBC连接工具。<a href="https://github.com/brettwooldridge/HikariCP">官网</a></li>
<li><a href="http://www.importnew.com/jdbi/">JDBI</a>：便捷的JDBC抽象。<a href="http://jdbi.org/">官网</a></li>
<li><a href="http://www.importnew.com/jooq/">jOOQ</a>：为SQL schema生成typesafe代码。<a href="http://www.jooq.org/">官网</a></li>
<li><a href="http://www.importnew.com/mapdb/">MapDB</a>：以磁盘或堆内存中并发集合为基础的嵌入式数据库引擎。<a href="http://www.mapdb.org/">官网</a></li>
<li><a href="http://www.importnew.com/presto/">Presto</a>：针对大数据的分布式SQL查询引擎。<a href="https://github.com/facebook/presto">官网</a></li>
<li><a href="http://www.importnew.com/querydsl/">Querydsl</a>：Typesafe统一查询。<a href="http://www.querydsl.com/">官网</a></li>
</ul>
<h3 id="data-structures">数据结构</h3>
<ul>
<li><a href="http://www.importnew.com/apache-parquet/">Apache Parquet</a>：Google Dremel论文中发布的基于组装算法的列式（Columnar）存储格式。<a href="http://parquet.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/protobuf/">Protobuf</a>：Google数据交换格式。<a href="https://github.com/google/protobuf">官网</a></li>
<li><a href="http://www.importnew.com/sbe/">SBE</a>：简单二进制编码，是最快速的消息格式之一。<a href="https://github.com/real-logic/simple-binary-encoding">官网</a></li>
<li><a href="http://www.importnew.com/wire/">Wire</a>：整洁轻量级协议缓存。<a href="https://github.com/square/wire">官网</a></li>
</ul>
<h3 id="date-and-time">时间日期工具库</h3>
<p><em>处理时间和日期的开发库。</em></p>
<ul>
<li><a href="http://www.importnew.com/joda-time/">Joda-Time</a>：在Java 8发布前，Joda-Time是实际使用的时间日期库标准。<a href="http://www.joda.org/joda-time/">官网</a></li>
<li><a href="http://www.importnew.com/time4j/">Time4J</a>：高级时间和日期库。<a href="https://github.com/MenoData/Time4J">官网</a></li>
<li><a href="http://www.importnew.com/ThreeTen/">ThreeTen</a>：JSR-310实现，为JDK提供更具特点的时间和日期API。<a href="http://www.threeten.org">官网</a></li>
</ul>
<h3 id="dependency-injection">依赖注入</h3>
<p><em>帮实现依赖翻转范式的开发库。</em> <a href="https://en.wikipedia.org/wiki/Inversion_of_control">官网</a></p>
<ul>
<li><a href="http://www.importnew.com/apache-deltaspike/">Apache DeltaSpike</a>：CDI扩展框架。<a href="https://deltaspike.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/dagger2/">Dagger2</a>：编译时注入框架，不需要使用反射。<a href="http://google.github.io/dagger/">官网</a></li>
<li><a href="http://www.importnew.com/guice/">Guice</a>：可以匹敌Dagger的轻量级注入框架。<a href="https://github.com/google/guice">官网</a></li>
<li><a href="http://www.importnew.com/hk2/">HK2</a>：轻量级动态依赖注入框架。<a href="https://hk2.java.net">官网</a></li>
</ul>
<h3 id="development">开发流程增强工具</h3>
<p><em>从最基本的层面增强开发流程。</em></p>
<ul>
<li><a href="http://www.importnew.com/adt4j/">ADT4J</a>：针对代数数据类型的JSR-269代码生成器。<a href="https://github.com/sviperll/adt4j">官网</a></li>
<li><a href="http://www.importnew.com/aspectj/">AspectJ</a>：面向切面编程（AOP）的无缝扩展。<a href="https://eclipse.org/aspectj/">官网</a></li>
<li><a href="http://www.importnew.com/auto/">Auto</a>：源代码生成器集合。<a href="https://github.com/google/auto">官网</a></li>
<li><a href="http://www.importnew.com/dcevm/">DCEVM</a>：通过修改JVM在运行时支持对已加载的类进行无限次重定义。<a href="http://dcevm.github.io/">官网</a></li>
<li>HotswapAgent：支持无限次重定义运行时类与资源。<a href="https://github.com/HotswapProjects/HotswapAgent">官网</a></li>
<li>Immutables：类似Scala的条件类。<a href="http://immutables.github.io/">官网</a></li>
<li>JHipster：基于Spring Boot与AngularJS应用程序的Yeoman源代码生成器。<a href="https://github.com/jhipster/generator-jhipster">官网</a></li>
<li><a href="http://www.importnew.com/jrebel/">JRebel</a>：无需重新部署，可以即时重新加载代码与配置的商业软件。<a href="http://zeroturnaround.com/software/jrebel/">官网</a></li>
<li>Lombok：减少冗余的代码生成器。<a href="https://projectlombok.org/">官网</a></li>
<li>Spring Loaded：类重载代理。<a href="https://github.com/spring-projects/spring-loaded">官网</a></li>
<li><a href="http://www.importnew.com/vert-x/">vert.x</a>：多语言事件驱动应用框架。<a href="http://vertx.io/">官网</a></li>
</ul>
<h3 id="distributed-applications">分布式应用</h3>
<p><em>用来编写分布式容错应用的开发库和框架。</em></p>
<ul>
<li><a href="http://www.importnew.com/akka/">Akka</a>：用来编写分布式容错并发事件驱动应用程序的工具和运行时。<a href="http://akka.io">官网</a></li>
<li><a href="http://www.importnew.com/storm/">Apache Storm</a>：实时计算系统。<a href="http://storm.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/zookeeper/">Apache ZooKeeper</a>：针对大型分布式系统的协调服务，支持分布式配置、同步和名称注册。<a href="http://zookeeper.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/Hazelcast/">Hazelcast</a>：高可扩展内存数据网格。<a href="http://hazelcast.org/">官网</a></li>
<li><a href="http://www.importnew.com/hystrix/">Hystrix</a>：提供延迟和容错。<a href="https://github.com/Netflix/Hystrix">官网</a></li>
<li><a href="http://www.importnew.com/jgroups/">JGroups</a>：提供可靠的消息传递和集群创建的工具。<a href="http://www.jgroups.org/">官网</a></li>
<li><a href="http://www.importnew.com/orbit/">Orbit</a>：支持虚拟角色（Actor），在传统角色的基础上增加了另外一层抽象。<a href="http://orbit.bioware.com/">官网</a></li>
<li><a href="http://www.importnew.com/quasar/">Quasar</a>：为JVM提供轻量级线程和角色。<a href="http://www.paralleluniverse.co/quasar/">官网</a></li>
</ul>
<h3 id="distributed-databases">分布式数据库</h3>
<p><em>对应用程序而言，在分布式系统中的数据库看起来就像是只有一个数据源。</em></p>
<ul>
<li><a href="http://www.importnew.com/cassandra/">Apache Cassandra</a>：列式数据库，可用性高且没有单点故障。<a href="http://cassandra.apache.org">官网</a></li>
<li><a href="http://www.importnew.com/hbase/">Apache HBase</a>：针对大数据的Hadoop数据库。<a href="http://hbase.apache.org">官网</a></li>
<li><a href="http://www.importnew.com/druid/">Druid</a>：实时和历史OLAP数据存储，在聚集查询和近似查询方面表现不俗。<a href="http://druid.io">官网</a></li>
<li><a href="http://www.importnew.com/infinispan/">Infinispan</a>：针对缓存的高并发键值对数据存储。<a href="http://infinispan.org/">官网</a></li>
<li><a href="">TiDB</a>：开源分布式HTAP数据库，结合了传统的RDBMS和NoSQL的最佳特性。<a href="https://pingcap.com">官网</a></li>
</ul>
<h3 id="distribution">发布</h3>
<p><em>以本机格式发布应用程序的工具。</em></p>
<ul>
<li>Bintray：发布二进制文件版本控制工具。可以于Maven或Gradle一起配合使用。提供开源免费版本和几种商业收费版本。<a href="https://bintray.com/">官网</a></li>
<li><a href="http://www.importnew.com/central-repository/">Central Repository</a>：最大的二进制组件仓库，面向开源社区提供免费服务。Apache Maven默认使用Central <a href="http://search.maven.org/">官网</a>Repository，也可以在所有其他构建工具中使用。</li>
<li>IzPack：为跨平台部署建立创作工具（Authoring Tool）。<a href="http://izpack.org/">官网</a></li>
<li>JitPack：打包GitHub仓库的便捷工具。可根据需要构建Maven、Gradle项目，发布可立即使用的组件。<a href="https://jitpack.io/">官网</a></li>
<li>Launch4j：将JAR包装为轻量级本机Windows可执行程序。<a href="http://launch4j.sourceforge.net/">官网</a></li>
<li>Nexus：支持代理和缓存功能的二进制管理工具。<a href="http://www.sonatype.com/nexus">官网</a></li>
<li>packr：将JAR、资源和JVM打包成Windows、Linux和Mac OS X本地发布文件。<a href="https://github.com/libgdx/packr/">官网</a></li>
</ul>
<h3 id="document-processing">文档处理工具</h3>
<p><em>处理Office文档的开发库。</em></p>
<ul>
<li><a href="http://www.importnew.com/poi/">Apache POI</a>：支持OOXML规范（XLSX、DOCX、PPTX）以及OLE2规范（XLS、DOC、PPT）。<a href="http://poi.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/documents4j/">documents4j</a>：使用第三方转换器进行文档格式转换，转成类似MS Word这样的格式。<a href="http://documents4j.com">官网</a></li>
<li><a href="http://www.importnew.com/jopendocument/">jOpenDocument</a>：处理OpenDocument格式（由Sun公司提出基于XML的文档格式）。<a href="http://www.jopendocument.org/">官网</a></li>
</ul>
<h3 id="functional-programming">函数式编程</h3>
<p><em>函数式编程支持库。</em></p>
<ul>
<li>Cyclops：支持一元（Monad）操作和流操作工具类、comprehension（List语法）、模式匹配、trampoline等特性。<a href="https://github.com/aol/cyclops">官网</a></li>
<li>Fugue：Guava的函数式编程扩展。<a href="https://bitbucket.org/atlassian/fugue">官网</a></li>
<li>Functional Java：实现了多种基础和高级编程抽象，用来辅助面向组合开发（composition-oriented development）。<a href="http://www.functionaljava.org">官网</a></li>
<li>Javaslang：一个函数式组件库，提供持久化数据类型和函数式控制结构。<a href="http://javaslang.com">官网</a></li>
<li>jOOλ：旨在填补Java 8 lambda差距的扩展，提供了众多缺失的类型和一组丰富的顺序流API。<a href="https://github.com/jOOQ/jOOL">官网</a></li>
</ul>
<h3 id="game-development">游戏开发</h3>
<p><em>游戏开发框架。</em></p>
<ul>
<li><a href="http://www.importnew.com/jmonkeyengine/">jMonkeyEngine</a>：现代3D游戏开发引擎。<a href="http://jmonkeyengine.org/">官网</a></li>
<li><a href="http://www.importnew.com/libgdx/">libGDX</a>：全面的跨平台高级框架。<a href="https://libgdx.badlogicgames.com/">官网</a></li>
<li><a href="http://www.importnew.com/lwjgl/">LWJGL</a>：对OpenGL/CL/AL等技术进行抽象的健壮框架。<a href="https://www.lwjgl.org/">官网</a></li>
<li>jPCT：基于OpenGL技术开发的3D图形引擎。纯Java的3D引擎。<a href="http://www.jpct.net/">官网</a></li>
</ul>
<h3 id="gui">GUI</h3>
<p><em>现代图形化用户界面开发库。</em></p>
<ul>
<li><a href="http://www.importnew.com/javafx/">JavaFX</a>：Swing的后继者。<a href="http://www.oracle.com/technetwork/java/javase/overview/javafx-overview-2158620.html">官网</a></li>
<li><a href="http://www.importnew.com/scene_builder/">Scene Builder</a>：开发JavaFX应用的可视化布局工具。<a href="http://docs.oracle.com/javase/8/scene-builder-2/get-started-tutorial/overview.htm#JSBGS164">官网</a></li>
</ul>
<h3 id="high-performance">高性能计算</h3>
<p><em>涵盖了从集合到特定开发库的高性能计算相关工具。</em></p>
<ul>
<li>Agrona：高性能应用中常见的数据结构和工具方法。<a href="https://github.com/real-logic/Agrona">官网</a></li>
<li>Disruptor：线程间消息传递开发库。<a href="http://lmax-exchange.github.io/disruptor/">官网</a></li>
<li>fastutil：快速紧凑的特定类型集合（Collection）。<a href="http://fastutil.di.unimi.it/">官网</a></li>
<li>GS Collections：受Smalltalk启发的集合框架。<a href="https://github.com/goldmansachs/gs-collections">官网</a></li>
<li><a href="http://www.importnew.com/hppc/">HPPC</a>：基础类型集合。<a href="http://labs.carrotsearch.com/hppc.html">官网</a></li>
<li>Javolution：实时和嵌入式系统的开发库。<a href="http://javolution.org/">官网</a></li>
<li><a href="http://www.importnew.com/jctools/">JCTools</a>：JDK中缺失的并发工具。<a href="https://github.com/JCTools/JCTools">官网</a></li>
<li><a href="http://www.importnew.com/koloboke/">Koloboke</a>：Hash set和hash map。<a href="https://github.com/OpenHFT/Koloboke">官网</a></li>
<li>Trove：基础类型集合。<a href="http://trove.starlight-systems.com/">官网</a></li>
<li>High-scale-lib:Cliff Click 个人开发的高性能并发库<a href="https://github.com/stephenc/high-scale-lib">官网</a></li>
</ul>
<h3 id="ide">IDE</h3>
<p><em>简化开发的集成开发环境。</em></p>
<ul>
<li><a href="http://www.importnew.com/eclipse/">Eclipse</a>：老牌开源项目，支持多种插件和编程语言。<a href="http://www.eclipse.org/">官网</a></li>
<li><a href="http://www.importnew.com/intellij-idea/">IntelliJ IDEA</a>：支持众多JVM语言，是安卓开发者好的选择。商业版主要针对企业客户。<a href="http://www.jetbrains.com/idea/">官网</a></li>
<li><a href="http://www.importnew.com/netbeans/">NetBeans</a>：为多种技术提供集成化支持，包括Java SE、Java EE、数据库访问、HTML5等。<a href="https://netbeans.org/">官网</a></li>
<li><a href="http://www.importnew.com/scala-ide/">Scala IDE</a>：一款基于Eclipse开源平台打造的Scala集成开发环境。<a href="http://scala-ide.org/">官网</a></li>
<li><a href="http://www.importnew.com/springsource-tool-suite/">SpringSource Tool Suite（STS）</a>:一款基于Eclipse开源平台打造的Spring应用开发环境。<a href="http://spring.io/tools/sts/">官网</a></li>
</ul>
<h3 id="imagery">图像处理</h3>
<p><em>创建、评价和操作图片的支持库。</em></p>
<ul>
<li><a href="http://www.importnew.com/imgscalr/">Imgscalr</a>：纯Java 2D实现，简单、高效、支持硬件加速的图像缩放开发库。<a href="https://github.com/thebuzzmedia/imgscalr">官网</a></li>
<li><a href="http://www.importnew.com/picasso/">Picasso</a>：安卓图片下载和图片缓存开发库。<a href="http://square.github.io/picasso/">官网</a></li>
<li><a href="http://www.importnew.com/thumbnailator/">Thumbnailator</a>：Thumbnailator是一个高质量Java缩略图开发库。<a href="https://github.com/coobird/thumbnailator">官网</a></li>
<li><a href="http://www.importnew.com/zxing/">ZXing</a>：支持多种格式的一维、二维条形码图片处理开发库。<a href="https://github.com/zxing/zxing">官网</a></li>
<li><a href="http://www.importnew.com/im4java/">im4java</a>: 基于ImageMagick或GraphicsMagick命令行的图片处理开发库，基本上ImageMagick能够支持的图片格式和处理方式都能够处理。<a href="http://im4java.sourceforge.net/">官网</a></li>
<li>Apache Batik：在Java应用中程序以SVG格式显示、生成及处理图像的工具集，包括SVG解析器、SVG生成器、SVG DOM等模块，可以集成使用也可以单独使用，还可以扩展自定义的SVG标签。<a href="http://xmlgraphics.apache.org/batik/">官网</a></li>
</ul>
<h3 id="json">JSON</h3>
<p><em>简化JSON处理的开发库。</em></p>
<ul>
<li><a href="http://www.importnew.com/genson/">Genson</a>：强大且易于使用的Java到JSON转换开发库。<a href="http://owlike.github.io/genson">官网</a></li>
<li><a href="http://www.importnew.com/gson/">Gson</a>：谷歌官方推出的JSON处理库，支持在对象与JSON之间双向序列化，性能良好且可以实时调用。<a href="https://github.com/google/gson">官网</a></li>
<li><a href="http://www.importnew.com/jackson/">Jackson</a>：与GSON类似，在频繁使用时性能更佳。<a href="http://wiki.fasterxml.com/JacksonHome">官网</a></li>
<li><a href="http://www.importnew.com/logansquare/">LoganSquare</a>：基于Jackson流式API，提供对JSON解析和序列化。比GSON与Jackson组合方式效果更好。<a href="https://github.com/bluelinelabs/LoganSquare">官网</a></li>
<li><a href="http://www.importnew.com/fastjson/">Fastjson</a>：一个Java语言编写的高性能功能完善的JSON库。<a href="https://github.com/Alibaba/fastjson">官网</a></li>
<li>Kyro：快速、高效、自动化的Java对象序列化和克隆库。<a href="https://github.com/EsotericSoftware/kryo">官网</a></li>
</ul>
<h3 id="jvm-and-jdk">JVM与JDK</h3>
<p><em>目前的JVM和JDK实现。</em></p>
<ul>
<li><a href="http://www.importnew.com/jdk-9/">JDK 9</a>：JDK 9的早期访问版本。<a href="https://jdk9.java.net/">官网</a></li>
<li><a href="http://www.importnew.com/openjdk/">OpenJDK</a>：JDK开源实现。<a href="http://openjdk.java.net/">官网</a></li>
</ul>
<h3 id="languages">基于JVM的语言</h3>
<p><em>除Java外，可以用来编写JVM应用程序的编程语言。</em></p>
<ul>
<li>Scala：融合了面向对象和函数式编程思想的静态类型编程语言。<a href="http://www.scala-lang.org/">官网</a></li>
<li><a href="http://www.importnew.com/groovy/">Groovy</a>：类型可选（Optionally typed）的动态语言，支持静态类型和静态编译。目前是一个Apache孵化器项目。<a href="http://www.groovy-lang.org/">官网</a></li>
<li>Clojure：可看做现代版Lisp的动态类型语言。<a href="http://clojure.org/">官网</a></li>
<li>Ceylon：RedHat开发的面向对象静态类型编程语言。<a href="http://ceylon-lang.org/">官网</a></li>
<li>Kotlin：JetBrain针对JVM、安卓和浏览器提供的静态类型编程语言。<a href="http://kotlinlang.org/">官网</a></li>
<li><a href="http://www.importnew.com/xtend/">Xtend</a>：一种静态编程语言，能够将其代码转换为简洁高效的Java代码，并基于JVM运行。<a href="http://www.eclipse.org/xtend/">官网</a></li>
</ul>
<h3 id="logging">日志</h3>
<p><em>记录应用程序行为日志的开发库。</em></p>
<ul>
<li><a href="http://www.importnew.com/log4j2/">Apache Log4j 2</a>：使用强大的插件和配置架构进行完全重写。<a href="http://logging.apache.org/log4j/">官网</a></li>
<li><a href="http://www.importnew.com/kibana/">kibana</a>：分析及可视化日志文件。<a href="https://www.elastic.co/products/kibana">官网</a></li>
<li><a href="http://www.importnew.com/logback/">Logback</a>：强健的日期开发库，通过Groovy提供很多有趣的选项。<a href="http://logback.qos.ch/">官网</a></li>
<li><a href="http://www.importnew.com/logstash/">logstash</a>：日志文件管理工具。<a href="https://www.elastic.co/products/logstash">官网</a></li>
<li><a href="http://www.importnew.com/metrics/">Metrics</a>：通过JMX或HTTP发布参数，并且支持存储到数据库。<a href="https://github.com/dropwizard/metrics">官网</a></li>
<li><a href="http://www.importnew.com/slf4j/">SLF4J</a>：日志抽象层，需要与具体的实现配合使用。<a href="http://www.slf4j.org/">官网</a></li>
</ul>
<h3 id="machine-learning">机器学习</h3>
<p><em>提供具体统计算法的工具。其算法可从数据中学习。</em></p>
<ul>
<li><a href="http://www.importnew.com/apache-flink/">Apache Flink</a>：快速、可靠的大规模数据处理引擎。<a href="https://flink.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/apache-hadoop/">Apache Hadoop</a>：在商用硬件集群上用来进行大规模数据存储的开源软件框架。<a href="http://hadoop.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/apache-mahout/">Apache Mahout</a>：专注协同过滤、聚类和分类的可扩展算法。<a href="https://mahout.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/apache-spark/">Apache Spark</a>：开源数据分析集群计算框架。<a href="http://spark.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/deepdive/">DeepDive</a>：从非结构化数据建立结构化信息并集成到已有数据库的工具。<a href="http://deepdive.stanford.edu">官网</a></li>
<li><a href="http://www.importnew.com/deeplearning4j/">Deeplearning4j</a>：分布式多线程深度学习开发库。<a href="http://deeplearning4j.org/">官网</a></li>
<li><a href="http://www.importnew.com/h2o/">H2O</a>：用作大数据统计的分析引擎。<a href="http://h2o.ai/">官网</a></li>
<li><a href="http://www.importnew.com/weka/">Weka</a>：用作数据挖掘的算法集合，包括从预处理到可视化的各个层次。<a href="http://www.cs.waikato.ac.nz/ml/weka/">官网</a></li>
<li><a href="http://www.importnew.com/quickml/">QuickML</a>：高效机器学习库。<a href="http://quickml.org/">官网</a>、<a href="https://github.com/sanity/quickml">GitHub</a></li>
</ul>
<h3 id="messaging">消息传递</h3>
<p><em>在客户端之间进行消息传递，确保协议独立性的工具。</em></p>
<ul>
<li><a href="http://www.importnew.com/aeron/">Aeron</a>：高效可扩展的单播、多播消息传递工具。<a href="https://github.com/real-logic/Aeron">官网</a></li>
<li><a href="http://www.importnew.com/activemq/">Apache ActiveMQ</a>：实现JMS的开源消息代理（broker），可将同步通讯转为异步通讯。<a href="http://activemq.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/apache-camel/">Apache Camel</a>：通过企业级整合模式（Enterprise Integration Pattern EIP）将不同的消息传输API整合在一起。<a href="http://camel.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/kafka/">Apache Kafka</a>：高吞吐量分布式消息系统。<a href="http://kafka.apache.org/">官网</a></li>
<li><a href="http://rocketmq.apache.org/">Apache RocketMQ</a>: Apache RocketMQ是一个开源的分布式消息传递和流数据平台。<a href="http://rocketmq.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/hermes/">Hermes</a>：快速、可靠的消息代理（Broker），基于Kafka构建。<a href="http://hermes.allegro.tech">官网</a></li>
<li>JBoss HornetQ：清晰、准确、模块化，可以方便嵌入的消息工具。<a href="http://hornetq.jboss.org/">官网</a></li>
<li><a href="http://www.importnew.com/jeromq/">JeroMQ</a>：ZeroMQ的纯Java实现。<a href="https://github.com/zeromq/jeromq">官网</a></li>
<li><a href="http://www.importnew.com/smack/">Smack</a>：跨平台XMPP客户端函数库。<a href="https://github.com/igniterealtime/Smack/">官网</a></li>
<li>Openfire：是开源的、基于XMPP、采用Java编程语言开发的实时协作服务器。 Openfire安装和使用都非常简单，并可利用Web界面进行管理。 <a href="http://www.igniterealtime.org/projects/openfire/index.jsp">官网</a> <a href="https://github.com/igniterealtime/Openfire">GitHub</a></li>
<li>Spark：是一个开源，跨平台IM客户端。它的特性支持集组聊天，电话集成和强大安全性能。如果企业内部部署IM使用Openfire+Spark是最佳的组合。 <a href="http://www.igniterealtime.org/projects/spark/index.jsp">官网</a> <a href="https://github.com/igniterealtime/Spark">GitHub</a></li>
<li>Tigase： 是一个轻量级的可伸缩的 Jabber/XMPP 服务器。无需其他第三方库支持，可以处理非常高的复杂和大量的用户数，可以根据需要进行水平扩展。 <a href="http://www.tigase.net">官网</a></li>
</ul>
<h3 id="miscellaneous">杂项</h3>
<p><em>未分类其它资源。</em></p>
<ul>
<li>Design Patterns：实现并解释了最常见的设计模式。<a href="https://github.com/iluwatar/java-design-patterns">官网</a></li>
<li>Jimfs：内存文件系统。<a href="https://github.com/google/jimfs">官网</a></li>
<li>Lanterna：类似curses的简单console文本GUI函数库。<a href="https://code.google.com/p/lanterna/">官网</a></li>
<li>LightAdmin：可插入式CRUD UI函数库，可用来快速应用开发。<a href="http://lightadmin.org/">官网</a></li>
<li>OpenRefine：用来处理混乱数据的工具，包括清理、转换、使用Web Service进行扩展并将其关联到数据库。<a href="http://openrefine.org/">官网</a></li>
<li>RoboVM：Java编写原生iOS应用。<a href="https://robovm.com/">官网</a></li>
<li><a href="http://www.importnew.com/quartz/">Quartz</a>：强大的任务调度库.<a href="http://www.quartz-scheduler.org/">官网</a></li>
</ul>
<h3 id="monitoring">应用监控工具</h3>
<p><em>监控生产环境中应用程序的工具。</em></p>
<ul>
<li><a href="http://www.importnew.com/appdynamics/">AppDynamics</a>：性能监测商业工具。<a href="http://www.appdynamics.com/">官网</a></li>
<li><a href="http://www.importnew.com/javamelody/">JavaMelody</a>：性能监测和分析工具。<a href="https://github.com/javamelody/javamelody">官网</a></li>
<li><a href="http://www.importnew.com/Kamon/">Kamon</a>：Kamon用来监测在JVM上运行的应用程序。<a href="http://www.kamon.io/">官网</a></li>
<li><a href="http://www.importnew.com/new-relic/">New Relic</a>：性能监测商业工具。<a href="http://newrelic.com/">官网</a></li>
<li>SPM：支持对JVM应用程序进行分布式事务追踪的性能监测商业工具。<a href="https://sematext.com/spm/">官网</a></li>
<li><a href="http://www.importnew.com/overops_takipi/">OverOps(Takipi)</a>：产品运行时错误监测及调试商业工具。<a href="https://www.takipi.com/">官网</a></li>
</ul>
<h3 id="native">原生开发库</h3>
<p><em>用来进行特定平台开发的原生开发库。</em></p>
<ul>
<li><a href="http://www.importnew.com/jna/">JNA</a>：不使用JNI就可以使用原生开发库。此外，还为常见系统函数提供了接口。<a href="https://github.com/java-native-access/jna">官网</a></li>
</ul>
<h3 id="natural-language-processing">自然语言处理</h3>
<p><em>用来专门处理文本的函数库。</em></p>
<ul>
<li><a href="http://www.importnew.com/apache-opennlp/">Apache OpenNLP</a>：处理类似分词等常见任务的工具。<a href="https://opennlp.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/stanford_corenlp/">CoreNLP</a>：斯坦佛CoreNLP提供了一组基础工具，可以处理类似标签、实体名识别和情感分析这样的任务。<a href="http://nlp.stanford.edu/software/coenlp.shtml">官网</a></li>
<li><a href="http://www.importnew.com/lingpipe/">LingPipe</a>：一组可以处理各种任务的工具集，支持POS标签、情感分析等。<a href="http://alias-i.com/lingpipe/">官网</a></li>
<li><a href="http://www.importnew.com/mallet/">Mallet</a>：统计学自然语言处理、文档分类、聚类、主题建模等。<a href="http://mallet.cs.umass.edu/">官网</a></li>
</ul>
<h3 id="networking">网络</h3>
<p><em>网络编程函数库。</em></p>
<ul>
<li><a href="http://www.importnew.com/async-http-client/">Async Http Client</a>：异步HTTP和WebSocket客户端函数库。<a href="https://github.com/AsyncHttpClient/async-http-client">官网</a></li>
<li><a href="http://www.importnew.com/grizzly/">Grizzly</a>：NIO框架，在Glassfish中作为网络层使用。<a href="https://grizzly.java.net/">官网</a></li>
<li><a href="http://www.importnew.com/netty/">Netty</a>：构建高性能网络应用程序开发框架。<a href="http://netty.io/">官网</a></li>
<li><a href="http://www.importnew.com/okhttp/">OkHttp</a>：一个Android和Java应用的HTTP+SPDY客户端。<a href="http://square.github.io/okhttp/">官网</a></li>
<li>Undertow：基于NIO实现了阻塞和非阻塞API的Web服务器，在WildFly中作为网络层使用。<a href="http://undertow.io/">官网</a></li>
<li>unirest-java: Unirest 是一个轻量级的 HTTP 请求库，涵盖 Node、Ruby、Java、PHP、Python、Objective-C、.NET 等多种语言。可发起 GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS 请求。<a href="http://unirest.io/java">官网</a></li>
<li>brpc-java: java版baidu rpc框架，高性能、多协议、易扩展、低耦合。<a href="https://github.com/baidu/brpc-java">官网</a></li>
</ul>
<h3 id="orm">ORM</h3>
<p><em>处理对象持久化的API。</em></p>
<ul>
<li><a href="http://www.importnew.com/ebean/">Ebean</a>：支持快速数据访问和编码的ORM框架。<a href="http://ebean-orm.github.io/">官网</a></li>
<li><a href="http://www.importnew.com/eclipselink/">EclipseLink</a>：支持许多持久化标准，JPA、JAXB、JCA和SDO。<a href="https://www.eclipse.org/eclipselink/">官网</a></li>
<li><a href="http://www.importnew.com/hibernate/">Hibernate</a>：广泛使用、强健的持久化框架。Hibernate的技术社区非常活跃。<a href="http://hibernate.org/orm/">官网</a></li>
<li><a href="http://www.importnew.com/mybatis/">MyBatis</a>：带有存储过程或者SQL语句的耦合对象（Couples object）。<a href="http://mybatis.github.io/mybatis-3/">官网</a></li>
<li><a href="http://www.importnew.com/ormlite/">OrmLite</a>：轻量级开发包，免除了其它ORM产品中的复杂性和开销。<a href="http://ormlite.com/">官网</a></li>
<li>Nutz：另一个SSH。<a href="http://nutzam.com/">官网</a>，<a href="https://github.com/nutzam/nutz">Github</a>，<a href="https://nutz.cn/">论坛</a></li>
<li>JFinal：JAVA WEB + ORM框架。<a href="http://www.jfinal.com">官网</a>，<a href="https://github.com/jfinal/jfinal">Github</a></li>
<li><a href="http://openjpa.apache.org/">Apache OpenJPA</a>: 实现了 EJB 3.0 中的 JPA 标准,为开发者提供功能强大、使用简单的持久化数据管理框架。 <a href="http://openjpa.apache.org/">官网</a></li>
</ul>
<h3 id="pdf">PDF</h3>
<p><em>用来帮助创建PDF文件的资源。</em></p>
<ul>
<li><a href="http://www.importnew.com/apache_fop/">Apache FOP</a>：从XSL-FO创建PDF。<a href="http://xmlgraphics.apache.org/fop/">官网</a></li>
<li><a href="http://www.importnew.com/apache-pdfbox/">Apache PDFBox</a>：用来创建和操作PDF的工具集。<a href="http://pdfbox.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/dynamicreports/">DynamicReports</a>：JasperReports的精简版。<a href="http://dynamicreports.org/">官网</a></li>
<li><a href="http://www.importnew.com/flyingsaucer/">flyingsaucer</a>：XML/XHTML和CSS 2.1渲染器。<a href="https://github.com/flyingsaucerproject/flyingsaucer">官网</a></li>
<li><a href="http://www.importnew.com/itext/">iText</a>：一个易于使用的PDF函数库，用来编程创建PDF文件。注意，用于商业用途时需要许可证。<a href="http://itextpdf.com/">官网</a></li>
<li><a href="http://www.importnew.com/jasperreports/">JasperReports</a>：一个复杂的报表引擎。<a href="http://community.jaspersoft.com/project/jasperreports-library">官网</a></li>
</ul>
<h3 id="performance-analysis">性能分析</h3>
<p><em>性能分析、性能剖析及基准测试工具。</em></p>
<ul>
<li><a href="http://www.importnew.com/jhiccup/">jHiccup</a>：提供平台中JVM暂停的日志和记录。<a href="https://github.com/giltene/jHiccup">官网</a></li>
<li><a href="http://www.importnew.com/jmh/">JMH</a>：JVM基准测试工具。<a href="http://openjdk.java.net/projects/code-tools/jmh/">官网</a></li>
<li><a href="http://www.importnew.com/jprofiler/">JProfiler</a>：商业分析器。<a href="https://www.ej-technologies.com/products/jprofiler/overview.html">官网</a></li>
<li><a href="http://www.importnew.com/latencyutils/">LatencyUtils</a>：测量和报告延迟的工具。<a href="https://github.com/LatencyUtils/LatencyUtils">官网</a></li>
<li><a href="http://www.importnew.com/visualvm/">VisualVM</a>：对运行中的应用程序信息提供了可视化界面。<a href="http://visualvm.java.net/">官网</a></li>
<li><a href="http://www.importnew.com/yourkit-java-profiler/">YourKit Java Profiler</a>：商业分析器。<a href="https://www.yourkit.com/features/">官网</a></li>
</ul>
<h3 id="reactive-libraries">响应式开发库</h3>
<p><em>用来开发响应式应用程序的开发库。</em></p>
<ul>
<li><a href="http://www.importnew.com/reactive-streams/">Reactive Streams</a>：异步流处理标准，支持非阻塞式反向压力（backpressure）。<a href="https://github.com/reactive-streams/reactive-streams-jv/">官网</a></li>
<li><a href="http://www.importnew.com/reactor/">Reactor</a>：构建响应式快速数据（fast-data）应用程序的开发库。<a href="http://projectreactor.io/">官网</a></li>
<li><a href="http://www.importnew.com/rxjava/">RxJava</a>：通过JVM可观察序列（observable sequence）构建异步和基于事件的程序。<a href="https://github.com/ReactiveX/RxJava">官网</a></li>
</ul>
<h3 id="rest-frameworks">REST框架</h3>
<p><em>用来创建RESTful 服务的框架。</em></p>
<ul>
<li><a href="http://www.importnew.com/dropwizard/">Dropwizard</a>：偏向于自己使用的Web框架。用来构建Web应用程序，使用了Jetty、Jackson、Jersey和Metrics。<a href="https://dropwizard.github.io/drpwizard/">官网</a></li>
<li><a href="http://www.importnew.com/feign/">Feign</a>：受Retrofit、JAXRS-2.0和WebSocket启发的HTTP客户端连接器（binder）。<a href="https://github.com/Netflix/feign">官网</a></li>
<li>Jersey：JAX-RS参考实现。<a href="https://jersey.java.net/">官网</a></li>
<li><a href="http://www.importnew.com/resteasy/">RESTEasy</a>：经过JAX-RS规范完全认证的可移植实现。<a href="http://resteasy.jboss.org/">官网</a></li>
<li><a href="http://www.importnew.com/restexpress/">RestExpress</a>：一个Java类型安全的REST客户端。<a href="https://github.com/RestExpress/RestExpress">官网</a></li>
<li><a href="http://www.importnew.com/restx/">RestX</a>：基于注解处理和编译时源码生成的框架。<a href="http://restx.io">官网</a></li>
<li><a href="http://www.importnew.com/retrofit/">Retrofit</a>：类型安全的REST客户端。<a href="http://square.github.io/retrofit/">官网</a></li>
<li><a href="http://www.importnew.com/sparkjava/">Spark</a>：受到Sinatra启发的Java REST框架。<a href="http://sparkjava.com/">官网</a></li>
<li><a href="http://www.importnew.com/swagger/">Swagger</a>：Swagger是一个规范且完整的框架，提供描述、生产、消费和可视化RESTful Web Service。<a href="http://swagger.io/">官网</a></li>
<li><a href="http://www.importnew.com/bladejava/">Blade</a>：国人开发的一个轻量级的MVC框架. 它拥有简洁的代码，优雅的设计。<a href="https://lets-blade.com/">官网</a></li>
</ul>
<h3 id="science">科学计算与分析</h3>
<p><em>用于科学计算和分析的函数库。</em></p>
<ul>
<li><a href="http://www.importnew.com/datamelt/">DataMelt</a>：用于科学计算、数据分析及数据可视化的开发环境。<a href="http://jwork.org/dmelt/">官网</a></li>
<li><a href="http://www.importnew.com/jgrapht/">JGraphT</a>：支持数学图论对象和算法的图形库。<a href="https://github.com/jgrapht/jgrapht">官网</a></li>
<li><a href="http://www.importnew.com/jscience/">JScience</a>：用来进行科学测量和单位的一组类。<a href="http://jscience.org/">官网</a></li>
</ul>
<h3 id="search">搜索引擎</h3>
<p><em>文档索引引擎，用于搜索和分析。</em></p>
<ul>
<li><a href="http://www.importnew.com/solr/">Apache Solr</a>：一个完全的企业搜索引擎。为高吞吐量通信进行了优化。<a href="http://lucene.apache.org/solr/">官网</a></li>
<li>Elasticsearch：一个分布式、支持多租户（multitenant）全文本搜索引擎。提供了RESTful Web接口和无schema的JSON文档。<a href="http://www.elsticsearch.org/">官网</a></li>
<li>Apache Lucene：是一个开放源代码的全文检索引擎工具包，是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎。<a href="http://lucene.apache.org/">官网</a></li>
</ul>
<h3 id="security">安全</h3>
<p><em>用于处理安全、认证、授权或会话管理的函数库。</em></p>
<ul>
<li><a href="http://www.importnew.com/shiro/">Apache Shiro</a>：执行认证、授权、加密和会话管理。<a href="http://shiro.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/bouncy-castle/">Bouncy Castle</a>，涵盖了从基础的帮助函数到PGP/SMIME操作。<a href="https://www.bouncycastle.org/java.html">官网</a>：多途加密开发库。支持JCA提供者（JCA provider)</li>
<li><a href="http://www.importnew.com/cryptomator/">Cryptomator</a>：在云上进行客户端跨平台透明加密。<a href="https://cryptomator.org/">官网</a></li>
<li><a href="http://www.importnew.com/keycloak/">Keycloak</a>：为浏览器应用和RESTful Web Service集成SSO和IDM。目前还处于beta版本，但是看起来非常有前途。<a href="http://keycloak.jboss.org/">官网</a></li>
<li><a href="http://www.importnew.com/picketlink/">PicketLink</a>：PicketLink是一个针对Java应用进行安全和身份认证管理的大型项目（Umbrella Project）。<a href="http://picketlink.org/">官网</a></li>
<li><a href="https://github.com/dromara/sa-token">Sa-Token</a>：Sa-Token 是一个轻量级 Java 权限认证框架，主要解决：登录认证、权限认证、Session会话、单点登录、OAuth2.0、微服务网关鉴权 等一系列权限相关问题。<a href="https://sa-token.dev33.cn/">官网</a></li>
</ul>
<h3 id="serialization">序列化</h3>
<p><em>用来高效处理序列化的函数库。</em></p>
<ul>
<li><a href="http://www.importnew.com/flatbuffers/">FlatBuffers</a>：高效利用内存的序列化函数库，无需解包和解析即可高效访问序列化数据。<a href="https://github.com/google/flatbuffers">官网</a></li>
<li><a href="http://www.importnew.com/kryo/">Kryo</a>：快速、高效的对象图形序列化框架。<a href="https://github.com/EsotericSoftware/kryo">官网</a></li>
<li><a href="http://www.importnew.com/fst/">FST</a>：提供兼容JDK的高性能对象图形序列化。<a href="https://github.com/RuedigerMoeller/fast-serialization">官网</a></li>
<li><a href="http://www.importnew.com/messagepack/">MessagePack</a>：一种高效的二进制序列化格式。<a href="https://github.com/msgpack/msgpack-java">官网</a></li>
</ul>
<h3 id="server">应用服务器</h3>
<p><em>用来部署应用程序的服务器。</em></p>
<ul>
<li><a href="http://www.importnew.com/apache-tomcat/">Apache Tomcat</a>：针对Servlet和JSP的应用服务器，健壮性好且适用性强。<a href="http://tomcat.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/tomee/">Apache TomEE</a>：Tomcat加Java EE。<a href="http://tomee.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/jetty/">Jetty</a>：轻量级、小巧的应用服务器，通常会嵌入到项目中。<a href="http://www.eclipse.org/jetty/">官网</a></li>
<li><a href="http://www.importnew.com/websphere-liberty/">WebSphere Liberty</a>：轻量级、模块化应用服务器，由IBM开发。<a href="https://developer.ibm.com/wasdev/">官网</a></li>
<li><a href="http://www.importnew.com/wildfly/">WildFly</a>：之前被称作JBoss，由Red Hat开发。支持很多Java EE功能。<a href="http://www.wildfly.org/">官网</a></li>
</ul>
<h3 id="template-engine">模板引擎</h3>
<p><em>在模板中替换表达式的工具。</em></p>
<ul>
<li><a href="http://www.importnew.com/velocity/">Apache Velocity</a>：提供HTML页面模板、email模板和通用开源代码生成器模板。<a href="http://velocity.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/freemarker/">FreeMarker</a>：通用模板引擎，不需要任何重量级或自己使用的依赖关系。<a href="http://freemarker.org/">官网</a></li>
<li><a href="http://www.importnew.com/handlebars-java/">Handlebars.java</a>：使用Java编写的模板引擎，逻辑简单，支持语义扩展（semantic Mustache）。<a href="http://jknack.github.io/handlebars.java/">官网</a></li>
<li><a href="http://www.importnew.com/thymeleaf/">Thymeleaf</a>：旨在替换JSP，支持XML文件的工具。<a href="http://www.thymeleaf.org/">官网</a></li>
<li><a href="http://ibeetl.com/">Beetl</a>：新一代的模板引擎，功能强大，性能良好，超过当前流行的模板引擎。而且还易学易用。<a href="http://ibeetl.com/">官网</a></li>
</ul>
<h3 id="testing">测试</h3>
<p><em>测试内容从对象到接口，涵盖性能测试和基准测试工具。</em></p>
<ul>
<li><a href="http://www.importnew.com/jmeter/">Apache JMeter</a>：功能性测试和性能评测。<a href="http://jmeter.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/arquillian/">Arquillian</a>：集成测试和功能行测试平台，集成Java EE容器。<a href="http://arquillian.org/">官网</a></li>
<li><a href="http://www.importnew.com/assertj/">AssertJ</a>：支持流式断言提高测试的可读性。<a href="http://joel-costigliola.github.io/assertj/">官网</a></li>
<li><a href="http://www.importnew.com/awaitility/">Awaitility</a>：用来同步异步操作的DSL。<a href="https://github.com/jayway/awaitility">官网</a></li>
<li><a href="http://www.importnew.com/cucumber-jvm/">Cucumber</a>：BDD测试框架。<a href="https://github.com/cucumber/cucumber-jvm">官网</a></li>
<li>Gatling：设计为易于使用、可维护的和高性能负载测试工具。<a href="http://gatling.io/">官网</a></li>
<li><a href="http://www.importnew.com/hamcrest/">Hamcrest</a>：可用来灵活创建意图（intent）表达式的匹配器。<a href="http://hamcrest.org/JavaHamcrest/">官网</a></li>
<li>JMockit：用来模拟静态、final方法等。<a href="http://jmockit.org/">官网</a></li>
<li><a href="http://www.importnew.com/junit/">JUnit</a>：通用测试框架。<a href="http://junit.org/">官网</a></li>
<li><a href="http://www.importnew.com/mockito/">Mockito</a>：在自动化单元测试中创建测试对象，为TDD或BDD提供支持。<a href="https://github.com/mockito/mockito">官网</a></li>
<li><a href="http://www.importnew.com/powermock/">PowerMock</a>： 支持模拟静态方法、构造函数、final类和方法、私有方法以及移除静态初始化器的模拟工具。<a href="https://github.com/jayway/powermock">官网</a></li>
<li><a href="http://www.importnew.com/rest-assured/">REST Assured</a>：为REST/HTTP服务提供方便测试的Java DSL。<a href="https://github.com/jayway/rest-assured">官网</a></li>
<li><a href="http://www.importnew.com/selenide/">Selenide</a>：为Selenium提供精准的周边API，用来编写稳定且可读的UI测试。<a href="http://selenide.org/">官网</a></li>
<li><a href="http://www.importnew.com/selenium/">Selenium</a>：为Web应用程序提供可移植软件测试框架。<a href="http://docs.seleniumhq.org/">官网</a></li>
<li><a href="http://www.importnew.com/spock/">Spock</a>：JUnit-compatible framework featuring an expressive Groovy-derived specification language.<a href="http://docs.spockframework.org/">官网</a>兼容JUnit框架，支持衍生的Groovy范的语言。</li>
<li><a href="http://www.importnew.com/testng/">TestNG</a>：测试框架。<a href="http://testng.org/">官网</a></li>
<li><a href="http://www.importnew.com/truth/">Truth</a>：Google的断言和命题（proposition）框架。<a href="https://github.com/google/truth">官网</a></li>
<li><a href="http://www.importnew.com/unitils/">Unitils</a>：模块化测试函数库，支持单元测试和集成测试。<a href="http://www.unitils.org/">官网</a></li>
<li><a href="http://www.importnew.com/wiremock/">WireMock</a>：Web Service测试桩（Stub）和模拟函数。<a href="http://wiremock.org/">官网</a></li>
</ul>
<h3 id="utility">通用工具库</h3>
<p><em>通用工具类函数库。</em></p>
<ul>
<li><a href="http://www.importnew.com/apache-commons/">Apache Commons</a>：提供各种用途的函数，比如配置、验证、集合、文件上传或XML处理等。<a href="http://commons.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/args4j/">args4j</a>：命令行参数解析器。<a href="http://args4j.kohsuke.org/">官网</a></li>
<li><a href="http://www.importnew.com/crash/">CRaSH</a>：为运行进行提供CLI。<a href="http://www.crashub.org">官网</a></li>
<li><a href="http://www.importnew.com/gephi/">Gephi</a>：可视化跨平台网络图形化操作程序。<a href="https://github.com/gephi/gephi/">官网</a></li>
<li><a href="http://www.importnew.com/guava/">Guava</a>：集合、缓存、支持基本类型、并发函数库、通用注解、字符串处理、I/O等。<a href="https://github.com/google/guava">官网</a></li>
<li><a href="http://www.importnew.com/jade/">JADE</a>：构建、调试多租户系统的框架和环境。<a href="http://jade.tilab.com/">官网</a></li>
<li><a href="http://www.importnew.com/javatuples/">javatuples</a>：正如名字表示的那样，提供tuple支持。尽管目前tuple的概念还有留有争议。<a href="http://www.javatuples.org/">官网</a></li>
<li><a href="http://www.importnew.com/jcommander/">JCommander</a>：命令行参数解析器。<a href="http://jcommander.org/">官网</a></li>
<li><a href="http://www.importnew.com/protege/">Protégé</a>：提供存在论（ontology）编辑器以及构建知识系统的框架。<a href="http://protege.stanford.edu/">官网</a></li>
<li><a href="https://github.com/looly/hutool">Hutool</a>：一个Java工具集，缓存、HTTP、加密解密、DFA、JSON、分组配置文件、数据库操作、图片验证码、Excel读写、定时任务、模板引擎、邮件、Servlet、二维码、Emoji、分词等一系列工具类。<a href="https://hutool.cn">官网</a></li>
</ul>
<h3 id="web-crawling">网络爬虫</h3>
<p><em>用于分析网站内容的函数库。</em></p>
<ul>
<li><a href="http://www.importnew.com/nutch/">Apache Nutch</a>：可用于生产环境的高度可扩展、可伸缩的网络爬虫。<a href="http://nutch.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/crawler4j/">Crawler4j</a>：简单的轻量级网络爬虫。<a href="https://github.com/yasserg/crawler4j">官网</a></li>
<li><a href="http://www.importnew.com/jsoup/">JSoup</a>：刮取、解析、操作和清理HTML。<a href="http://jsoup.org/">官网</a></li>
<li><a href="https://github.com/code4craft/webmagic/">webmagic</a>：一个可扩展的Java爬虫框架，架构类似Python的Scrapy。</li>
</ul>
<h3 id="web-frameworks">Web框架</h3>
<p><em>用于处理Web应用程序不同层次间通讯的框架。</em></p>
<ul>
<li><a href="http://www.importnew.com/apache-tapestry/">Apache Tapestry</a>：基于组件的框架，使用Java创建动态、强健的、高度可扩展的Web应用程序。<a href="http://tapestry.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/apache-wicket/">Apache Wicket</a>：基于组件的Web应用框架，与Tapestry类似带有状态显示GUI。<a href="http://wicket.apache.org/">官网</a></li>
<li><a href="http://www.importnew.com/gwt/">Google Web Toolkit</a>：一组Web开发工具集，包含在客户端将Java代码转为JavaScript的编译器、XML解析器、RCP <a href="http://www.gwtproject.org/">官网</a>API、JUnit集成、国际化支持和GUI控件。</li>
<li><a href="http://www.importnew.com/grails/">Grails</a>：Groovy框架，旨在提供一个高效开发环境，使用约定而非配置、没有XML并支持混入（mixin）。<a href="https://grails.org/">官网</a></li>
<li><a href="http://www.importnew.com/ninja/">Ninja</a>：Java全栈Web开发框架。非常稳固、快速和高效。<a href="http://www.ninjaframework.org/">官网</a></li>
<li><a href="http://www.importnew.com/pippo/">Pippo</a>：小型、高度模块化的类Sinatra框架。<a href="http://www.pippo.ro/">官网</a></li>
<li><a href="http://www.importnew.com/play-framework/">Play</a>：使用约定而非配置，支持代码热加载并在浏览器中显示错误。<a href="https://www.playframework.com/">官网</a></li>
<li><a href="http://www.importnew.com/primefaces/">PrimeFaces</a>：JSF框架，提供免费和带支持的商业版本。包括若干前端组件。<a href="http://primefaces.org/">官网</a></li>
<li><a href="http://www.importnew.com/ratpack/">Ratpack</a>：一组Java开发函数库，用于构建快速、高效、可扩展且测试完备的HTTP应用程序。<a href="https://ratpack.io/">官网</a></li>
<li><a href="http://www.importnew.com/spring-boot/">Spring Boot</a>：微框架，简化了Spring新程序的开发过程。<a href="http://projects.spring.io/spring-boot/">官网</a></li>
<li><a href="http://www.importnew.com/spring-framework/">Spring</a>：旨在简化Java EE的开发过程，提供依赖注入相关组件并支持面向切面编程。<a href="http://projects.spring.io/spring-framework/">官网</a></li>
<li><a href="http://www.importnew.com/vaadin/">Vaadin</a>：基于GWT构建的事件驱动框架。使用服务端架构，客户端使用Ajax。<a href="https://vaadin.com/">官网</a></li>
<li><a href="http://www.importnew.com/bladejava/">Blade</a>：国人开发的一个轻量级的MVC框架. 它拥有简洁的代码，优雅的设计。<a href="https://lets-blade.com/">官网</a></li>
</ul>
<h3 id="Business-Process-Management">业务流程管理套件</h3>
<p><em>流程驱动的软件系统构建。</em></p>
<ul>
<li><a href="http://www.importnew.com/jbpm/">jBPM</a>：非常灵活的业务流程管理框架，致力于构建开发与业务分析人员之间的桥梁。<a href="http://www.jbpm.org/">官网</a></li>
<li>Activity：轻量级工作流和业务流程管理框架。<a href="http://www.activiti.org/">官网</a> <a href="https://github.com/Activiti/Activiti">github</a></li>
</ul>
<h2 id="resources">资源</h2>
<h3 id="communities">社区</h3>
<ul>
<li>r/java：Reddit的Java子社区。<a href="https://www.reddit.com/r/java">官网</a></li>
<li>stackoverflow：问答平台。<a href="http://stackoverflow.com/questions/tagged/java">官网</a></li>
<li>vJUG：虚拟Java用户组。<a href="http://virtualjug.com/">官网</a></li>
<li>java8 新特性教程例子。<a href="https://github.com/winterbe/java8-tutorial">github</a></li>
</ul>
<h3 id="influential-books">有影响力的书</h3>
<p><em>具有广泛影响且值得阅读的Java经典书籍。</em></p>
<ul>
<li><a href="http://www.importnew.com/effective-java/">Effective Java (2nd Edition)</a></li>
<li><a href="http://www.importnew.com/java-8-in-action/">Java 8 in Action</a></li>
<li><a href="http://www.importnew.com/java-concurrency-in-practice/">Java Concurrency in Practice | Java并发编程实战</a></li>
<li><a href="http://www.importnew.com/thinking-in-java/">Thinking in Java | Java编程思想</a></li>
<li><a href="http://www.importnew.com/java-puzzlers/">Java Puzzlers | Java解惑</a></li>
</ul>
<h3 id="podcasts">播客</h3>
<p><em>可以一边编程一边听的东西。</em></p>
<ul>
<li>Java Council：<a href="http://virtualjug.com/#podcast/">官网</a></li>
<li>Java Posse：Discontinued as of 02/2015.<a href="http://www.javaposse.com/">官网</a></li>
</ul>
<h3 id="weibo-weixin">微博、微信公众号</h3>
<ul>
<li>ImportNew：是最受欢迎的、专注Java技术分享的微信公众号。专注Java技术分享，包括Java基础技术、进阶技能、架构设计和Java技术领域动态等。<br>
<br><img src="http://ww2.sinaimg.cn/small/63918611gw1epb2c7rv2uj20460463ym.jpg" alt=""></li>
<li>ImportNew 微博：<a href="http://weibo.com/importnew">@ImportNew</a></li>
</ul>
<h3 id="twitter">Twitter</h3>
<ul>
<li><a href="https://twitter.com/AdamBien/">Adam Bien</a>：自由职业者、作家、JavaONE明星演讲者、顾问、Java Champion。</li>
<li><a href="https://twitter.com/agoncal/">Antonio Goncalves</a>：Java Champion、JUG Leader、Devoxx France、Java EE 6/7、JCP、作家。</li>
<li><a href="https://twitter.com/arungupta/">Arun Gupta</a>：Java Champion、JavaONE明星演讲者、JUG Leader、Devoxx4Kids成员、Red Hatter。</li>
<li><a href="https://twitter.com/brunoborges">Bruno Borges</a>：Oracle产品经理、Java Jock。</li>
<li><a href="https://twitter.com/edburns">Ed Burns</a>：Oracle技术团队顾问。</li>
<li><a href="https://twitter.com/baeldung">Eugen Paraschiv</a>：Spring安全课程作者。</li>
<li><a href="https://twitter.com/JavaFXpert">James Weaver</a>：Java、JavaFX、IoT开发者、作者和演讲者。</li>
<li><a href="https://twitter.com/Java_EE/">Java EE</a>：Java EE Twitter官方账号。</li>
<li><a href="https://twitter.com/Oraclejavamag">Java Magazine</a>：Java杂志官方账号。</li>
<li><a href="https://twitter.com/javanetbuzz/">Java.net</a>：Java.net官方账号。</li>
<li><a href="https://twitter.com/java/">Java</a>：Java Twitter官方账号。</li>
<li><a href="https://twitter.com/javinpaul">Javin Paul</a>：知名Java博客作者。</li>
<li><a href="https://twitter.com/lukaseder">Lukas Eder</a>：Data Geekery（jOOQ）创始人兼CEO。</li>
<li><a href="https://twitter.com/mariofusco">Mario Fusco</a>：RedHatter、JUG协调、活跃讲师和作者。</li>
<li><a href="https://twitter.com/mreinhold">Mark Reinhold</a>：Oracle首席架构师、Java平台开发组。</li>
<li><a href="https://twitter.com/karianna">Martijn Verburg</a>：London JUG co-leader、演讲者、作家、Java Champion等。</li>
<li><a href="https://twitter.com/OpenJDK">OpenJDK</a>：OpenJDK官方账号。</li>
<li><a href="https://twitter.com/reza_rahman">Reza Rahman</a>：Java EE、GlassFish、WebLogic传道者、作家、演讲者、开源黑客。</li>
<li><a href="https://twitter.com/sjmaple">Simon Maple</a>：Java Champion、virtualJUG创始人、LJC leader、RebelLabs作者。</li>
<li><a href="https://twitter.com/jodastephen">Stephen Colebourne</a>： Java Champion、演讲者。</li>
<li><a href="https://twitter.com/kablosna">Tim Boudreau</a>：作家、NetBeans大牛。</li>
<li><a href="https://twitter.com/trisha_gee">Trisha Gee</a>：Java Champion、演讲者。</li>
</ul>
<h3 id="weibo-weixin">微博、微信公众号</h3>
<ul>
<li>ImportNew 微博：<a href="http://weibo.com/importnew">@ImportNew</a></li>
<li>ImportNew：最受欢迎的、专注Java技术分享的微信公众号。专注Java技术分享，包括Java基础技术、进阶技能、架构设计和Java技术领域动态等。<br>
<br><img src="http://ww2.sinaimg.cn/small/63918611gw1epb2c7rv2uj20460463ym.jpg" width=150 height=150></li>
</ul>
<h3 id="websites">知名网站</h3>
<p><em>值得关注的Java技术站点。</em></p>
<h4>中文站点</h4>
<ul>
<li><a href="http://www.importnew.com/">ImportNew</a>（ImportNew 专注 Java 技术）</li>
</ul>
<h4>英文站点</h4>
<ul>
<li><a href="https://android-arsenal.com">Android Arsenal</a></li>
<li><a href="http://www.importnew.com/google-java-style/">Google Java Style</a>：<a href="https://google.github.io/styleguide/javaguide.html">官网</a></li>
<li><a href="http://www.importnew.com/infoq/">InfoQ</a>：<a href="http://www.infoq.com/">官网</a></li>
<li><a href="http://www.javacodegeeks.com/">Java Code Geeks</a></li>
<li><a href="http://blog.jooq.org/">Java, SQL, and jOOQ</a></li>
<li><a href="http://java.net/">Java.net</a></li>
<li><a href="http://java.dzone.com/">Javalobby</a></li>
<li><a href="http://www.importnew.com/javaworld/">JavaWorld</a>：<a href="http://www.javaworld.com/">官网</a></li>
<li><a href="http://www.importnew.com/jaxenter/">JAXenter</a>：<a href="https://jaxenter.com/">官网</a></li>
<li><a href="http://zeroturnaround.com/rebellabs/">RebelLabs</a></li>
<li><a href="http://www.importnew.com/javaspecialists/">The Java Specialist’ Newsletter</a>：<a href="http://www.javaspecialists.eu/archive/archive.jsp">官网</a></li>
<li><a href="http://blog.takipi.com/">The Takipi Blog</a></li>
<li><a href="http://www.importnew.com/theserverside/">TheServerSide.com</a>：服务器编程交流平台是一个老牌的IT信息网站，关注服务器端编程的，以Java和.Net周边信息为主。<a href="http://www.theserverside.com/">官网</a></li>
<li><a href="http://www.thoughts-on-java.org/">Thoughts On Java</a></li>
<li><a href="http://vanillajava.blogspot.ch/">Vanilla Java</a></li>
<li><a href="http://vladmihalcea.com/">Vlad Mihalcea on Hibernate</a></li>
<li><a href="https://www.voxxed.com/">Voxxed</a></li>
<li><a href="http://www.importnew.com/onjava/">OnJava</a>：O’Reilly Java包含最新的Java技术资讯，优质代码，完全的实例和详解。<a href="http://www.onjava.com/">官网</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes的网络模型：Overlay和Underlay</title>
    <url>/2023/11/08/Kubernetes%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%EF%BC%9AOverlay%E5%92%8CUnderlay/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     本文分别介绍 Overlay 网络模型和 Underlay 网络模型。</p>
<p>     Overlay 网络模型物理网络模型中，连通多个物理网桥上的主机的一个简单办法是通过媒介直接连接这些网桥设备，各个主机处于同一个局域网（LAN）之中，管理员只需要确保各个网桥上每个主机的 IP 地址不相互冲突即可。类似地，若能够直接连接宿主机上的虚拟网桥形成一个大的局域网，就能在数据链路层打通各宿主机上的内部网络，让容器可通过自有IP地址直接通信。为避免各容器间的 IP 地址冲突，一个常见的解决方案是将每个宿主机分配到同一网络中的不同子网，各主机基于自有子网向其容器分配 IP 地址。</p>
<p>     显然，主机间的网络通信只能经由主机上可对外通信的网络接口进行，跨主机在数据链路层直接连接虚拟网桥的需求必然难以实现，除非借助宿主机间的通信网络构建的通信“隧道”进行数据帧转发。这种于某个通信网络之上构建出的另一个逻辑通信网络通常即 10.1.2 节提及的 Overlay 网络或Underlay 网络。图 10-7 为 Overlay 网络功能示意图。</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E4%BA%91%E8%AE%A1%E7%AE%97/K8S/Kubernetes%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%EF%BC%9AOverlay%E5%92%8CUnderlay/overlay%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.png" alt="图 10-7 Overlay网络功能示意图"></p>
<p>     隧道转发的本质是将容器双方的通信报文分别封装成各自宿主机之间的报文，借助宿主机的网络“隧道”完成数据交换。这种虚拟网络的基本要求是各宿主机只需支持隧道协议即可，对于底层网络没有特殊要求。VXLAN 协议是目前最流行的 Overlay 网络隧道协议之一，它也是由 IETF 定义的 NVO3（Network Virtualization over Layer 3）标准技术之一，采用 L2 over L4（MAC-in-UDP）的报文封装模式，将二层报文用三层协议进行封装，可实现二层网络在三层范围内进行扩展，将“二层域”突破规模限制形成“大二层域”。</p>
<p>     那么，同一大二层域就类似于传统网络中 VLAN（虚拟局域网）的概念，只不过在 VXLAN 网络中，它被称作 Bridge-Domain，以下简称为 BD。类似于不同的 VLAN 需要通过 VLAN ID 进行区分，各 BD 要通过 VNI 加以标识。但是，为了确保 VXLAN 机制通信过程的正确性，涉及 VXLAN 通信的 IP 报文一律不能分片，这就要求物理网络的链路层实现中必须提供足够大的 MTU 值，或修改其 MTU 值以保证 VXLAN 报文的顺利传输。不过，降低默认MTU 值，以及额外的头部开销，必然会影响到报文传输性能。VXLAN 的显著的优势之一是对底层网络没有侵入性，管理员只需要在原有网络之上添加一些额外设备即可构建出虚拟的逻辑网络来。这个额外添加的设备称为 VTEP（VXLAN Tunnel Endpoints），它工作于 VXLAN 网络的边缘，负责相关协议报文的封包和解包等操作，从作用来说相当于 VXLAN 隧道的出入口设备。VTEP 代表着一类支持 VXLAN 协议的交换机，而支持 VXLAN 协议的操作系统也可将一台主机模拟为 VTEP，Linux 内核自 3.7 版本开始通过 vxlan 内核模块原生支持此协议。于是，各主机上由虚拟网桥构建的 LAN 便可借助 vxlan 内核模块模拟的 VTEP 设备与其他主机上的 VTEP 设备进行对接，形成隧道网络。同一个二层域内的各 VTEP 之间都需要建立 VXLAN 隧道，因此跨主机的容器间直接进行二层通信的 VXLAN 隧道是各 VTEP 之间的点对点隧道，如图 10-8 所示。</p>
<p>![图10-8 Linux VTEP](/pic/工程/云计算/K8S/Kubernetes的网络模型：Overlay和Underlay/Linux VTEP.png)</p>
<p>     对于 Flannel 来说，这个 VTEP 设备就是各节点上生成 flannel.1 网络接口，其中的“1”是 VXLAN 中的 BD 标识 VNI，因而同一 Kubernetes 集群上所有节点的 VTEP 设备属于 VNI 为 1 的同一个 BD。</p>
<p>     类似 VLAN 的工作机制，相同 VXLAN VNI 在不同 VTEP 之间的通信要借助二层网关来完成，而不同 VXLAN 之间，或者 VXLAN同非 VXLAN 之间的通信则需经由三层网关实现。VXLAN 支持使用集中式和分布式两种形式的网关：前者支持流量的集中管理，配置和维护较为简单，但转发效率不高，且容易出现瓶颈和网关可用性问题；后者以各节点为二层或三层网关，消除了瓶颈。然而，VXLAN 网络中的容器在首次通信之前，源 VTEP 又如何得知目标服务器在哪一个VTEP，并选择正确的路径传输通信报文呢？</p>
<p>     常见的解决思路一般有两种：多播和控制中心。</p>
<p>     多播是指同一个 BD 内的各 VTEP 加入同一个多播域中，通过多播报文查询目标容器所在的目标 VTEP。</p>
<p>     而控制中心则在某个共享的存储服务上保存所有容器子网及相关VTEP的映射信息，各主机上运行着相关的守护进程，并通过与控制中心的通信获取相关的映射信息。Flannel 默认的 VXLAN 后端采用的是后一种方式，它把网络配置信息存储在 etcd 系统上。Linux 内核自 3.7 版本开始支持vxlan 模块，此前的内核版本可以使用 UDP、IPIP 或 GRE 隧道技术。事实上，考虑到当今公有云底层网络的功能限制，Overlay 网络反倒是一种最为可行的容器网络解决方案，仅那些更注重网络性能的场景才会选择 Underlay 网络。</p>
<p>     Underlay 网络模型：Underlay 网络就是传统 IT 基础设施网络，由交换机和路由器等设备组成，借助以太网协议、路由协议和VLAN 协议等驱动，它还是 Overlay 网络的底层网络，为 Overlay 网络提供数据通信服务。容器网络中的 Underlay 网络是指借助驱动程序将宿主机的底层网络接口直接暴露给容器使用的一种网络构建技术，较为常见的解决方案有 MAC VLAN、IP VLAN 和直接路由等。</p>
<p>     <strong>MAC VLAN：</strong> MAC VLAN 支持在同一个以太网接口上虚拟出多个网络接口，每个虚拟接口都拥有唯一的 MAC 地址，并可按需配置 IP 地址。通常这类虚拟接口被网络工程师称作子接口，但在 MAC VLAN 中更常用上层或下层接口来表述。与 Bridge 模式相比，MAC VLAN 不再依赖虚拟网桥、NAT 和端口映射，它允许容器以虚拟接口方式直接连接物理接口。图 10-9 给出了 Bridge 与 MAC VLAN 网络对比示意图。</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E4%BA%91%E8%AE%A1%E7%AE%97/K8S/Kubernetes%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%EF%BC%9AOverlay%E5%92%8CUnderlay/Bridge%E4%B8%8EMAC.webp" alt="图10-9 Bridge与MAC"></p>
<p>     MAC VLAN 有 Private、VEPA、Bridge 和Passthru 几种工作模式，它们各自的工作特性如下。</p>
<ul>
<li>Private：禁止构建在同一物理接口上的多个 MAC VLAN 实例（容器接口）彼此间的通信，即便外部的物理交换机支持“发夹模式”也不行。</li>
<li>VPEA：允许构建在同一物理接口上的多个 MAC VLAN 实例（容器接口）彼此间的通信，但需要外部交换机启用发夹模式，或者存在报文转发功能的路由器设备。</li>
<li>Bridge：将物理接口配置为网桥，从而允许同一物理接口上的多个 MAC VLAN 实例基于此网桥直接通信，而无须依赖外部的物理交换机来交换报文；此为最常用的模式，甚至还是 Docker 容器唯一支持的模式。</li>
<li>Passthru：允许其中一个 MAC VLAN 实例直接连接物理接口。</li>
</ul>
<p>     由上述工作模式可知，除了 Passthru 模式外的容器流量将被 MAC VLAN 过滤而无法与底层主机通信，从而将主机与其运行的容器完全隔离，其隔离级别甚至高于网桥式网络模型，这对于有多租户需求的场景尤为有用。由于各实例都有专用的 MAC 地址，因此 MAC VLAN 允许传输广播和多播流量，但它要求物理接口工作于混杂模式，考虑到很多公有云环境中并不允许使用混杂模式，这意味着 MAC VLAN 更适用于本地网络环境。需要注意的是，MAC VLAN 为每个容器使用一个唯一的 MAC 地址，这可能会导致具有安全策略以防止 MAC 欺骗的交换机出现问题，因为这类交换机的每个接口只允许连接一个 MAC 地址。另外，有些物理网卡存在可支撑的 MAC 地址数量上限。</p>
<p>     <strong>IP VLAN</strong> IP VLAN 类似于 MAC VLAN，它同样创建新的虚拟网络接口并为每个接口分配唯一的 IP 地址，不同之处在于，每个虚拟接口将共享使用物理接口的 MAC 地址，从而不再违反防止 MAC 欺骗的交换机的安全策略，且不要求在物理接口上启用混杂模式，如图 10-10 所示。</p>
<p>![图10-10 MAC VLAN对比IP VLAN](/pic/工程/云计算/K8S/Kubernetes的网络模型：Overlay和Underlay/MAC VLAN对比IP VLAN.png)</p>
<p>     IP VLAN 有 L2 和 L3 两种模型，其中 IP VLAN L2 的工作模式类似于 MAC VLAN Bridge 模式，上层接口（物理接口）被用作网桥或交换机，负责为下层接口交换报文。</p>
<p>     而 IP VLAN L3 模式中，上层接口扮演路由器的角色，负责为各下层接口路由报文，如图 10-11 所示。IP VLAN L2 模型与MAC VLAN Bridge 模型都支持 ARP 协议和广播流量，它们拥有直接接入网桥设备的网络接口，能够通过 802.1d 数据包进行泛洪和 MAC 地址学习。但 IP VLAN L3 模式下，网络栈在容器内处理，不支持多播或广播流量，从这个意义上讲，它的运行模式与路由器的报文处理机制相同。虽然支持多种网络模型，但 MAC VLAN 和 IP VLAN 不能同时在同一物理接口上使用。Linux 内核文档中强调，MAC VLAN 和 IP VLAN 具有较高的相似度，因此，通常仅在必须使用 IP VLAN 的场景中才不使用 MAC VLAN。一般说来，强依赖于 IP VLAN 的场景有如下几个：</p>
<ul>
<li>Linux 主机连接到的外部交换机或路由器启用了防止 MAC 地址欺骗的安全策略；</li>
<li>虚拟接口的需求数量超出物理接口能够支撑的容量上限，并且将接口置于混杂模式会给性能带来较大的负面影响；</li>
<li>将虚拟接口放入不受信任的网络名称空间中可能会导致恶意的滥用。</li>
</ul>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E4%BA%91%E8%AE%A1%E7%AE%97/K8S/Kubernetes%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%EF%BC%9AOverlay%E5%92%8CUnderlay/VLAN%E7%9A%84L2%E5%92%8CL3%E6%A8%A1%E5%9E%8B.png" alt="图10-11 IP VLAN的L2和L3模型"></p>
<p>     需要注意的是，Linux 内核自 4.2 版本后才支持 IP VLAN 网络驱动，且在 Linux 主机上使用 ip link 命令创建的 802.1q配置接口不具有持久性，因此需依赖管理员通过网络启动脚本保持配置。</p>
<p>     <strong>直接路由</strong> “直接路由”模型放弃了跨主机容器在 L2 的连通性，而专注于通过路由协议提供容器在 L3 的通信方案。这种解决方案因为更易于集成到现在的数据中心的基础设施之上，便捷地连接容器和主机，并在报文过滤和隔离方面有着更好的扩展能力及更精细的控制模型，因而成为容器化网络较为流行的解决方案之一。</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E4%BA%91%E8%AE%A1%E7%AE%97/K8S/Kubernetes%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%EF%BC%9AOverlay%E5%92%8CUnderlay/%E7%9B%B4%E6%8E%A5%E8%B7%AF%E7%94%B1%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="图10-12 直接路由虚拟网络示意图"></p>
<p>一个常用的直接路由解决方案如图 10-12 所示，每个主机上的各容器在二层通过网桥连通，网关指向当前主机上的网桥接口地址。跨主机的容器间通信，需要依据主机上的路由表指示完成报文路由，因此每个主机的物理接口地址都有可能成为另一个主机路由报文中的“下一跳”，这就要求各主机的物理接口必须位于同一个 L2 网络中。于是，在较大规模的主机集群中，问题的关键便转向如何更好地为每个主机维护路由表信息。常见的解决方案有：</p>
<ul>
<li>Flannel host-gw 使用存储总线 etcd 和工作在每个节点上的 flanneld 进程动态维护路由；</li>
<li>Calico 使用 BGP（Border Gateway Protocol）协议在主机集群中自动分发和学习路由信息。与 Flannel 不同的是，Calico 并不会为容器在主机上使用网桥，而是仅为每个容器生成一对 veth 设备，留在主机上的那一端会在主机上生成目标地址，作为当前容器的路由条目，如图 10-13 所示。</li>
</ul>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E4%BA%91%E8%AE%A1%E7%AE%97/K8S/Kubernetes%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%EF%BC%9AOverlay%E5%92%8CUnderlay/Calico%E7%9A%84%E7%9B%B4%E6%8E%A5%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%9E%8B%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="图10-13 Calico的直接路由模型示意图"></p>
<p>     Calico 的直接路由模型示意图显然，较 Overlay 来说，无论是 MAC VLAN、IP VLAN 还是直接路由机制的 Underlay 网络模型的实现，它们因无须额外的报文开销而通常有着更好的性能表现，但对底层网络有着更多的限制条件。</p>
]]></content>
      <tags>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>工作的意义</title>
    <url>/2023/11/03/%E5%B7%A5%E4%BD%9C%E7%9A%84%E6%84%8F%E4%B9%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>       工作的目的是为了赚钱，赚不到钱就获取认知、经历和阅历，不应该因为工作而失去生活的意义。</p>
<div id="dplayer14" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer14"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/工作的意义/工作的目的是为了赚钱和获取认知、经历和阅历，不应该因为工作而失去生活的意义.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM参数概览(JDK8)</title>
    <url>/2023/11/03/JVM%E5%8F%82%E6%95%B0%E6%A6%82%E8%A7%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/JVM%E5%8F%82%E6%95%B0%E6%A6%82%E8%A7%88(JDK8)/JVM%E5%8F%82%E6%95%B0%E6%A6%82%E8%A7%88(JDK8).png" alt="JVM参数概览(JDK8)"></p>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux性能工具</title>
    <url>/2023/10/25/Linux%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="性能工具谱图"><strong>性能工具谱图</strong></h4>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/Linux%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7/Linux%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7%E5%85%A8%E5%B1%80%E6%A6%82%E8%A7%88.png" alt="性能工具谱图"></p>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP报文结构和功能简析</title>
    <url>/2023/09/15/TCP%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%E5%92%8C%E5%8A%9F%E8%83%BD%E7%AE%80%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-简介"><strong>1、简介</strong></h2>
<p>     TCP：传输、控制、协议。</p>
<p>     TCP 与UDP 最大却别就在那个C上面，它充分实现了数据传输时各种控制功能。可以进行丢包重发控制，还可以对次序乱掉的数据包进行顺序控制，还能控制传输流量，这些是UDP中没有的。即 TCP 提供一种面向连接的、可靠的字节流服务。TCP 是一中面向有链接的协议，只有在确认对端存在的时候，才会发送分数据，从而也可以控制通信流量的浪费。</p>
<p>     什么是可靠的传输：不丢包、不损坏、不乱序、不重复。TCP 通过校验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制来实现可靠传输。接收端查询就收数据 TCP 首部中的序号和数据长度。将自己下一步应该接受的序列号作为确认应答返送回去。就这样，通过序列号和确认应答，TCP 实现可靠传输。一般使用 TCP 首部用于控制的字段来管理连接。一个连接的建立和断开，正常过程中，至少需要来回共 7 个包才能完成。</p>
<h2 id="2-tcp首部"><strong>2、TCP首部</strong></h2>
<p>     TCP首部的数据结构如图所示：</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%E5%92%8C%E5%8A%9F%E8%83%BD%E7%AE%80%E6%9E%90/TCP%E9%A6%96%E9%83%A8.webp" alt="TCP首部"></p>
<p>     为了便于理解，忽略选项部分，固定首部通常为20个字节，将按作用分类分析。</p>
<h4 id="2-1-端口号-port"><strong>2.1、端口号(port)</strong></h4>
<p>     前 4 个字节来标识了发送方的端口号和接收方的端口号，即该数据包由谁发送，由谁接收。前 2 个字节标识源端口号，紧接着 2 个字节标识目的端口号。</p>
<p>     即发送方：(11111111,1111111)2 = (65535)10，除去0~1023。</p>
<p>     即接收方：(11111111,1111111)2 = (65535)10，除去0~1023。</p>
<h4 id="2-2-序号-seq"><strong>2.2、序号(seq)</strong></h4>
<p>     TCP 是面向字节流的。在一个 TCP 连接中传送的字节流中的每一个字节都按顺序编号。整个要传送的字节流的起始序号必须在连接建立时设置。首部中的序号字段值则是指的是本报文段所发送的数据的第一个字节的序号。长度为 4 字节，序号是 32bit 的无符号数,序号到达 2(32次方) - 1 后又从 0 开始。</p>
<h4 id="2-3-确认号-ack"><strong>2.3、确认号(ack)</strong></h4>
<p>     ack：确认序号，即确认字节的序号，更确切地说，是发送确认的一端所期望收到的下一个序号。所谓的发送确认的一端就是将确认信息发出的一端。比如第二次握手的S端就是发送确认的一端。确认序号为上次接收的最后一个字节序号加1.只有确认标志位(ACK)为1的时候，确认序号才有效。</p>
<h4 id="2-4-数据偏移"><strong>2.4、数据偏移</strong></h4>
<p>     也叫首部长度，占4个bit,它指出TCP报文段的数据起始处距离TCP报文段的起始处有多远。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84%E5%92%8C%E5%8A%9F%E8%83%BD%E7%AE%80%E6%9E%90/%E6%95%B0%E6%8D%AE%E5%81%8F%E7%A7%BB.webp" alt="TCP首部"></p>
<p>     由于首部中还有长度不确定的选项字段，因此数据偏移字段是必要的。“首部长度”是 4 位二进制数，单位是32位字，能表示的最大十进制数字是 15。(1111)2=(15)10,即是 15 个 32 位，一个 32 位是 4 个字节，因此数据偏移的最大值是 15x4=60 个字节，这也是 TCP 首部的最大字节。因为固定首部的存在，数据偏移的值最小为20个字节，因此选项长度不能超过40字节*（减去20个字节的固定首部）。</p>
<h4 id="2-5-保留-reserve"><strong>2.5、保留(reserve)</strong></h4>
<p>     占 6 位，保留为今后使用，但目前应置为 0。</p>
<h4 id="2-6-紧急urg-urgent"><strong>2.6、紧急URG（urgent）</strong></h4>
<p>     当 URG=1 时，表明紧急指针字段有效。</p>
<p>     它告诉系统此报文段中有紧急数据，应尽快发送（相当于高优先级的数据），而不要按原来的排队顺序来传送。</p>
<p>     例如，已经发送了很长的一个程序要在远地的主机上运行。但后来发现了一些问题，需要取消该程序的运行，因此用户从键盘发出中断命令。如果不使用紧急数据，那么这两个字符将存储在接收TCP的缓存末尾。只有在所有的数据被处理完毕后这两个字符才被交付接收方的应用进程。这样做就浪费了很多时间。</p>
<p>     当 URG 置为 1 时，应用进程就告诉 TCP 有紧急数据要传送。于是 TCP 就把紧急数据插入到本报文段数据的最前面，而在紧急数据后面的数据仍然是普通数据。这时要与首部中紧急指针（Urgent Pointer）字段配合使用。</p>
<h4 id="2-7-确认ack-acknowledgment"><strong>2.7、确认ACK（acknowledgment）</strong></h4>
<p>     仅当ACK = 1时确认号字段才有效，当ACK = 0时确认号无效。TCP规定，在连接建立后所有的传送的报文段都必须把ACK置为1。</p>
<h4 id="2-8-推送-psh-push"><strong>2.8、推送 PSH（push）</strong></h4>
<p>     当两个应用进程进行交互式的通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应。在这种情况下，TCP就可以使用推送（push）操作。发送方TCP把PSH置为1，并立即创建一个报文段发送出去。接收方TCP收到PSH=1的报文段，就尽快地（即“推送”向前）交付接收应用进程。而不用再等到整个缓存都填满了后再向上交付。</p>
<h4 id="2-9-复位rst-reset"><strong>2.9、复位RST（reset）</strong></h4>
<p>     当RST=1时，表明TCP连接中出现了严重错误（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立传输连接。RST置为1还用来拒绝一个非法的报文段或拒绝打开一个连接。</p>
<h4 id="2-10-同步syn-synchronization"><strong>2.10、同步SYN（synchronization）</strong></h4>
<p>     在连接建立时用来同步序号。当SYN=1而ACK=0时，表明这是一个连接请求报文段。对方若同意建立连接，则应在响应的报文段中使SYN=1和ACK=1。</p>
<p>     因此SYN=1就表示这是一个连接请求或连接接受报文。</p>
<h4 id="2-11-终止fin-finis-意思是-完-终"><strong>2.11、终止FIN（finis，意思是“完”“终”）</strong></h4>
<p>     用来释放一个连接。当FIN=1时，表明此报文段的发送发的数据已发送完毕，并要求释放运输连接。</p>
<h4 id="2-12-窗口"><strong>2.12、窗口</strong></h4>
<p>     占2字节。窗口值是(0，216 -1)之间的整数。窗口指的是发送本报文段的一方的接受窗口（而不是自己的发送窗口）,窗口大小是给对方用的。窗口值告诉对方：从本报文段首部中的确认号算起，接收方目前允许对方一次发送的数据量（以字节为单位）。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</p>
<p>     总之，窗口值作为接收方让发送方设置其发送窗口的依据。</p>
<p>     例如，A发送了一个报文段，其确认号是3000，窗口字段是1000.这就是告诉对方B：“从3000算起，A接收缓存空间还可接受1000个字节数据，字节序号是3000-3999”，可以想象到河道的阀门。</p>
<p>     总之：窗口字段明确指出了现在允许对方发送的数据量。窗口值经常在动态变化。</p>
<h4 id="2-13-检验和"><strong>2.13、检验和</strong></h4>
<p>     占2字节。检验和字段检验的范围包括首部和数据这两部分。和UDP用户数据报一样，在计算检验和时，要在TCP报文段的前面加上12字节的伪首部。伪首部的格式和UDP用户数据报的伪首部一样。但应把伪首部第4个字段中的17改为6（TCP的协议号是6）；把第5字段中的UDP中的长度改为TCP长度。接收方收到此报文段后，仍要加上这个伪首部来计算检验和。若使用TPv6,则相应的伪首部也要改变。</p>
<h4 id="2-14-紧急指针"><strong>2.14、紧急指针</strong></h4>
<p>     占2字节。紧急指针仅在URG=1时才有意义，它指出本报文段中的紧急数据的字节数（紧急数据结束后就是普通数据） 。因此，在紧急指针指出了紧急数据的末尾在报文段中的位置。当所有紧急数据都处理完时，TCP就告诉应用程序恢复到正常操作。值得注意的是，即使窗口为0时也可以发送紧急数据。</p>
<h4 id="2-15-选项"><strong>2.15、选项</strong></h4>
<p>     长度可变，最长可达40个字节。当没有使用“选项”时，TCP的首部长度是20字节。</p>
<h4 id="2-16-最大报文段长度"><strong>2.16、最大报文段长度</strong></h4>
<p>     最大报文段长度(MSS:Maximum Segment Size)表示TCP传往另一端的最大块数据的长度。当一个连接建立时，连接的双方都要通告各自的MSS。</p>
<p>     当建立一个连接时，每一方都有用于通告它期望接收的MSS选项(MSS选项只能出现在SYN报文段中),如果一方不接收来自另一方的MSS值，则MSS就定为默认值536字节(这个默认值允许20字节的IP首部和20字节的TCP首部以适合576字节IP数据报) 。</p>
<p>     为什么要规定一个最大报文长度MSS呢？这并不是考虑接受方的接收缓存可能存放不下TCP报文段中的数据。实际上，MSS与接收窗口值没有关系。我们知道，TCP报文段的数据部分，至少要加上40字节的首部（TCP首部20字节和IP首部20字节，这里还没有考虑首部中的可选部分）才能组装成一个IP数据报。若选择较小的MSS长度，网络的利用率就降低。设想在极端情况下，当TCP报文段只含有1字节的数据时，在IP层传输的数据报的开销至少有40字节（包括TCP报文段的首部和IP数据报的首部）。这样，对网络的利用率就不会超过1/41。到了数据链路层还要加上一些开销。但反过来，若TCP报文段非常长，那么在IP层传输时就有可能要分解成多个短数据报片。在终点要把收到的各个短数据报片组成成原来的TCP报文段，当传输出错时还要进行重传，这些也都会使开销增大。<br>
     因此，MSS应尽可能大些，只要在IP层传输时不需要分片就行。</p>
<p>     由于IP数据报所经历的路径是动态变化的，因此在这条路径上确定的不需要的分片的MSS，如果改走另一条路径就可能需要进行分片。因此最佳的MSS是很难确定的。在连接过程中，双方都把自己能够支持的MSS写入这一字段，以后就按照这个数值传输数据，两个传送方向可以有不同的MSS值。若主机未填写这一项，则MSS的默认值是536字节长。因此，所有在互联网上的主机都应该接受的报文段长度是536+20（固定首部长度）=556字节。</p>
<p>     后来又增加了几个选项如窗口扩大选项、时间戳选项等。</p>
<h4 id="2-17-窗口扩大选项"><strong>2.17、窗口扩大选项</strong></h4>
<p>     窗口扩大选项是为了扩大窗口。</p>
<p>     我们知道，TCP首部中窗口字段长度是16位，因此最大的窗口大小为64K字节。虽然这对早期的网络是足够用的，但对于包含卫星信道的网络，传播时延和宽带都很大，要获得高吞吐量需要更大的窗口大小。</p>
<p>     窗口扩大选项占3字节，其中有一个字节表示移位值S。新的窗口值等于TCP首部中的窗口位数从16增大到（16+S）。移位值允许使用的最大值是14，相当于窗口最大值增大到2（16+14）-1=230-1。</p>
<p>     窗口扩大选项可以在双方初始建立TCP连接时进行协商。如果连接的某一端实现了窗口扩大，当它不再需要扩大其窗口时，可发送S=0选项，使窗口大小回到16。</p>
<h4 id="2-18-时间戳选项"><strong>2.18、时间戳选项</strong></h4>
<p>     时间戳选项占10字节，其中最主要的字段是时间戳字段（4字节）和时间戳回送回答字段（4字节）。时间戳选项有以下两个概念：</p>
<p>     第一、 用来计算往返时间RTT。发送方在发送报文段时把当前时钟的时间值放入时间戳字段，接收方在确认该报文段时把时间戳字段复制到时间戳回送回答字段。因此，发送方在收到确认报文后，可以准确地计算出RTT来。</p>
<p>     第二、 用于处理TCP序号超过232 的情况，这又称为防止序号绕回PAWS。我们知道，TCP报文段的序号只有32位，而每增加232 个序号就会重复使用原来用过的序号。当使用高速网络时，在一次TCP连接的数据传送中序号很可能被重复使用。例如，当使用1.5Mbit/s的速度发送报文段时，序号重复要6小时以上。但若用2.5Gbit/s的速率发送报文段，则不到14秒钟序号就会重复。为了使接收方能够把新的报文段和迟到很久的报文段区分开，则可以在报文段中加上这种时间戳。</p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>数据链路层</title>
    <url>/2023/09/14/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-概述"><strong>1、概述</strong></h4>
<p>     数据链路层是TCP/IP协议栈的第二层！数据链路层的传输单元：帧（也就是传输单位）。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E6%89%80%E5%A4%84%E4%BD%8D%E7%BD%AE.webp" alt="数据链路层"></p>
<p>     帧的结构如下：</p>
<ul>
<li>帧结构的构成：MAC子层 + 上三层数据 + FCS</li>
</ul>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E5%B8%A7%E7%9A%84%E7%BB%93%E6%9E%84.png" alt="帧结构"></p>
<ul>
<li>比喻：一个帧我们可以理解为一辆火车，MAC子层是火车头，上三层数据为乘客，FCS为火车尾巴</li>
<li>MAC子层头部包含（也叫帧头）：目标MAC地址（6字节） 源MAC地址（6字节） 类型（2字节）</li>
<li>MAC地址：也称为物理地址，是被固化到网卡的全球唯一标识，如下图：</li>
</ul>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/mac%E5%9C%B0%E5%9D%80%E7%BB%93%E6%9E%84.png" alt="Mac 地址结构"></p>
<p>     <em>注释：MAC地址=厂家标识+内部编号====实现了全球唯一！怎么查看自己的MAC地址？开始运行–cmd–ipconfig /all</em></p>
<ul>
<li>类型字段的作用：区分上层协议，0806代表上层协议是ARP协议，0800代表上层是IP协议</li>
<li>上三层数据：也就是3层包头+4层包头+5层数据。其中一个帧是有最大承载能力限制的。也就是一个帧中的上三层数据就是乘客，而一辆火车中的乘客是又上限的，一个帧的最大承受能力叫MTU值，目前国际标准为1500字节</li>
<li>MTU:（最大传输单元）1500字节</li>
<li>帧尾：FCS=帧校验，长度4个字节，作用是校验整个帧在传输过程中是否发生传输错误。</li>
</ul>
<p>     帧结构最终效果图如下：</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E5%B8%A7%E7%BB%93%E6%9E%84%E6%95%88%E6%9E%9C%E5%9B%BE2.png" alt="帧结构效果图"></p>
<p>     <em>经典问题：请描述一下帧结构?</em></p>
<p>     <em>答：帧是由帧头+上三层数据+帧尾，帧头包含目MAC，源MAC，类型，帧尾是FCS，MTU：1500</em></p>
<h4 id="2-本层设备"><strong>2、本层设备</strong></h4>
<p>     工作在2层的设备：交换机/网桥</p>
<h4 id="3-交换机的工作原理"><strong>3、交换机的工作原理</strong></h4>
<p>     经典问题：请描述一下交换机的工作原理。</p>
<p>     答：</p>
<p>     1）当收到一个帧，首先学习帧中的MAC地址来形成自己的MAC地址表！</p>
<p>     2）然后检查帧中的目标MAC地址，并匹配MAC地址表。</p>
<p>        如表中匹配成功，则单播转发！</p>
<p>        如表中无匹配项，则广播转发！</p>
<p>     3）MAC地址表的老化时间是？300秒！</p>
<p>     效果图如下：</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.webp" alt="交换机的工作原理"></p>
<h4 id="4-如何配置交换机"><strong>4、如何配置交换机</strong></h4>
<p>     傻瓜式交换机一般是不支持管理和配置的！企业级交换机支持配置高级功能及高级配置，价格要高，一般称为管理型交换机！如购买一台华为或者思科交换机，看下图:</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E4%BA%A4%E6%8D%A2%E6%9C%BA.webp" alt="交换机"></p>
<p>     一般会自带一根console线！看下图:</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/console%E7%BA%BF.webp" alt="console线"></p>
<p>     建议再买一根com口转USB线，看下图:</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/com%E5%8F%A3%E8%BD%ACUSB%E7%BA%BF.webp" alt="com口转USB线"></p>
<p>     使用console线+转换usb线，来连接交换机的console口与电脑的USB接口，如下图:</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E6%8E%A5%E7%BA%BF.webp" alt="交换机接线"></p>
<p>     然后再电脑上打开超级终端（xp上自带，win7另行下载即可），即可看到配置界面。当然我们可以使用思科的模拟软件来做实验，如cisco packettracer</p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈云原生</title>
    <url>/2023/09/13/%E8%B0%88%E8%B0%88%E4%BA%91%E5%8E%9F%E7%94%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     之前关于云计算技术底座的部门会谈，我本着程序员实事求是的态度，表示自己其实并不懂云原生。前段时间云技术底座的模型验证，遇到一个测试案例叫做“白屏纳管”，意思是指 CAAS 平台能够对包括云下硬件负载 F5、A10，云上 SLB 等设备进行管理。云原生技术有着太多的这种花里胡哨的名词，将本来很简单的一件事情包装出个能吓住人的词，来提高理解的门槛。作为一个一线开发，我有一种很深切的感受：很多优秀的设计，都是有着简洁优雅的设计原理或者说思想蕴含其中。这种没什么太多内涵的毫无意义的造词运动，对于工程实践，没有任何好处。我们不应该人云亦云盲目从众，也不应该以偏概全一叶障目。</p>
<p>     以下是阿里云公众号某产品经理关于云原生的解释，我截了图如下：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E4%BA%91%E8%AE%A1%E7%AE%97/%E4%BA%91%E5%8E%9F%E7%94%9F/%E8%B0%88%E8%B0%88%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%91%E5%8E%9F%E7%94%9F/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%91%E5%8E%9F%E7%94%9F%E5%85%AC%E4%BC%97%E5%8F%B7%E6%9F%90%E6%96%87%E7%AB%A0.jpg" alt="阿里云云原生公众号某文章"></p>
<p>     这段话讲得没有问题，但是似乎又什么都没讲，对于云原生的定义，这种似是而非的说法显然不是一线开发人员想要的答案。</p>
<p>     我们在说云原生的时候，其实是在说“云原生计算”，云原生这个词其实可以拆为“云”和”原生“两个词，这其中其实隐藏了一个词——“云计算”。<strong>云原生一定是云计算，</strong> 这就要求我们事先已经对云计算的发展历史有所了解。云原生与云计算的区别便在“原生”二字上，那么理解云原生，重点就在理解其为何为“原生”。我这里用一句话来总结云原生：云原生是为了发挥出云计算所有优势的最短路径（这句精辟的提炼摘自《阿里云云原生架构实践》一书）。</p>
<p>     这些想法和做法归纳为三个方面：应用架构、计算模型、代表技术。</p>
<ul>
<li>
<p><strong>代表技术</strong> 是最容易理解的。代表技术可以是一些狭义上的云原生基础设施，包含了相关的软件或硬件技术，例如裸金属、docker、K8S；也可以是泛化的一些工程技术体系，比如 Spring Cloud，DevOps，DDD ——它们与云基础设施不一样，很多并非为了云原生而生的，但是在云上环境表现活跃，也可以归纳到云原生代表技术中来。有些人说，使用了容器技术，就是云原生，这肯定是不准确的。容器其实只是改变了我们应用的部署方式，应用运行时的形态，以此来定义云原生是非常片面的。</p>
</li>
<li>
<p><strong>计算模型，</strong> 既然这个行业这么喜欢遣词造句，那我也造几个词（切，谁还不会啊！！！）。计算模型可以从两个方面来看：</p>
</li>
</ul>
<p>     <strong>计算的服务模型：</strong> 计算的服务模型是从商业的角度看的。我们从传统的购买硬件送软件，到购买软件和维护再到如今购买云服务，云计算平台将计算、存储、网络像煤电一样卖给我们。需要指出，计算资源的这种服务模型并不是在云原生中才强调的，而是从云计算提出的时候，就已经强调了的。</p>
<p>     <strong>服务的计算模型：</strong> 这个语境中，“服务”不再是商业上的“服务”，而是指“应用服务”。应用服务的计算模型，强调了应用程序的可伸缩性、弹性、自动化和可维护性，以适应现代云环境中的需求。当然，应用的可伸缩、弹性自动化运维这些并不是应用自身具备的能力，而是在云上环境被赋予的，但是需要从应用侧做一定的改造工作，“以适应现代云环境中的需求”，比如下面要说的——应用架构。</p>
<ul>
<li><strong>应用架构</strong> 为了最大化发挥云原生的计算优势，应用侧应该也要做架构升级——例如微服务化，在弹性扩缩的时候以更细的粒度进行算力分配，更精确的分配云计算底座资源（计算、存储、网络）——当然，这只是我简单作示意的一种说法。这种说法换个侧面来看，单体应用就不能上云计算么？当然可以，但是那就不叫云原生了，因为单体无法发挥出云计算的最大优势。</li>
</ul>
<p>     所以从我自己目前的工作经历总结如下： <strong>云原生一定是云计算，特别的，云原生是有效发挥出云计算所有优势的最短路径。理解云原生，可以从代表技术、云原生计算模型、云原生应用架构三方面着手理解。</strong></p>
]]></content>
      <tags>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>一种git分支模型</title>
    <url>/2023/09/10/%E4%B8%80%E7%A7%8Dgit%E5%88%86%E6%94%AF%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E5%B7%A5%E5%85%B7/git/%E5%88%86%E6%94%AF%E6%A8%A1%E5%9E%8B.png" alt="git 分支模型"></p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>简述Oauth2的工作原理</title>
    <url>/2023/09/09/%E7%AE%80%E8%BF%B0Oauth2%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer23" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer23"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/简述Oauth2的工作原理/简述Oauth2的工作原理.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>简述互联网的工作原理</title>
    <url>/2023/09/07/%E7%AE%80%E8%BF%B0%E4%BA%92%E8%81%94%E7%BD%91%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer22" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer22"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/简述互联网的工作原理/简述互联网的工作原理.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>应用的JVM优化案例</title>
    <url>/2023/09/05/%E5%BA%94%E7%94%A8%E7%9A%84JVM%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E4%B8%80%E6%AC%A1%E5%BA%94%E7%94%A8%E7%9A%84JVM%E8%B0%83%E4%BC%98%E7%A4%BA%E4%BE%8B/JVM%E8%B0%83%E4%BC%98%E7%A4%BA%E4%BE%8B.jpg" alt="应用的JVM优化案例"></p>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>编程界等级划分</title>
    <url>/2023/09/05/%E7%BC%96%E7%A8%8B%E5%B1%8A%E7%AD%89%E7%BA%A7%E5%88%92%E5%88%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E7%BC%96%E7%A8%8B%E7%95%8C%E7%AD%89%E7%BA%A7%E5%88%92%E5%88%86/%E7%BC%96%E7%A8%8B%E5%B1%8A%E4%BF%AE%E7%82%BC%E7%AD%89%E7%BA%A7.drawio.png" alt="编程界等级划分"></p>
]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>OSI/ISO七层网络</title>
    <url>/2023/08/31/OSI-ISO%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>   七层网络的常见设备，如下图所示：<br>
<img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E7%9A%84%E5%B8%B8%E8%A7%81%E8%AE%BE%E5%A4%87.png" alt="七层网络的常见设备"></p>
<p>   七层网络的常见协议与功能，如下图所示：<br>
<img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C/%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E5%B8%B8%E8%A7%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%8A%9F%E8%83%BD%E8%AF%B4%E6%98%8E.gif" alt="七层网络的常见协议与功能"></p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>深入 OGNL 与  Mybatis 源代码分析一次 Mybatis 升级引发的线上事故</title>
    <url>/2023/08/31/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     项目中对 Mybatis 做了一次升级。前后版本如下，3.2.5 -&gt; 3.4.4：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/mybatis%E5%89%8D%E5%90%8E%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7.png" alt="mybatis前后版本升级"></p>
<p>     结果第二天巡检发现如下报错，过了两个小时业务高峰期，前台业务人员不断反馈某最核心的业务无法进行：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF.png" alt="报错信息"></p>
<p>     我们当时定位到错误的地方，根据经验修改之后验证通过，重新上线之后得以解决。可能涉及敏感数据，所以不展示实际的报错与弥补方案。</p>
<p>     以下是我在本地的问题复现。在本地的一个标准的 SSM 工程中分别引入以下两个版本的 Mybatis 依赖:</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/%E5%88%86%E5%88%AB%E5%BC%95%E5%85%A5%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E4%BE%9D%E8%B5%96.png" alt="分别引入两个版本的依赖"></p>
<p>     编写如下数据库脚本:</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC.png" alt="数据库脚本"></p>
<p>     dao 层调用方法如下：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/dao%E5%B1%82%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8.png" alt="dao层方法调用"></p>
<p>     当 Mybatis 依赖为 3.2.5 的较低版本时，不会报错；当 Mybatis 依赖版本为 3.4.4 的较高版本时，则会报出上面的错误:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">invalid comparision:  java.util.HashMap and java.lang.String</span><br></pre></td></tr></table></figure>
<p>     在本地问题得到复现。问题的关键在于数据库脚本中的 if 条件编译语句的这一个子句 _parameter!=’’ 将_parameter 与 ‘’ 做比较，_parameter 是 Mybatis 的一个内置对象，你不需要知道它的作用，只需要知道他是 Map 类型的就行了，显然 ‘’ 是 String 类型的。到这里我们其实已经猜出来了，正是因为这种不规范的比较导致数据库脚本执行失败（实际上是 Mybatis 编译 SQL 失败）。</p>
<p>     但是问题又来了，<strong>为什么 Mybatis 较低版本的时候没有问题，而较高版本则暴露出这个问题了？</strong> 我们深入源码分析一下。因为我对 Mybatis 源码比较熟悉，加上实际生产中报错的堆栈信息也很全，所以直接定位到了 Mybatis 的这个类型：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/ifnode.png" alt="ifnode"></p>
<p>     上述代码的作用：在我们上述 SQL 脚本中，根据 if 子句的测试语句（就是 … &amp;&amp; _parameter!=’’ 那一坨）判断，当前 if 子句所包裹的 sql 是否需要动态编译进最终的执行sql中。当我们进一步追踪，就进入到了 OGNL 的源码中，OGNL 是一套表达式解析引擎，一直定位下去就到了具体报错的方法。到这里我们补充一下版本依赖关系：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mybatis-3.2.5  -&gt;  ognl-2.6.9</span><br><span class="line">mybatis-3.4.4  -&gt;  ognl-3.1.14</span><br></pre></td></tr></table></figure>
<p>     高版本 OGNL 源码如下：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/%E9%AB%98%E7%89%88%E6%9C%ACOGNL%E4%BB%A3%E7%A0%81.png" alt="高版本 OGNL 代码"></p>
<p>     低版本 OGNL 源码如下：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/%E4%BD%8E%E7%89%88%E6%9C%ACOGNL%E4%BB%A3%E7%A0%81.png" alt="低版本 OGNL 代码"></p>
<p>     类型标识相关的源码如下：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/%E7%B1%BB%E5%9E%8B%E6%A0%87%E8%AE%B0.png" alt="类型标记"></p>
<p>     case 为 NONUMBERIC 的含义是当比较的值是非数值类型，所以 _parameter!=’’ 子句的判断自然是走该分支语句的代码。t1、t2，v1、v2 的含义是两个待比值（ _parameter 和 ‘’）的类型和 value，在这个场景中分别是如下调试面板所示的（不明白的请观察为了复现问题所编写的 SQL 脚本和 dao 层语句）：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/%E8%B0%83%E8%AF%95%E4%BF%A1%E6%81%AF%E5%A6%82%E4%B8%8B.png" alt="调试信息如下"></p>
<p>     解释一下：t1 = t2 = 10，表示 _parameter 与 ‘’ 都是非数值类型。v1 表明了 _parameter 是个 HashMap 类型的变量，有一个 (blurname,cat) 的键值对，v2 = ‘’。另外，类的 Class 实例中有一个 isAssignableFrom 方法，这个方法是用来判断两个类的之间的关联关系，也可以说是一个类是否可以被强制转换为另外一个实例对象。</p>
<p>     至此所需信息全部已经准备完毕，我们可以来分析高低版本 OGNL 的源码了。高版本 OGNL 中，我们直接看 case:NONUMBERIC 的分支子句。代码含义为：</p>
<p>     <strong>如果 V1 是 Comparable 类型的并且 V1 可以强转为 V2 的类型，则进入 if 分支，否则进入 else 分支，而 else 分支直接报错，而且报错信息是我们实际生产环境中遇到的。显然，V1 既不是 Comparable 类型，也无法转换为 V2 的类型（HashMap -&gt; String），所以进入了 else 分支，mybatis 升级之后携带 OGNL 的升级，数据库不规范的写法导致 mybatis 编译 sql 语句报错，阻塞了业务</strong></p>
<p>     低版本的 OGNL 的 case:NONUMBERIC 的分支子句的代码逻辑说实话非常拧巴，含义是：</p>
<p>     <strong>如果 v1、v2 任一变量为 null，则进入 if 分支，显然不会进入。else 先判断v1、v2 是否能互转，显然不能，直接跳过。接下来是重中之重：如果 equals 为 true ,跳出 case，否则报错。我们根据结果看，equals 必定为 true，因为我们那种不规范的 mybatis 在这个地方，它每没报错——事实上是应该将该问题抛出来的，从而引导开发者更正 mybatis 脚本。接下来我们看方法外面这个 equals 的来源：</strong></p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BA%8B%E6%95%85%E5%A4%8D%E7%9B%98/%E4%B8%80%E6%AC%A1Mybatis%E5%8D%87%E7%BA%A7%E5%BC%95%E5%8F%91%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85/equals.png" alt="equals"></p>
<p>     我惊呆了，直接写死传经来的，至于这个 equals 意欲何为，当初作者为什么这么写，也许只有作者自己知道。反正高版本的 OGNL 已经将这部分的代码逻辑全部重构了。</p>
<p>     我们可以得到如下结论： _<em>低版本的 mybatis 依赖了低版本的 OGNL ，低版本的 OGNL 在上述分析的函数中存在一定缺陷，这个缺陷会导致我们在编写 Mybatis 脚本的时候类似于 <em>parameter!=’’ 的不规范写法不被发现。当我们升级了 Mybatis 之后，这种不规范的写法反而兜不住暴露出来了，加上组件升级测试不充分，直接上到了生产环境。</em></em></p>
<p>     <strong>反思：</strong></p>
<ul>
<li><strong>日常开发要严格要求自己，追求正规、大气的编程素养，每一行代码，每一个字符，都要过大脑，不要太随便，不要随便复制粘贴能跑就行。</strong></li>
<li><strong>组件升级要慎之又慎，测试要充分。</strong></li>
</ul>
]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S架构图</title>
    <url>/2023/08/29/K8S%E6%9E%B6%E6%9E%84%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     谷歌早期内部 Brog 系统架构图：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E4%BA%91%E8%AE%A1%E7%AE%97/K8S/K8S%E6%9E%B6%E6%9E%84%E5%9B%BE/Brog%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="Brog架构图"></p>
<p>     K8S 架构图：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E4%BA%91%E8%AE%A1%E7%AE%97/K8S/K8S%E6%9E%B6%E6%9E%84%E5%9B%BE/K8S%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="K8S架构图"></p>
<p>     K8S 分层架构：</p>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E4%BA%91%E8%AE%A1%E7%AE%97/K8S/K8S%E6%9E%B6%E6%9E%84%E5%9B%BE/K8S%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84.webp" alt="K8S分层架构"></p>
]]></content>
      <tags>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>IP数据报</title>
    <url>/2023/08/29/IP%E6%95%B0%E6%8D%AE%E6%8A%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     IP 协议控制传输的协议单元称为 IP 数据报（IP Datagram，IP数据报、IP包或IP分组）。IP协议屏蔽了下层各种物理子网的差异，能够向上层提供统一格式的IP数据报。lP数据报采用数据报分组传输的方式，提供的服务是无连接方式。IP数据报的格式能够说明lP协议具有什么功能。IPv4数据报由报头和数据两部分组成，其中，数据是高层需要传输的数据，报头是为了正确传输高层数据而增加的控制信息。报头的前一部分长度固定，共20字节，是所有IP数据报必须具有。在首部固定部分的后面是可选字段，长度可变。</p>
<!-- ![IP报文结构](https://github.com/3546514206/ImageHost.Github.IO/blob/main/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/IP%E6%95%B0%E6%8D%AE%E6%8A%A5/IP%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png?raw=true) -->
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/IP%E6%95%B0%E6%8D%AE%E6%8A%A5/IP%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png" alt="IP报文结构"></p>
<h4 id="1-固定部分"><strong>1、固定部分</strong></h4>
<ul>
<li>版本：占 4 位，指 IP 协议的版本。通信双方使用的 IP 协议版本必须一致。广泛使用的 IP 协议版本号为 4（即 IPv4）。关于 IPv6，还处于草案阶段。</li>
<li>首部长度：占 4 位，可表示的最大十进制数值是 15。请注意，这个字段所表示数的单位是 32 位字长（1 个 32 位字长是 4 字节），因此，当 IP 的首部长度为 1111 时（即十进制的 15），首部长度就达到 60 字节。当 IP 分组的首部长度不是 4 字节的整数倍时，必须利用最后的填充字段加以填充。因此数据部分永远在 4 字节的整数倍开始，这样在实现 IP 协议时较为方便。首部长度限制为 60 字节的缺点是有时可能不够用。但这样做是希望用户尽量减少开销。最常用的首部长度就是 20 字节（即首部长度为 0101），这时不使用任何选项。</li>
<li>区分服务：占 8 位，用来获得更好的服务。这个字段在旧标准中叫做服务类型，但实际上一直没有被使用过。1998 年 IETF 把这个字段改名为区分服务DS(Differentiated Services)。只有在使用区分服务时，这个字段才起作用。</li>
<li>总长度：总长度指首部和数据之和的长度，单位为字节。总长度字长为 16 位，因此数据报的最大长度为 2^16-1=65535 字节。在 IP 层下面的每一种数据链路层都有自己的帧格式，其中包括帧格式中的数据字段的最大长度，这称为最大传送单元 MTU（Maximum Transfer Unit）。当一个数据报封装成链路层的帧时，此数据报的总长度（即首部加上数据部分）一定不能超过下面的数据链路层的 MTU 值。</li>
<li>标识：占 16 位。IP 软件在存储器中维持一个计数器，每产生一个数据报，计数器就加1，并将此值赋给标识字段。但这个“标识”并不是序号，因为IP是无连接服务，数据报不存在按序接收的问题。当数据报由于长度超过网络的 MTU 而必须分片时，这个标识字段的值就被复制到所有的数据报的标识字段中。相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报。</li>
<li>标志：占 3 位，但只有 2 位有意义。标志字段中的最低位记为 MF（More Fragment）。MF=1 即表示后面“还有分片”的数据报。MF=0 表示这已是若干数据报片中的最后一个。标志字段中间的一位记为 DF（Don’t Fragment），意思是“不能分片”。只有当 DF=0 时才允许分片。</li>
<li>片偏移：占 13 位。片偏移指出：较长的分组在分片后，某片在原分组中的相对位置。也就是说，相对用户数据字段的起点，该片从何处开始。片偏移以 8  个字节为偏移单位。这就是说，除了最后一个分片，每个分片的长度一定是 8 字节（64 位）的整数倍。</li>
<li>生存时间：占 8 位，生存时间字段常用的的英文缩写是 TTL（Time To Live），表明是数据报在网络中的寿命。由发出数据报的源点设置这个字段。其目的是防止无法交付的数据报无限制地在因特网中兜圈子，因而白白消耗网络资源。最初的设计是以秒作为 TTL 的单位。每经过一个路由器时，就把 TTL 减去数据报在路由器消耗掉的一段时间。若数据报在路由器消耗的时间小于 1 秒，就把 TTL 值减 1。当 TTL 值为 0 时，就丢弃这个数据报。后来把 TTL 字段的功能改为“跳数限制”（但名称不变）。路由器在转发数据报之前就把 TTL 值减 1。若 TTL 值减少到零，就丢弃这个数据报，不再转发。因此，TTL 的单位不再是秒，而是跳数。TTL 的意义是指明数据报在网络中至多可经过多少个路由器。显然，数据报在网络上经过的路由器的最大数值是 255。若把 TTL 的初始值设为 1，就表示这个数据报只能在本局域网中传送。</li>
<li>协议：占 8 位，协议字段指出此数据报携带的数据是使用何种协议，以便使目的主机的 IP 层知道应将数据部分上交给哪个处理过程。6 指 TCP 协议，17 指的是 UDP 协议。</li>
<li>首部校验和：占16位。这个字段只检验数据报的首部，但不包括数据部分。这是因为数据报每经过一个路由器，路由器都要重新计算一下首部检验和（一些字段，如生存时间、标志、片偏移等都可能发生变化）。不检验数据部分可减少计算的工作量。</li>
<li>源地址和目的地址：32位，IPV4 地址。</li>
</ul>
<h4 id="2-可变部分"><strong>2、可变部分</strong></h4>
<p>     IP 首部的可变部分就是一个可选字段。选项字段用来支持排错、测量以及安全等措施，内容很丰富。此字段的长度可变，从 1 个字节到 40 个字节不等，取决于所选择的项目。某些选项项目只需要 1 个字节，它只包括 1 个字节的选项代码。但还有些选项需要多个字节，这些选项一个个拼接起来，中间不需要有分隔符，最后用全 0 的填充字段补齐成为 4 字节的整数倍。增加首部的可变部分是为了增加 IP 数据报的功能，但这同时也使得 IP 数据报的首部长度成为可变的。这就增加了每一个路由器处理数据报的开销。实际上这些选项很少被使用。新的 IP 版本 IPv6 就将 IP 数据报的首部长度做成固定的。这些任选项定义如下：</p>
<ul>
<li>安全和处理限制（用于军事领域）。</li>
<li>记录路径（让每个路由器都记下它的IP地址）。</li>
<li>时间戳（Time Stamp）（让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间）。</li>
<li>宽松的源站路由（Loose Source Route）（为数据报指定一系列必须经过的IP地址）。</li>
<li>严格的源站路由（Strict Source Route）（与宽松的源站路由类似，但是要求只能经过指定的这些地址，不能经过其他的地址）。</li>
</ul>
<p>     这些选项很少被使用，并非所有主机和路由器都支持这些选项。</p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Innodb中的事务隔离级别和锁实现</title>
    <url>/2023/08/29/Innodb%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%92%8C%E9%94%81%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring全景</title>
    <url>/2023/08/29/Spring%E5%85%A8%E6%99%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Spring/Spring%E5%85%A8%E6%99%AF/Spring%E5%85%A8%E6%99%AF.png" alt="Spring 全景图"></p>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo 架构图</title>
    <url>/2023/08/29/dubbo%E6%9E%B6%E6%9E%84%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E6%9C%8D%E5%8A%A1%E7%AB%AF/dubbo/dubbo%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg" alt="Dubbo 架构图"></p>
]]></content>
      <tags>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行常用指令</title>
    <url>/2023/08/29/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>      MySQL 创建数据库并指定字符集：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop schema if exists `test`;</span><br><span class="line">CREATE DATABASE `test` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure>
<p>      Brew 相关的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//苹果电脑安装脚本：</span><br><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br><span class="line">//苹果电脑卸载脚本：</span><br><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)&quot;</span><br><span class="line">// 搜索包</span><br><span class="line">brew search mysql</span><br><span class="line">// 安装包</span><br><span class="line">brew install mysql</span><br><span class="line">// 查看包信息，比如目前的版本，依赖，安装后注意事项等</span><br><span class="line">brew info mysql</span><br><span class="line">// 卸载包</span><br><span class="line">brew uninstall wget</span><br><span class="line">// 显示已安装的包</span><br><span class="line">brew list</span><br><span class="line">// 查看brew的帮助</span><br><span class="line">brew –help</span><br><span class="line">// 更新， 这会更新 Homebrew 自己</span><br><span class="line">brew update</span><br><span class="line">// 检查过时（是否有新版本），这会列出所有安装的包里，哪些可以升级</span><br><span class="line">brew outdated</span><br><span class="line">brew outdated mysql</span><br><span class="line">// 升级所有可以升级的软件们</span><br><span class="line">brew upgrade</span><br><span class="line">brew upgrade mysql</span><br><span class="line">// 清理不需要的版本极其安装包缓存</span><br><span class="line">brew cleanup</span><br><span class="line">brew cleanup mysql</span><br></pre></td></tr></table></figure>
<p>      MySQL 源码构建参数(将目录修改为你自己的)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-DCMAKE_BUILD_TYPE=Debug</span><br><span class="line">-DWITH_BOOST=/Users/setsunayang/Documents/learning/mysql/boost_1_77_0</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/Users/setsunayang/Documents/learning/mysql/build</span><br><span class="line">-DWITH_SSL=system</span><br><span class="line"></span><br><span class="line">./mysqld --basedir=/Users/setsunayang/Documents/learning/mysql/build \</span><br><span class="line">--datadir=/Users/setsunayang/Documents/learning/mysql/build/data \</span><br><span class="line">--initialize-insecure --user=mysql</span><br></pre></td></tr></table></figure>
<p>      Git 相关</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote rm origin </span><br><span class="line">git remote add origin [url]</span><br><span class="line">git config --global user.name &quot;杨海波&quot;</span><br><span class="line">git config --global user.email “3546514206@QQ.COM&quot;</span><br><span class="line"></span><br><span class="line">git rm -r --cached</span><br></pre></td></tr></table></figure>
<p>      设置主机名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo scutil --set HostName SetsunaYang</span><br></pre></td></tr></table></figure>
<p>      Macbook Pro 显示被隐藏的文件或文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -boolean true;killall Finder</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -boolean false;killall Finder</span><br><span class="line"></span><br><span class="line">chflags hidden</span><br><span class="line">chflags nohidden</span><br></pre></td></tr></table></figure>
<p>      设置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;export PATH=&quot;/opt/homebrew/opt/go@1.20/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>      修改环境变量相关</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前 shell 是 zsh 还是 bash</span></span><br><span class="line">dscl . -read /Users/$USER UserShell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是 bash</span></span><br><span class="line">open ~/.bash_profile</span><br><span class="line">source ~/.bash_profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 如果是 zsh</span></span><br><span class="line">open ~/.zshrc </span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>      IDEA 相关</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解决 Goland 无法调试的问题。在 bin/goland.vmoptions 增加如下虚拟机参数</span></span><br><span class="line">-Djava.net.preferIPv4Stack=true</span><br><span class="line">-Djava.net.preferIPv6Addresses=true</span><br></pre></td></tr></table></figure>
<p>      ““prettyZoo.app”已损坏，无法打开。 您应该将它移到废纸篓。” 解决办法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo xattr -rd com.apple.quarantine &#x27;/Applications/prettyZoo.app&#x27;</span><br></pre></td></tr></table></figure>
<p>     Jetbrains 全家桶自定义虚拟机参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-Xms512m</span><br><span class="line">-Xmx8192m</span><br><span class="line"></span><br><span class="line">-XX:ErrorFile=/Users/setsunayang/Documents/JetBrains/ERROR/java_error_in_web_%p.log</span><br><span class="line">-XX:HeapDumpPath=/Users/setsunayang/Documents/JetBrains/ERROR/java_error_in_web.hprof</span><br><span class="line"></span><br><span class="line">-Dide.managed.by.toolbox=/Applications/JetBrains Toolbox.app/Contents/MacOS/jetbrains-toolbox</span><br><span class="line">-Dtoolbox.notification.token=f2154f48-d8ed-468a-b154-d82403469df5</span><br><span class="line">-Dtoolbox.notification.portFile=/Users/setsunayang/Library/Caches/JetBrains/Toolbox/ports/f96117ec-2396-417f-a3d8-406dde460690.port</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>回调机制</title>
    <url>/2023/08/29/%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1-c语言中的回调"><strong>1、C语言中的回调</strong></h4>
<p>     函数指针是指向函数的指针变量。通常我们说的指针变量是指向一个整型、字符型或数 组等变量，而函数指针是指向函数。函数指针可以像一般函数一样，用于调用函数、传递参 数。函数指针变量的声明： typedef int (*fun_ptr)(int,int); // 声明一个指向同样参数、返回值的函数指针类型 以下实例声明了函数指针变量 p，指向函数 max：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x &gt; y ? x : y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* p 是函数指针 */</span></span><br><span class="line">    <span class="built_in">int</span> (*p)(<span class="type">int</span>, <span class="type">int</span>) = &amp;max; <span class="comment">// &amp;可以省略 </span></span><br><span class="line">    <span class="type">int</span> a, b, c, d;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入三个数字:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    <span class="comment">/* 与直接调用函数等价，d = max(max(a, b), c) */</span></span><br><span class="line">    d = <span class="built_in">p</span>(<span class="built_in">p</span>(a, b), c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大的数字是: %d\n&quot;</span>, d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>     输出的结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">请输入三个数字:1 2 3 </span><br><span class="line">最大的数字是: 3</span><br></pre></td></tr></table></figure>
<p>     函数指针变量可以作为某个函数的参数来使用的，回调函数就是一个通过函数指针调用 的函数。下面的实例中 populate_array 函数定义了三个参数，其中第三个参数是函数的指 针，通过该函数来设置数组的值。实例中我们定义了回调函数 getNextRandomValue，它返 回一个随机值，它作为一个函数指针传递给 populate_array 函数。populate_array 将调 用 10 次回调函数，并将回调函数的返回值赋值给数组。编译执行，输出结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">16807 282475249 1622650073 984943658 1144108930 470211272 101027544 1457850878 1458777923 2007237709</span><br></pre></td></tr></table></figure>
<h4 id="2-什么是回调"><strong>2、什么是回调</strong></h4>
<p>     软件模块之间总是存在着一定的接口，从调用方式上，可以把他们分为三类：同步调 用、回调和异步调用。回调是一种双向调用的模式，也就是说，被调用方在接口被调用时也 会调用对方的接口。</p>
<p>     同步调用：一种阻塞式调用，调用方要等待对方执行完毕才能返回，它是一种单向调 用。</p>
<p>     回调：一种双向调用模式，也就是说，被调用方在接口被调用时也会调用对方的接口。</p>
<p>     异步调用：一种类似消息或事件的机制，不过它的调用方向刚好相反，接口的服务在收 到某种讯息或发生某种事件时，会主动通知客户方（即调用客户方的接口）。 回调和异步调用的关系非常紧密：通常可以使用回调来实现异步消息的注册，通过异步 调用来实现消息的通知。</p>
<p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6.jpg" alt="程序调用的几种方式"></p>
<p>     回调机制的实现通常需要实现一个回调函数，回调函数，顾名思义，用于回调的函数。回调函数只是一个功能片段，由用户按照回调函数调用约定来实现的一个函数。回调函数是一个工作流的一部分，由工作流来决定函数的调用（回调）时机。回调函数包含下面几个特性：</p>
<ul>
<li>
<p>属于工作流的一个部分；</p>
</li>
<li>
<p>必须按照工作流指定的调用约定来申明（定义）；</p>
</li>
<li>
<p>他的调用时机由工作流决定，回调函数的实现者不能直接调用回调 函数来实现工作流的功能。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>编程理论</tag>
      </tags>
  </entry>
  <entry>
    <title>内核页表设计</title>
    <url>/2023/08/28/%E5%86%85%E6%A0%B8%E9%A1%B5%E8%A1%A8%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%86%85%E6%A0%B8%E9%A1%B5%E8%A1%A8%E8%AE%BE%E8%AE%A1/%E5%86%85%E6%A0%B8%E9%A1%B5%E8%A1%A8%E8%AE%BE%E8%AE%A1.png" alt="内核页表设计"></p>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>国内外优秀技术站点汇总</title>
    <url>/2023/08/02/%E5%9B%BD%E5%86%85%E5%A4%96%E4%BC%98%E7%A7%80%E6%8A%80%E6%9C%AF%E7%AB%99%E7%82%B9%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://tech.meituan.com/">美团技术</a></p>
<p><a href="https://developer.aliyun.com/group/idlefish/?spm=a2c6h.12873639.0.0.2c9618dd4mdBAQ%23%2F%3F_k%3Dkhoksz&amp;accounttraceid=e4dc90287c814d14a8849e3d9e9b8cf3glls#/">咸鱼技术</a></p>
<p><a href="https://bugstack.cn/">小傅哥bugstack虫洞栈</a></p>
<p><a href="https://javabetter.cn/">二哥的Java进阶之路</a></p>
<p><a href="https://github.com/doocs/source-code-hunter">互联网公司常用框架源码赏析</a></p>
<p><a href="https://cn.dubbo.apache.org/zh-cn/overview/home/">dubbo官方文档</a></p>
]]></content>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title>基于转加密的握手式国密通信</title>
    <url>/2023/07/13/%E5%9F%BA%E4%BA%8E%E8%BD%AC%E5%8A%A0%E5%AF%86%E7%9A%84%E6%8F%A1%E6%89%8B%E5%BC%8F%E5%9B%BD%E5%AF%86%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E5%9F%BA%E4%BA%8E%E8%BD%AC%E5%8A%A0%E5%AF%86%E7%9A%84%E6%8F%A1%E6%89%8B%E5%BC%8F%E5%9B%BD%E5%AF%86%E9%80%9A%E4%BF%A1/%E5%9F%BA%E4%BA%8E%E8%BD%AC%E5%8A%A0%E5%AF%86%E7%9A%84%E6%8F%A1%E6%89%8B%E5%BC%8F%E5%9B%BD%E5%AF%86%E9%80%9A%E4%BF%A1.png" alt="基于转加密的握手式国密通信"></p>
<p>     <strong>1、客户端上送 SM4 密钥密文：</strong></p>
<ul>
<li>
<p>客户端根据算法生成两把 SM4 密钥:sm4_key、h_mac_key；</p>
</li>
<li>
<p>客户端使用内置 SM2 公钥对 sm4_key、h_mac_key 加密得到密文 sm4_cipher_key、h_mac_cipher_key；</p>
</li>
<li>
<p>调用服务端握手接口将  sm4_cipher_key、h_mac_cipher_key 发送到服务端；</p>
</li>
</ul>
<p>     <strong>2、服务端转加密取 SM4 密钥报文</strong></p>
<ul>
<li>
<p>服务端根据算法生成 SM4 密钥 sm4_transfer_key 用于转加密；</p>
</li>
<li>
<p>服务端使用内置的 SM2 公钥对 sm4_transfer_key 加密得到密文 sm4_transfer_cipher_key；</p>
</li>
<li>
<p>调用机密机接口上送 sm4_cipher_key、h_mac_cipher_key 密文和 sm4_transfer_cipher_key ；</p>
</li>
</ul>
<p>     <strong>3、加密机做转加密</strong></p>
<ul>
<li>
<p>加密机用 SM2 私钥对 sm4 密文解密得到 sm4_key;</p>
</li>
<li>
<p>机密机用 SM2 私钥对 sm4_transfer_cipher_key 解密得到 sm4_transfer_key;</p>
</li>
<li>
<p>加密机用 sm4_transfer 对 sm4_key 加密 sm4_key_cipher_transfer 并返回;</p>
</li>
<li>
<p>加密机用 用同样的方式得到 h_mac_key_cipher_transfer 并返回;</p>
</li>
</ul>
<p>     <strong>4、服务端获取 SM4 密钥明文与 h_mac_key 明文并缓存作为后续报文交互</strong></p>
<p>     <strong>5、报文通讯加解密</strong></p>
<ul>
<li>
<p>客户端使用 sm4_key 对交易明文加密得到交易密文；</p>
</li>
<li>
<p>客户端使用 h_mac_key 对交易明文计算 hmac ；</p>
</li>
<li>
<p>客户端上送通讯加密报文（交易密文+hmac）；</p>
</li>
<li>
<p>服务端接收到通讯加密报文后使用 sm4_key 进行解密得到交易明文，使用 h_mac_key 对交易明文计算 hmac 并与上送的 hmac 进行对比校验报文的完整性。</p>
</li>
</ul>
<p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E5%9F%BA%E4%BA%8E%E8%BD%AC%E5%8A%A0%E5%AF%86%E7%9A%84%E6%8F%A1%E6%89%8B%E5%BC%8F%E5%9B%BD%E5%AF%86%E9%80%9A%E4%BF%A1/%E5%9F%BA%E4%BA%8E%E5%AF%86%E7%A0%81%E6%9C%BA%E8%BD%AC%E5%8A%A0%E5%AF%86%E7%9A%84%E6%8F%A1%E6%89%8B%E5%BC%8F%E5%9B%BD%E5%AF%86%E9%80%9A%E4%BF%A1%E7%AC%AC%E4%BA%8C%E7%89%88.png" alt="基于密码机转加密的握手式国密通信第二版"></p>
<p>     由于密码机接口的设计问题，上述 3 步骤中，需要调用密码机两次，分别发送 sm4_key 和 h_mac_key 给服务端。修改为第二版之后，h_mac_key 用 sm4_key 进行 SM4 加密，这样经过服务端转加密流程解出 sm4_key 之后，直接解密 h_mac_cipher_key 得到 h_mac_key。</p>
]]></content>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>基于服务端的握手式国密通信</title>
    <url>/2023/07/11/%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E6%8F%A1%E6%89%8B%E5%BC%8F%E5%9B%BD%E5%AF%86%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%B7%A5%E7%A8%8B/%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E6%8F%A1%E6%89%8B%E5%BC%8F%E5%9B%BD%E5%AF%86%E9%80%9A%E4%BF%A1/%E5%9F%BA%E4%BA%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8F%A1%E6%89%8B%E7%9A%84%E5%9B%BD%E5%AF%86%E9%80%9A%E4%BF%A1.drawio.png" alt="基于服务端的握手式国密通信"></p>
<p>     <strong>基于服务端的握手式国密通信的问题</strong></p>
<p>     私钥放在服务端，会被认为不安全。</p>
]]></content>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库背后的8种关键数据结构</title>
    <url>/2023/07/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%83%8C%E5%90%8E%E7%9A%848%E7%A7%8D%E5%85%B3%E9%94%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer15" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer15"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/数据库背后的8种关键数据结构/数据库背后的8种关键数据结构.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>风起于青萍之末，止于草莽之间</title>
    <url>/2022/06/29/%E9%A3%8E%E8%B5%B7%E4%BA%8E%E9%9D%92%E8%90%8D%E4%B9%8B%E6%9C%AB%EF%BC%8C%E6%AD%A2%E4%BA%8E%E8%8D%89%E8%8E%BD%E4%B9%8B%E9%97%B4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer30" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer30"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/风起于青萍之末，止于草莽之间/风起于青萍之末，止于草莽之间.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>一个人的觉醒，是从三观破裂开始的</title>
    <url>/2021/11/05/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E8%A7%89%E9%86%92%EF%BC%8C%E6%98%AF%E4%BB%8E%E4%B8%89%E8%A7%82%E7%A0%B4%E8%A3%82%E5%BC%80%E5%A7%8B%E7%9A%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer2" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/一个人的觉醒，是从三观破裂开始的/一个人的觉醒，是从三观破裂开始的.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>大大方方去做想要做的事情</title>
    <url>/2020/09/18/%E5%A4%A7%E5%A4%A7%E6%96%B9%E6%96%B9%E5%8E%BB%E5%81%9A%E6%83%B3%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer12" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer12"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/大大方方去做想要做的事情/大大方方去做想要做的事情.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>这段话真的好暖好有力量</title>
    <url>/2020/07/17/%E8%BF%99%E6%AE%B5%E8%AF%9D%E7%9C%9F%E7%9A%84%E5%A5%BD%E6%9A%96%E5%A5%BD%E6%9C%89%E5%8A%9B%E9%87%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer28" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer28"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/这段话真的好暖好有力量/这段话真的好暖好有力量.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>一个人最顶级的能力</title>
    <url>/2020/06/16/%E4%B8%80%E4%B8%AA%E4%BA%BA%E6%9C%80%E9%A1%B6%E7%BA%A7%E7%9A%84%E8%83%BD%E5%8A%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/一个人最顶级的能力/一个人最顶级的能力.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>高能量人格的特质</title>
    <url>/2020/06/07/%E9%AB%98%E8%83%BD%E9%87%8F%E4%BA%BA%E6%A0%BC%E7%9A%84%E7%89%B9%E8%B4%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer29" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer29"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/高能量人格的特质/高能量人格的特质.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>不要轻易把自己的目标告诉他人</title>
    <url>/2020/03/21/%E4%B8%8D%E8%A6%81%E8%BD%BB%E6%98%93%E6%8A%8A%E8%87%AA%E5%B7%B1%E7%9A%84%E7%9B%AE%E6%A0%87%E5%91%8A%E8%AF%89%E4%BB%96%E4%BA%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer3" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer3"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/不要轻易把自己的目标告诉他人/不要轻易把自己的目标告诉他人.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>这段话彻底治好了我对于原生家庭的焦虑</title>
    <url>/2019/11/21/%E8%BF%99%E6%AE%B5%E8%AF%9D%E5%BD%BB%E5%BA%95%E6%B2%BB%E5%A5%BD%E4%BA%86%E6%88%91%E5%AF%B9%E4%BA%8E%E5%8E%9F%E7%94%9F%E5%AE%B6%E5%BA%AD%E7%9A%84%E7%84%A6%E8%99%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer27" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer27"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/这段话彻底治好了我对于原生家庭的焦虑/这段话彻底治好了我对于原生家庭的焦虑.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>学会忍受悬而未决的状态</title>
    <url>/2019/06/29/%E5%AD%A6%E4%BC%9A%E5%BF%8D%E5%8F%97%E6%82%AC%E8%80%8C%E6%9C%AA%E5%86%B3%E7%9A%84%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer13" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer13"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/学会忍受悬而未决的状态/学会忍受悬而未决的状态.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>千万不要看见别人发光，就觉得自己黯淡</title>
    <url>/2018/07/28/%E5%8D%83%E4%B8%87%E4%B8%8D%E8%A6%81%E7%9C%8B%E8%A7%81%E5%88%AB%E4%BA%BA%E5%8F%91%E5%85%89%EF%BC%8C%E5%B0%B1%E8%A7%89%E5%BE%97%E8%87%AA%E5%B7%B1%E9%BB%AF%E6%B7%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer11" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer11"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/千万不要看见别人发光，就觉得自己黯淡/千万不要看见别人发光，就觉得自己黯淡.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>谨以此片，献给每一位纯爱战神</title>
    <url>/2018/05/10/%E8%B0%A8%E4%BB%A5%E6%AD%A4%E7%89%87%EF%BC%8C%E7%8C%AE%E7%BB%99%E6%AF%8F%E4%B8%80%E4%BD%8D%E7%BA%AF%E7%88%B1%E6%88%98%E7%A5%9E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer26" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer26"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/谨以此片，献给每一位纯爱战神/谨以此片，献给每一位纯爱战神.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>你开始炫耀自己，往往都是灾难的开始</title>
    <url>/2018/04/10/%E4%BD%A0%E5%BC%80%E5%A7%8B%E7%82%AB%E8%80%80%E8%87%AA%E5%B7%B1%EF%BC%8C%E5%BE%80%E5%BE%80%E9%83%BD%E6%98%AF%E7%81%BE%E9%9A%BE%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer5" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer5"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/你开始炫耀自己，往往都是灾难的开始/你开始炫耀自己，往往都是灾难的开始.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>一个内心强大的人都经历过什么</title>
    <url>/2018/02/16/%E4%B8%80%E4%B8%AA%E5%86%85%E5%BF%83%E5%BC%BA%E5%A4%A7%E7%9A%84%E4%BA%BA%E9%83%BD%E7%BB%8F%E5%8E%86%E8%BF%87%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/一个内心强大的人都经历过什么/一个内心强大的人都经历过什么.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>你越静，就越赢</title>
    <url>/2018/02/12/%E4%BD%A0%E8%B6%8A%E9%9D%99%EF%BC%8C%E5%B0%B1%E8%B6%8A%E8%B5%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer7" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer7"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/你越静，就越赢/你越静，就越赢.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>永远不要觉得尴尬和丢脸</title>
    <url>/2017/12/21/%E6%B0%B8%E8%BF%9C%E4%B8%8D%E8%A6%81%E8%A7%89%E5%BE%97%E5%B0%B4%E5%B0%AC%E5%92%8C%E4%B8%A2%E8%84%B8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer20" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer20"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/永远不要觉得尴尬和丢脸/永远不要觉得尴尬和丢脸.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>粒子物理学大地图</title>
    <url>/2017/12/06/%E7%B2%92%E5%AD%90%E7%89%A9%E7%90%86%E5%AD%A6%E5%A4%A7%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/%E5%9F%BA%E6%9C%AC%E5%8A%9F/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/%E7%B2%92%E5%AD%90%E7%89%A9%E7%90%86%E5%AD%A6%E5%A4%A7%E5%9B%BE/%E7%B2%92%E5%AD%90%E7%89%A9%E7%90%86%E5%AD%A6.png" alt="粒子物理学"></p>
]]></content>
      <tags>
        <tag>物理学</tag>
      </tags>
  </entry>
  <entry>
    <title>男人开始变成熟的迹象</title>
    <url>/2017/12/01/%E7%94%B7%E4%BA%BA%E5%BC%80%E5%A7%8B%E5%8F%98%E6%88%90%E7%86%9F%E7%9A%84%E8%BF%B9%E8%B1%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer24" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer24"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/男人开始变成熟地迹象/男人开始变成熟的迹象.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>你必须非常坚定的成为你想成为的那种人</title>
    <url>/2017/12/01/%E4%BD%A0%E5%BF%85%E9%A1%BB%E9%9D%9E%E5%B8%B8%E5%9D%9A%E5%AE%9A%E7%9A%84%E6%88%90%E4%B8%BA%E4%BD%A0%E6%83%B3%E6%88%90%E4%B8%BA%E7%9A%84%E9%82%A3%E7%A7%8D%E4%BA%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer6" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer6"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/你必须非常坚定的成为你想成为的那种人/你必须非常坚定的成为你想成为的那种人.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>允许一切发生</title>
    <url>/2017/11/14/%E5%85%81%E8%AE%B8%E4%B8%80%E5%88%87%E5%8F%91%E7%94%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer9" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer9"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/允许一切发生/允许一切发生.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>让我疯狂自律的一段话</title>
    <url>/2017/08/14/%E8%AE%A9%E6%88%91%E7%96%AF%E7%8B%82%E8%87%AA%E5%BE%8B%E7%9A%84%E4%B8%80%E6%AE%B5%E8%AF%9D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer25" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer25"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/让我疯狂自律的一段话/让我疯狂自律的一段话.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>我乃三姓家奴</title>
    <url>/2017/07/16/%E6%88%91%E4%B9%83%E4%B8%89%E5%A7%93%E5%AE%B6%E5%A5%B4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>     大丈夫身居天地之间，岂能郁郁久居人下？即使处于逆境，也当屈身守分，以待天时。夫英雄者，胸怀大志，富有良策，有包藏宇宙之机，吞吐天地之志也！</p>
<div id="dplayer16" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer16"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/大丈夫之志/大丈夫之志.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
  <entry>
    <title>不自证</title>
    <url>/2017/04/10/%E4%B8%8D%E8%87%AA%E8%AF%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div id="dplayer4" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer4"),"theme":"#FADFA3","loop":true,"lang":"zh-cn","screenshot":true,"hotkey":true,"preload":"auto","volume":0.9,"mutex":true,"video":{"url":"/video/不自证/不自证.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <tags>
        <tag>成长</tag>
      </tags>
  </entry>
</search>
